E1=accept\\(\\) on closed socket .*?	(W closed) You tried to do an accept on a closed socket. Did you forget\nto check the return value of your socket() call? See\nL<perlfunc/accept>.
E3=Allocation too large: .*?	(X) You can't allocate more than 64K on an MS-DOS machine.
E5='!' allowed only after types .*?	(F) The '!' is allowed in pack() or unpack() only after certain types.\nSee L<perlfunc/pack>.
E7=Ambiguous call resolved as CORE::.*?\\(\\), qualify as such or use &	(W ambiguous) A subroutine you have declared has the same name as a Perl\nkeyword, and you have used the name without qualification for calling\none or the other. Perl decided to call the builtin because the\nsubroutine is not imported.
E9=Ambiguous range in transliteration operator	(F) You wrote something like C<tr/a-z-0//> which doesn't mean anything at\nall. To include a C<-> character in a transliteration, put it either\nfirst or last. (In the past, C<tr/a-z-0//> was synonymous with\nC<tr/a-y//>, which was probably not what you would have expected.)
E11=Ambiguous use of .*? resolved as .*?	(W ambiguous)(S) You said something that may not be interpreted the way\nyou thought. Normally it's pretty easy to disambiguate it by supplying\na missing quote, operator, parenthesis pair or declaration.
E13='\\|' and '<' may not both be specified on command line	(F) An error peculiar to VMS. Perl does its own command line\nredirection, and found that STDIN was a pipe, and that you also tried to\nredirect STDIN using '<'. Only one STDIN stream to a customer, please.
E15='\\|' and '>' may not both be specified on command line	(F) An error peculiar to VMS. Perl does its own command line\nredirection, and thinks you tried to redirect stdout both to a file and\ninto a pipe to another command. You need to choose one or the other,\nthough nothing's stopping you from piping into a program or Perl script\nwhich 'splits' output into two streams, such as
E17=Applying .*? to .*? will act on scalar\\(.*?\\)	(W misc) The pattern match (C<//>), substitution (C<s///>), and\ntransliteration (C<tr///>) operators work on scalar values. If you apply\none of them to an array or a hash, it will convert the array or hash to\na scalar value -- the length of an array, or the population info of a\nhash -- and then work on that scalar value. This is probably not what\nyou meant to do. See L<perlfunc/grep> and L<perlfunc/map> for\nalternatives.
E19=Args must match #! line	(F) The setuid emulator requires that the arguments Perl was invoked\nwith match the arguments specified on the #! line. Since some systems\nimpose a one-argument limit on the #! line, try combining switches;\nfor example, turn C<-w -U> into C<-wU>.
E21=Arg too short for msgsnd	(F) msgsnd() requires a string at least as long as sizeof(long).
E23=.*? argument is not a HASH or ARRAY element	(F) The argument to exists() must be a hash or array element, such as:
E25=.*? argument is not a HASH or ARRAY element or slice	(F) The argument to delete() must be either a hash or array element,\nsuch as:
E27=.*? argument is not a subroutine name	(F) The argument to exists() for C<exists &sub> must be a subroutine\nname, and not a subroutine call. C<exists &sub()> will generate this\nerror.
E29=Argument ".*?" isn't numeric.*?	(W numeric) The indicated string was fed as an argument to an operator\nthat expected a numeric value instead. If you're fortunate the message\nwill identify which operator was so unfortunate.
E31=Argument list not closed for PerlIO layer ".*?"	(W layer) When pushing a layer with arguments onto the Perl I/O system you\nforgot the ) that closes the argument list. (Layers take care of transforming\ndata between external and internal representations.) Perl stopped parsing\nthe layer list at this point and did not attempt to push this layer.\nIf your program didn't explicitly request the failing operation, it may be\nthe result of the value of the environment variable PERLIO.
E33=Array @.*? missing the @ in argument .*? of .*?\\(\\)	(D deprecated) Really old Perl let you omit the @ on array names in some\nspots. This is now heavily deprecated.
E35=assertion botched: .*?	(P) The malloc package that comes with Perl had an internal failure.
E37=Assertion failed: file ".*?"	(P) A general assertion failed. The file in question must be examined.
E39=Assignment to both a list and a scalar	(F) If you assign to a conditional operator, the 2nd and 3rd arguments\nmust either both be scalars or both be lists. Otherwise Perl won't\nknow which context to supply to the right side.
E41=A thread exited while .*? threads were running	(W threads)(S) When using threaded Perl, a thread (not necessarily the main\nthread) exited while there were still other threads running.\nUsually it's a good idea to first collect the return values of the\ncreated threads by joining them, and only then exit from the main\nthread. See L<threads>.
E43=Attempt to access disallowed key '.*?' in a restricted hash	(F) The failing code has attempted to get or set a key which is not in\nthe current set of allowed keys of a restricted hash.
E45=Attempt to bless into a reference	(F) The CLASSNAME argument to the bless() operator is expected to be\nthe name of the package to bless the resulting object into. You've\nsupplied instead a reference to something: perhaps you wrote
E47=Attempt to delete disallowed key '.*?' from a restricted hash	(F) The failing code attempted to delete from a restricted hash a key\nwhich is not in its key set.
E49=Attempt to delete readonly key '.*?' from a restricted hash	(F) The failing code attempted to delete a key whose value has been\ndeclared readonly from a restricted hash.
E51=Attempt to free non-arena SV: 0x.*?	(P internal) All SV objects are supposed to be allocated from arenas\nthat will be garbage collected on exit. An SV was discovered to be\noutside any of those arenas.
E53=Attempt to free nonexistent shared string	(P internal) Perl maintains a reference counted internal table of\nstrings to optimize the storage and access of hash keys and other\nstrings. This indicates someone tried to decrement the reference count\nof a string that can no longer be found in the table.
E55=Attempt to free temp prematurely	(W debugging) Mortalized values are supposed to be freed by the\nfree_tmps() routine. This indicates that something else is freeing the\nSV before the free_tmps() routine gets a chance, which means that the\nfree_tmps() routine will be freeing an unreferenced scalar when it does\ntry to free it.
E57=Attempt to free unreferenced glob pointers	(P internal) The reference counts got screwed up on symbol aliases.
E59=Attempt to free unreferenced scalar	(W internal) Perl went to decrement the reference count of a scalar to\nsee if it would go to 0, and discovered that it had already gone to 0\nearlier, and should have been freed, and in fact, probably was freed.\nThis could indicate that SvREFCNT_dec() was called too many times, or\nthat SvREFCNT_inc() was called too few times, or that the SV was\nmortalized when it shouldn't have been, or that memory has been\ncorrupted.
E61=Attempt to join self	(F) You tried to join a thread from within itself, which is an\nimpossible task. You may be joining the wrong thread, or you may need\nto move the join() to some other thread.
E63=Attempt to pack pointer to temporary value	(W pack) You tried to pass a temporary value (like the result of a\nfunction, or a computed expression) to the "p" pack() template. This\nmeans the result contains a pointer to a location that could become\ninvalid anytime, even before the end of the current statement. Use\nliterals or global values as arguments to the "p" pack() template to\navoid this warning.
E65=Attempt to set length of freed array	(W) You tried to set the length of an array which has been freed. You\ncan do this by storing a reference to the scalar representing the last index\nof an array and later assigning through that reference. For example
E67=Attempt to use reference as lvalue in substr	(W substr) You supplied a reference as the first argument to substr()\nused as an lvalue, which is pretty strange. Perhaps you forgot to\ndereference it first. See L<perlfunc/substr>.
E69=Bad arg length for .*?, is .*?, should be .*?	(F) You passed a buffer of the wrong size to one of msgctl(), semctl()\nor shmctl(). In C parlance, the correct sizes are, respectively,\nS<sizeof(struct msqid_ds *)>, S<sizeof(struct semid_ds *)>, and\nS<sizeof(struct shmid_ds *)>.
E71=Bad evalled substitution pattern	(F) You've used the C</e> switch to evaluate the replacement for a\nsubstitution, but perl found a syntax error in the code to evaluate,\nmost likely an unexpected right brace '}'.
E73=Bad filehandle: .*?	(F) A symbol was passed to something wanting a filehandle, but the\nsymbol has no filehandle associated with it. Perhaps you didn't do an\nopen(), or did it in another package.
E75=Bad free\\(\\) ignored	(S malloc) An internal routine called free() on something that had never\nbeen malloc()ed in the first place. Mandatory, but can be disabled by\nsetting environment variable C<PERL_BADFREE> to 0.
E77=Bad hash	(P) One of the internal hash routines was passed a null HV pointer.
E79=Bad index while coercing array into hash	(F) The index looked up in the hash found as the 0'th element of a\npseudo-hash is not legal. Index values must be at 1 or greater.\nSee L<perlref>.
E81=Badly placed \\(\\)'s	(A) You've accidentally run your script through B<csh> instead\nof Perl. Check the #! line, or manually feed your script into\nPerl yourself.
E83=Bad name after .*?::	(F) You started to name a symbol by using a package prefix, and then\ndidn't finish the symbol. In particular, you can't interpolate outside\nof quotes, so
E85=Bad realloc\\(\\) ignored	(S malloc) An internal routine called realloc() on something that had\nnever been malloc()ed in the first place. Mandatory, but can be disabled\nby setting environment variable C<PERL_BADFREE> to 1.
E87=Bad symbol for array	(P) An internal request asked to add an array entry to something that\nwasn't a symbol table entry.
E89=Bad symbol for filehandle	(P) An internal request asked to add a filehandle entry to something\nthat wasn't a symbol table entry.
E91=Bad symbol for hash	(P) An internal request asked to add a hash entry to something that\nwasn't a symbol table entry.
E93=Bareword found in conditional	(W bareword) The compiler found a bareword where it expected a\nconditional, which often indicates that an || or && was parsed as part\nof the last argument of the previous construct, for example:
E95=Bareword ".*?" not allowed while "strict subs" in use	(F) With "strict subs" in use, a bareword is only allowed as a\nsubroutine identifier, in curly brackets or to the left of the "=>"\nsymbol. Perhaps you need to predeclare a subroutine?
E97=Bareword ".*?" refers to nonexistent package	(W bareword) You used a qualified bareword of the form C<Foo::>, but the\ncompiler saw no other uses of that namespace before that point. Perhaps\nyou need to predeclare a package?
E99=BEGIN failed--compilation aborted	(F) An untrapped exception was raised while executing a BEGIN\nsubroutine. Compilation stops immediately and the compiler is\nexited.
E101=BEGIN not safe after errors--compilation aborted	(F) Perl found a C<BEGIN {}> subroutine (or a C<use> directive, which\nimplies a C<BEGIN {}>) after one or more compilation errors had already\noccurred. Since the intended environment for the C<BEGIN {}> could not\nbe guaranteed (due to the errors), and since subsequent code likely\ndepends on its correct operation, Perl just gave up.
E103=.1 better written as \\$1	(W syntax) Outside of patterns, backreferences live on as variables.\nThe use of backslashes is grandfathered on the right-hand side of a\nsubstitution, but stylistically it's better to use the variable form\nbecause other Perl programmers will expect it, and it works better if\nthere are more than 9 backreferences.
E105=Binary number > 0b11111111111111111111111111111111 non-portable	(W portable) The binary number you specified is larger than 2**32-1\n(4294967295) and therefore non-portable between systems. See\nL<perlport> for more on portability concerns.
E107=bind\\(\\) on closed socket .*?	(W closed) You tried to do a bind on a closed socket. Did you forget to\ncheck the return value of your socket() call? See L<perlfunc/bind>.
E109=binmode\\(\\) on closed filehandle .*?	(W unopened) You tried binmode() on a filehandle that was never opened.\nCheck you control flow and number of arguments.
E111=Bit vector size > 32 non-portable	(W portable) Using bit vector sizes larger than 32 is non-portable.
E113=Bizarre copy of .*? in .*?	(P) Perl detected an attempt to copy an internal value that is not\ncopyable.
E115=Buffer overflow in prime_env_iter: .*?	(W internal) A warning peculiar to VMS. While Perl was preparing to\niterate over %ENV, it encountered a logical name or symbol definition\nwhich was too long, so it was truncated to the string shown.
E117=Callback called exit	(F) A subroutine invoked from an external package via call_sv()\nexited by calling exit.
E119=.*?\\(\\) called too early to check prototype	(W prototype) You've called a function that has a prototype before the\nparser saw a definition or declaration for it, and Perl could not check\nthat the call conforms to the prototype. You need to either add an\nearly prototype declaration for the subroutine in question, or move the\nsubroutine definition ahead of the call to get proper prototype\nchecking. Alternatively, if you are certain that you're calling the\nfunction correctly, you may put an ampersand before the name to avoid\nthe warning. See L<perlsub>.
E121=Cannot compress integer in pack	(F) An argument to pack("w",...) was too large to compress. The BER\ncompressed integer format can only be used with positive integers, and you\nattempted to compress Infinity or a very large number (> 1e308).\nSee L<perlfunc/pack>.
E123=Cannot compress negative numbers in pack	(F) An argument to pack("w",...) was negative. The BER compressed integer\nformat can only be used with positive integers. See L<perlfunc/pack>.
E125=Can only compress unsigned integers in pack	(F) An argument to pack("w",...) was not an integer. The BER compressed\ninteger format can only be used with positive integers, and you attempted\nto compress something else. See L<perlfunc/pack>.
E127=Can't bless non-reference value	(F) Only hard references may be blessed. This is how Perl "enforces"\nencapsulation of objects. See L<perlobj>.
E129=Can't call method ".*?" in empty package ".*?"	(F) You called a method correctly, and it correctly indicated a package\nfunctioning as a class, but that package doesn't have ANYTHING defined\nin it, let alone methods. See L<perlobj>.
E131=Can't call method ".*?" on an undefined value	(F) You used the syntax of a method call, but the slot filled by the\nobject reference or package name contains an undefined value. Something\nlike this will reproduce the error:
E133=Can't call method ".*?" on unblessed reference	(F) A method call must know in what package it's supposed to run. It\nordinarily finds this out from the object reference you supply, but you\ndidn't supply an object reference in this case. A reference isn't an\nobject reference until it has been blessed. See L<perlobj>.
E135=Can't call method ".*?" without a package or object reference	(F) You used the syntax of a method call, but the slot filled by the\nobject reference or package name contains an expression that returns a\ndefined value which is neither an object reference nor a package name.\nSomething like this will reproduce the error:
E137=Can't chdir to .*?	(F) You called C<perl -x/foo/bar>, but C</foo/bar> is not a directory\nthat you can chdir to, possibly because it doesn't exist.
E139=Can't check filesystem of script ".*?" for nosuid	(P) For some reason you can't check the filesystem of the script for\nnosuid.
E141=Can't coerce array into hash	(F) You used an array where a hash was expected, but the array has no\ninformation on how to map from keys to array indices. You can do that\nonly with arrays that have a hash reference at index 0.
E143=Can't coerce .*? to integer in .*?	(F) Certain types of SVs, in particular real symbol table entries\n(typeglobs), can't be forced to stop being what they are. So you can't\nsay things like:
E145=Can't coerce .*? to number in .*?	(F) Certain types of SVs, in particular real symbol table entries\n(typeglobs), can't be forced to stop being what they are.
E147=Can't coerce .*? to string in .*?	(F) Certain types of SVs, in particular real symbol table entries\n(typeglobs), can't be forced to stop being what they are.
E149=Can't create pipe mailbox	(P) An error peculiar to VMS. The process is suffering from exhausted\nquotas or other plumbing problems.
E151=Can't declare class for non-scalar .*? in ".*?"	(F) Currently, only scalar variables can be declared with a specific\nclass qualifier in a "my" or "our" declaration. The semantics may be\nextended for other types of variables in future.
E153=Can't declare .*? in ".*?"	(F) Only scalar, array, and hash variables may be declared as "my" or\n"our" variables. They must have ordinary identifiers as names.
E155=Can't do inplace edit: .*? is not a regular file	(S inplace) You tried to use the B<-i> switch on a special file, such as\na file in /dev, or a FIFO. The file was ignored.
E157=Can't do inplace edit on .*?: .*?	(S inplace) The creation of the new file failed for the indicated\nreason.
E159=Can't do inplace edit without backup	(F) You're on a system such as MS-DOS that gets confused if you try\nreading from a deleted (but still opened) file. You have to say\nC<-i.bak>, or some such.
E161=Can't do inplace edit: .*? would not be unique	(S inplace) Your filesystem does not support filenames longer than 14\ncharacters and Perl was unable to create a unique filename during\ninplace editing with the B<-i> switch. The file was ignored.
E163=Can't do \\{n,m\\} with n > m in regex; marked by <-- HERE in m/.*?/	(F) Minima must be less than or equal to maxima. If you really want your\nregexp to match something 0 times, just put {0}. The <-- HERE shows in the\nregular expression about where the problem was discovered. See L<perlre>.
E165=Can't do setegid!	(P) The setegid() call failed for some reason in the setuid emulator of\nsuidperl.
E167=Can't do seteuid!	(P) The setuid emulator of suidperl failed for some reason.
E169=Can't do setuid	(F) This typically means that ordinary perl tried to exec suidperl to do\nsetuid emulation, but couldn't exec it. It looks for a name of the form\nsperl5.000 in the same directory that the perl executable resides under\nthe name perl5.000, typically /usr/local/bin on Unix machines. If the\nfile is there, check the execute permissions. If it isn't, ask your\nsysadmin why he and/or she removed it.
E171=Can't do waitpid with flags	(F) This machine doesn't have either waitpid() or wait4(), so only\nwaitpid() without flags is emulated.
E173=Can't emulate -.*? on #! line	(F) The #! line specifies a switch that doesn't make sense at this\npoint. For example, it'd be kind of silly to put a B<-x> on the #!\nline.
E175=Can't exec ".*?": .*?	(W exec) A system(), exec(), or piped open call could not execute the\nnamed program for the indicated reason. Typical reasons include: the\npermissions were wrong on the file, the file wasn't found in\nC<$ENV{PATH}>, the executable in question was compiled for another\narchitecture, or the #! line in a script points to an compiler that\ncan't be run for similar reasons. (Or maybe your system doesn't support\n#! at all.)
E177=Can't exec .*?	(F) Perl was trying to execute the indicated program for you because\nthat's what the #! line said. If that's not what you wanted, you may\nneed to mention "perl" on the #! line somewhere.
E179=Can't execute .*?	(F) You used the B<-S> switch, but the copies of the script to execute\nfound in the PATH did not have correct permissions.
E181=Can't find an opnumber for ".*?"	(F) A string of a form C<CORE::word> was given to prototype(), but there\nis no builtin with the name C<word>.
E183=Can't find .*? character property ".*?"	(F) You used C<\\p{}> or C<\\P{}> but the character property by that name\ncould not be found. Maybe you misspelled the name of the property\n(remember that the names of character properties consist only of\nalphanumeric characters), or maybe you forgot the C<Is> or C<In> prefix?
E185=Can't find label .*?	(F) You said to goto a label that isn't mentioned anywhere that it's\npossible for us to go to. See L<perlfunc/goto>.
E187=Can't find .*? on PATH	(F) You used the B<-S> switch, but the script to execute could not be\nfound in the PATH.
E189=Can't find .*? on PATH, '.' not in PATH	(F) You used the B<-S> switch, but the script to execute could not be\nfound in the PATH, or at least not with the correct permissions. The\nscript exists in the current directory, but PATH prohibits running it.
E191=Can't find .*? property definition .*?	(F) You may have tried to use C<\\p> which means a Unicode property (for\nexample C<\\p{Lu}> is all uppercase letters). If you did mean to use a\nUnicode property, see L<perlunicode> for the list of known properties.\nIf you didn't mean to use a Unicode property, escape the C<\\p>, either\nby C<\\\\p> (just the C<\\p>) or by C<\\Q\\p> (the rest of the string, until\npossible C<\\E>).
E193=Can't find string terminator .*? anywhere before EOF	(F) Perl strings can stretch over multiple lines. This message means\nthat the closing delimiter was omitted. Because bracketed quotes count\nnesting levels, the following is missing its final parenthesis:
E195=Can't fork	(F) A fatal error occurred while trying to fork while opening a\npipeline.
E197=Can't get filespec - stale stat buffer\\?	(S) A warning peculiar to VMS. This arises because of the difference\nbetween access checks under VMS and under the Unix model Perl assumes.\nUnder VMS, access checks are done by filename, rather than by bits in\nthe stat buffer, so that ACLs and other protections can be taken into\naccount. Unfortunately, Perl assumes that the stat buffer contains all\nthe necessary information, and passes it, instead of the filespec, to\nthe access checking routine. It will try to retrieve the filespec using\nthe device name and FID present in the stat buffer, but this works only\nif you haven't made a subsequent call to the CRTL stat() routine,\nbecause the device name is overwritten with each call. If this warning\nappears, the name lookup failed, and the access checking routine gave up\nand returned FALSE, just to be conservative. (Note: The access checking\nroutine knows about the Perl C<stat> operator and file tests, so you\nshouldn't ever see this warning in response to a Perl command; it arises\nonly if some internal code takes stat buffers lightly.)
E199=Can't get pipe mailbox device name	(P) An error peculiar to VMS. After creating a mailbox to act as a\npipe, Perl can't retrieve its name for later use.
E201=Can't get SYSGEN parameter value for MAXBUF	(P) An error peculiar to VMS. Perl asked $GETSYI how big you want your\nmailbox buffers to be, and didn't get an answer.
E203=Can't "goto" into the middle of a foreach loop	(F) A "goto" statement was executed to jump into the middle of a foreach\nloop. You can't get there from here. See L<perlfunc/goto>.
E205=Can't "goto" out of a pseudo block	(F) A "goto" statement was executed to jump out of what might look like\na block, except that it isn't a proper block. This usually occurs if\nyou tried to jump out of a sort() block or subroutine, which is a no-no.\nSee L<perlfunc/goto>.
E207=Can't goto subroutine from an eval-.*?	(F) The "goto subroutine" call can't be used to jump out of an eval\n"string" or block.
E209=Can't goto subroutine outside a subroutine	(F) The deeply magical "goto subroutine" call can only replace one\nsubroutine call for another. It can't manufacture one out of whole\ncloth. In general you should be calling it out of only an AUTOLOAD\nroutine anyway. See L<perlfunc/goto>.
E211=Can't ignore signal CHLD, forcing to default	(W signal) Perl has detected that it is being run with the SIGCHLD\nsignal (sometimes known as SIGCLD) disabled. Since disabling this\nsignal will interfere with proper determination of exit status of child\nprocesses, Perl has reset the signal to its default value. This\nsituation typically indicates that the parent program under which Perl\nmay be running (e.g. cron) is being very careless.
E213=Can't "last" outside a loop block	(F) A "last" statement was executed to break out of the current block,\nexcept that there's this itty bitty problem called there isn't a current\nblock. Note that an "if" or "else" block doesn't count as a "loopish"\nblock, as doesn't a block given to sort(), map() or grep(). You can\nusually double the curlies to get the same effect though, because the\ninner curlies will be considered a block that loops once. See\nL<perlfunc/last>.
E215=Can't load '.*?' for module .*?	(F) The module you tried to load failed to load a dynamic extension. This\nmay either mean that you upgraded your version of perl to one that is\nincompatible with your old dynamic extensions (which is known to happen\nbetween major versions of perl), or (more likely) that your dynamic\nextension was built against an older version of the library that is\ninstalled on your system. You may need to rebuild your old dynamic\nextensions.
E217=Can't localize lexical variable .*?	(F) You used local on a variable name that was previously declared as a\nlexical variable using "my". This is not allowed. If you want to\nlocalize a package variable of the same name, qualify it with the\npackage name.
E219=Can't localize pseudo-hash element	(F) You said something like C<local $ar->{'key'}>, where $ar is a\nreference to a pseudo-hash. That hasn't been implemented yet, but you\ncan get a similar effect by localizing the corresponding array element\ndirectly -- C<local $ar->[$ar->[0]{'key'}]>.
E221=Can't localize through a reference	(F) You said something like C<local $$ref>, which Perl can't currently\nhandle, because when it goes to restore the old value of whatever $ref\npointed to after the scope of the local() is finished, it can't be sure\nthat $ref will still be a reference.
E223=Can't locate .*?	(F) You said to C<do> (or C<require>, or C<use>) a file that couldn't be\nfound. Perl looks for the file in all the locations mentioned in @INC,\nunless the file name included the full path to the file. Perhaps you\nneed to set the PERL5LIB or PERL5OPT environment variable to say where\nthe extra library is, or maybe the script needs to add the library name\nto @INC. Or maybe you just misspelled the name of the file. See\nL<perlfunc/require> and L<lib>.
E225=Can't locate auto/.*?.al in @INC	(F) A function (or method) was called in a package which allows\nautoload, but there is no function to autoload. Most probable causes\nare a misprint in a function/method name or a failure to C<AutoSplit>\nthe file, say, by doing C<make install>.
E227=Can't locate loadable object for module .*? in @INC	(F) The module you loaded is trying to load an external library, like\nfor example, C<foo.so> or C<bar.dll>, but the L<DynaLoader> module was\nunable to locate this library. See L<DynaLoader>.
E229=Can't locate object method ".*?" via package ".*?"	(F) You called a method correctly, and it correctly indicated a package\nfunctioning as a class, but that package doesn't define that particular\nmethod, nor does any of its base classes. See L<perlobj>.
E231=Can't locate package .*? for @.*?::ISA	(W syntax) The @ISA array contained the name of another package that\ndoesn't seem to exist.
E233=Can't locate PerlIO.*?	(F) You tried to use in open() a PerlIO layer that does not exist,\ne.g. open(FH, ">:nosuchlayer", "somefile").
E235=Can't make list assignment to .%ENV on this system	(F) List assignment to %ENV is not supported on some systems, notably\nVMS.
E237=Can't modify .*? in .*?	(F) You aren't allowed to assign to the item indicated, or otherwise try\nto change it, such as with an auto-increment.
E239=Can't modify nonexistent substring	(P) The internal routine that does assignment to a substr() was handed\na NULL.
E241=Can't modify non-lvalue subroutine call	(F) Subroutines meant to be used in lvalue context should be declared as\nsuch, see L<perlsub/"Lvalue subroutines">.
E243=Can't msgrcv to read-only var	(F) The target of a msgrcv must be modifiable to be used as a receive\nbuffer.
E245=Can't "next" outside a loop block	(F) A "next" statement was executed to reiterate the current block, but\nthere isn't a current block. Note that an "if" or "else" block doesn't\ncount as a "loopish" block, as doesn't a block given to sort(), map() or\ngrep(). You can usually double the curlies to get the same effect\nthough, because the inner curlies will be considered a block that loops\nonce. See L<perlfunc/next>.
E247=Can't open .*?: .*?	(S inplace) The implicit opening of a file through use of the C<<>>\nfilehandle, either implicitly under the C<-n> or C<-p> command-line\nswitches, or explicitly, failed for the indicated reason. Usually this\nis because you don't have read permission for a file which you named on\nthe command line.
E249=Can't open a reference	(W io) You tried to open a scalar reference for reading or writing,\nusing the 3-arg open() syntax :
E251=Can't open bidirectional pipe	(W pipe) You tried to say C<open(CMD, "|cmd|")>, which is not supported.\nYou can try any of several modules in the Perl library to do this, such\nas IPC::Open2. Alternately, direct the pipe's output to a file using\n">", and then read it in under a different file handle.
E253=Can't open error file .*? as stderr	(F) An error peculiar to VMS. Perl does its own command line\nredirection, and couldn't open the file specified after '2>' or '2>>' on\nthe command line for writing.
E255=Can't open input file .*? as stdin	(F) An error peculiar to VMS. Perl does its own command line\nredirection, and couldn't open the file specified after '<' on the\ncommand line for reading.
E257=Can't open output file .*? as stdout	(F) An error peculiar to VMS. Perl does its own command line\nredirection, and couldn't open the file specified after '>' or '>>' on\nthe command line for writing.
E259=Can't open output pipe \\(name: .*?\\)	(P) An error peculiar to VMS. Perl does its own command line\nredirection, and couldn't open the pipe into which to send data destined\nfor stdout.
E261=Can't open perl script.*?	(F) The script you specified can't be opened for the indicated reason.
E263=Can't read CRTL environ	(S) A warning peculiar to VMS. Perl tried to read an element of %ENV\nfrom the CRTL's internal environment array and discovered the array was\nmissing. You need to figure out where your CRTL misplaced its environ\nor define F<PERL_ENV_TABLES> (see L<perlvms>) so that environ is not\nsearched.
E265=Can't redefine active sort subroutine .*?	(F) Perl optimizes the internal handling of sort subroutines and keeps\npointers into them. You tried to redefine one such sort subroutine when\nit was currently active, which is not allowed. If you really want to do\nthis, you should write C<sort { &func } @x> instead of C<sort func @x>.
E267=Can't "redo" outside a loop block	(F) A "redo" statement was executed to restart the current block, but\nthere isn't a current block. Note that an "if" or "else" block doesn't\ncount as a "loopish" block, as doesn't a block given to sort(), map()\nor grep(). You can usually double the curlies to get the same effect\nthough, because the inner curlies will be considered a block that\nloops once. See L<perlfunc/redo>.
E269=Can't remove .*?: .*?, skipping file	(S inplace) You requested an inplace edit without creating a backup\nfile. Perl was unable to remove the original file to replace it with\nthe modified file. The file was left unmodified.
E271=Can't rename .*? to .*?: .*?, skipping file	(S inplace) The rename done by the B<-i> switch failed for some reason,\nprobably because you don't have write permission to the directory.
E273=Can't reopen input pipe \\(name: .*?\\) in binary mode	(P) An error peculiar to VMS. Perl thought stdin was a pipe, and tried\nto reopen it to accept binary data. Alas, it failed.
E275=Can't resolve method `.*?' overloading `.*?' in package `.*?'	(F|P) Error resolving overloading specified by a method name (as opposed\nto a subroutine reference): no such method callable via the package. If\nmethod name is C<???>, this is an internal error.
E277=Can't reswap uid and euid	(P) The setreuid() call failed for some reason in the setuid emulator of\nsuidperl.
E279=Can't return .*? from lvalue subroutine	(F) Perl detected an attempt to return illegal lvalues (such as\ntemporary or readonly values) from a subroutine used as an lvalue. This\nis not allowed.
E281=Can't return outside a subroutine	(F) The return statement was executed in mainline code, that is, where\nthere was no subroutine call to return out of. See L<perlsub>.
E283=Can't return .*? to lvalue scalar context	(F) You tried to return a complete array or hash from an lvalue subroutine,\nbut you called the subroutine in a way that made Perl think you meant\nto return only one value. You probably meant to write parentheses around\nthe call to the subroutine, which tell Perl that the call should be in\nlist context.
E285=Can't stat script ".*?"	(P) For some reason you can't fstat() the script even though you have it\nopen already. Bizarre.
E287=Can't swap uid and euid	(P) The setreuid() call failed for some reason in the setuid emulator of\nsuidperl.
E289=Can't take log of %g	(F) For ordinary real numbers, you can't take the logarithm of a\nnegative number or zero. There's a Math::Complex package that comes\nstandard with Perl, though, if you really want to do that for the\nnegative numbers.
E291=Can't take sqrt of %g	(F) For ordinary real numbers, you can't take the square root of a\nnegative number. There's a Math::Complex package that comes standard\nwith Perl, though, if you really want to do that.
E293=Can't undef active subroutine	(F) You can't undefine a routine that's currently running. You can,\nhowever, redefine it while it's running, and you can even undef the\nredefined subroutine while the old routine is running. Go figure.
E295=Can't unshift	(F) You tried to unshift an "unreal" array that can't be unshifted, such\nas the main Perl stack.
E297=Can't upgrade that kind of scalar	(P) The internal sv_upgrade routine adds "members" to an SV, making it\ninto a more specialized kind of SV. The top several SV types are so\nspecialized, however, that they cannot be interconverted. This message\nindicates that such a conversion was attempted.
E299=Can't upgrade to undef	(P) The undefined SV is the bottom of the totem pole, in the scheme of\nupgradability. Upgrading to undef indicates an error in the code\ncalling sv_upgrade.
E301=Can't use anonymous symbol table for method lookup	(F) The internal routine that does method lookup was handed a symbol\ntable that doesn't have a name. Symbol tables can become anonymous\nfor example by undefining stashes: C<undef %Some::Package::>.
E303=Can't use an undefined value as .*? reference	(F) A value used as either a hard reference or a symbolic reference must\nbe a defined value. This helps to delurk some insidious errors.
E305=Can't use bareword \\(".*?"\\) as .*? ref while "strict refs" in use	(F) Only hard references are allowed by "strict refs". Symbolic\nreferences are disallowed. See L<perlref>.
E307=Can't use %! because Errno.pm is not available	(F) The first time the %! hash is used, perl automatically loads the\nErrno.pm module. The Errno module is expected to tie the %! hash to\nprovide symbolic names for C<$!> errno values.
E309=Can't use .*? for loop variable	(F) Only a simple scalar variable may be used as a loop variable on a\nforeach.
E311=Can't use global .*? in "my"	(F) You tried to declare a magical variable as a lexical variable. This\nis not allowed, because the magic can be tied to only one location\n(namely the global variable) and it would be incredibly confusing to\nhave variables in your program that looked like magical variables but\nweren't.
E313=Can't use "my .*?" in sort comparison	(F) The global variables $a and $b are reserved for sort comparisons.\nYou mentioned $a or $b in the same line as the <=> or cmp operator,\nand the variable had earlier been declared as a lexical variable.\nEither qualify the sort variable with the package name, or rename the\nlexical variable.
E315=Can't use .*? ref as .*? ref	(F) You've mixed up your reference types. You have to dereference a\nreference of the type needed. You can use the ref() function to\ntest the type of the reference, if need be.
E317=Can't use string \\(".*?"\\) as .*? ref while "strict refs" in use	(F) Only hard references are allowed by "strict refs". Symbolic\nreferences are disallowed. See L<perlref>.
E319=Can't use subscript on .*?	(F) The compiler tried to interpret a bracketed expression as a\nsubscript. But to the left of the brackets was an expression that\ndidn't look like a hash or array reference, or anything else subscriptable.
E321=Can't use ..*? to mean \\$.*? in expression	(W syntax) In an ordinary expression, backslash is a unary operator that\ncreates a reference to its argument. The use of backslash to indicate a\nbackreference to a matched substring is valid only as part of a regular\nexpression pattern. Trying to do this in ordinary Perl code produces a\nvalue that prints out looking like SCALAR(0xdecaf). Use the $1 form\ninstead.
E323=Can't weaken a nonreference	(F) You attempted to weaken something that was not a reference. Only\nreferences can be weakened.
E325=Can't x= to read-only value	(F) You tried to repeat a constant value (often the undefined value)\nwith an assignment operator, which implies modifying the value itself.\nPerhaps you need to copy the value to a temporary, and repeat that.
E327=Character in "C" format wrapped in pack	(W pack) You said
E329=Character in "c" format wrapped in pack	(W pack) You said
E331=close\\(\\) on unopened filehandle .*?	(W unopened) You tried to close a filehandle that was never opened.
E333=Code missing after '/'	(F) You had a (sub-)template that ends with a '/'. There must be another\ntemplate code following the slash. See L<perlfunc/pack>.
E335=.*?: Command not found	(A) You've accidentally run your script through B<csh> instead of Perl.\nCheck the #! line, or manually feed your script into Perl yourself.
E337=Compilation failed in require	(F) Perl could not compile a file specified in a C<require> statement.\nPerl uses this generic message when none of the errors that it\nencountered were severe enough to halt compilation immediately.
E339=Complex regular subexpression recursion limit \\(.*?\\) exceeded	(W regexp) The regular expression engine uses recursion in complex\nsituations where back-tracking is required. Recursion depth is limited\nto 32766, or perhaps less in architectures where the stack cannot grow\narbitrarily. ("Simple" and "medium" situations are handled without\nrecursion and are not subject to a limit.) Try shortening the string\nunder examination; looping in Perl code (e.g. with C<while>) rather than\nin the regular expression engine; or rewriting the regular expression so\nthat it is simpler or backtracks less. (See L<perlfaq2> for information\non I<Mastering Regular Expressions>.)
E341=cond_broadcast\\(\\) called on unlocked variable	(W threads) Within a thread-enabled program, you tried to call\ncond_broadcast() on a variable which wasn't locked. The cond_broadcast()\nfunction is used to wake up another thread that is waiting in a\ncond_wait(). To ensure that the signal isn't sent before the other thread\nhas a chance to enter the wait, it is usual for the signaling thread to\nfirst wait for a lock on variable. This lock attempt will only succeed\nafter the other thread has entered cond_wait() and thus relinquished the\nlock.
E343=cond_signal\\(\\) called on unlocked variable	(W threads) Within a thread-enabled program, you tried to call\ncond_signal() on a variable which wasn't locked. The cond_signal()\nfunction is used to wake up another thread that is waiting in a\ncond_wait(). To ensure that the signal isn't sent before the other thread\nhas a chance to enter the wait, it is usual for the signaling thread to\nfirst wait for a lock on variable. This lock attempt will only succeed\nafter the other thread has entered cond_wait() and thus relinquished the\nlock.
E345=connect\\(\\) on closed socket .*?	(W closed) You tried to do a connect on a closed socket. Did you forget\nto check the return value of your socket() call? See\nL<perlfunc/connect>.
E347=Constant\\(.*?\\).*?: .*?	(F) The parser found inconsistencies either while attempting to define\nan overloaded constant, or when trying to find the character name\nspecified in the C<\\N{...}> escape. Perhaps you forgot to load the\ncorresponding C<overload> or C<charnames> pragma? See L<charnames> and\nL<overload>.
E349=Constant is not .*? reference	(F) A constant value (perhaps declared using the C<use constant> pragma)\nis being dereferenced, but it amounts to the wrong type of reference.\nThe message indicates the type of reference that was expected. This\nusually indicates a syntax error in dereferencing the constant value.\nSee L<perlsub/"Constant Functions"> and L<constant>.
E351=Constant subroutine .*? redefined	(S) You redefined a subroutine which had previously been\neligible for inlining. See L<perlsub/"Constant Functions"> for\ncommentary and workarounds.
E353=Constant subroutine .*? undefined	(W misc) You undefined a subroutine which had previously been eligible\nfor inlining. See L<perlsub/"Constant Functions"> for commentary and\nworkarounds.
E355=Copy method did not return a reference	(F) The method which overloads "=" is buggy. See\nL<overload/Copy Constructor>.
E357=CORE::.*? is not a keyword	(F) The CORE:: namespace is reserved for Perl keywords.
E359=corrupted regexp pointers	(P) The regular expression engine got confused by what the regular\nexpression compiler gave it.
E361=corrupted regexp program	(P) The regular expression engine got passed a regexp program without a\nvalid magic number.
E363=Corrupt malloc ptr 0x.*? at 0x.*?	(P) The malloc package that comes with Perl had an internal failure.
E365=Count after length/code in unpack	(F) You had an unpack template indicating a counted-length string, but\nyou have also specified an explicit size for the string. See\nL<perlfunc/pack>.
E367=Deep recursion on subroutine ".*?"	(W recursion) This subroutine has called itself (directly or indirectly)\n100 times more than it has returned. This probably indicates an\ninfinite recursion, unless you're writing strange benchmark programs, in\nwhich case it indicates something else.
E369=defined\\(@array\\) is deprecated	(D deprecated) defined() is not usually useful on arrays because it\nchecks for an undefined I<scalar> value. If you want to see if the\narray is empty, just use C<if (@array) { # not empty }> for example.
E371=defined\\(%hash\\) is deprecated	(D deprecated) defined() is not usually useful on hashes because it\nchecks for an undefined I<scalar> value. If you want to see if the hash\nis empty, just use C<if (%hash) { # not empty }> for example.
E373=.*? defines neither package nor VERSION--version check failed	(F) You said something like "use Module 42" but in the Module file\nthere are neither package declarations nor a C<$VERSION>.
E375=Delimiter for here document is too long	(F) In a here document construct like C<<<FOO>, the label C<FOO> is too\nlong for Perl to handle. You have to be seriously twisted to write code\nthat triggers this error.
E377=DESTROY created new reference to dead object '.*?'	(F) A DESTROY() method created a new reference to the object which is\njust being DESTROYed. Perl is confused, and prefers to abort rather than\nto create a dangling reference.
E379=Did not produce a valid header	See Server error.
E381=.*? did not return a true value	(F) A required (or used) file must return a true value to indicate that\nit compiled correctly and ran its initialization code correctly. It's\ntraditional to end such a file with a "1;", though any true value would\ndo. See L<perlfunc/require>.
E383=\\(Did you mean &.*? instead\\?\\)	(W) You probably referred to an imported subroutine &FOO as $FOO or some\nsuch.
E385=\\(Did you mean "local" instead of "our"\\?\\)	(W misc) Remember that "our" does not localize the declared global\nvariable. You have declared it again in the same lexical scope, which\nseems superfluous.
E387=\\(Did you mean \\$ or @ instead of %\\?\\)	(W) You probably said %hash{$key} when you meant $hash{$key} or\n@hash{@keys}. On the other hand, maybe you just meant %hash and got\ncarried away.
E389=Died	(F) You passed die() an empty string (the equivalent of C<die "">) or\nyou called it with no args and both C<$@> and C<$_> were empty.
E391=Document contains no data	See Server error.
E393=.*? does not define .*?::VERSION--version check failed	(F) You said something like "use Module 42" but the Module did not\ndefine a C<$VERSION.>
E395='/' does not take a repeat count	(F) You cannot put a repeat count of any kind right after the '/' code.\nSee L<perlfunc/pack>.
E397=Don't know how to handle magic of type '.*?'	(P) The internal handling of magical variables has been cursed.
E399=do_study: out of memory	(P) This should have been caught by safemalloc() instead.
E401=\\(Do you need to predeclare .*?\\?\\)	(S syntax) This is an educated guess made in conjunction with the message\n"%s found where operator expected". It often means a subroutine or module\nname is being referenced that hasn't been declared yet. This may be\nbecause of ordering problems in your file, or because of a missing\n"sub", "package", "require", or "use" statement. If you're referencing\nsomething that isn't defined yet, you don't actually have to define the\nsubroutine or package before the current location. You can use an empty\n"sub foo;" or "package FOO;" to enter a "forward" declaration.
E403=dump\\(\\) better written as CORE::dump\\(\\)	(W misc) You used the obsolescent C<dump()> built-in function, without fully\nqualifying it as C<CORE::dump()>. Maybe it's a typo. See L<perlfunc/dump>.
E405=Duplicate free\\(\\) ignored	(S malloc) An internal routine called free() on something that had\nalready been freed.
E407=Duplicate modifier '.*?' after '.*?' in .*?	(W) You have applied the same modifier more than once after a type\nin a pack template. See L<perlfunc/pack>.
E409=elseif should be elsif	(S syntax) There is no keyword "elseif" in Perl because Larry thinks it's\nugly. Your code will be interpreted as an attempt to call a method named\n"elseif" for the class returned by the following block. This is\nunlikely to be what you want.
E411=Empty .*?	(F) C<\\p> and C<\\P> are used to introduce a named Unicode property, as\ndescribed in L<perlunicode> and L<perlre>. You used C<\\p> or C<\\P> in\na regular expression without specifying the property name.
E413=entering effective .*? failed	(F) While under the C<use filetest> pragma, switching the real and\neffective uids or gids failed.
E415=%ENV is aliased to .*?	(F) You're running under taint mode, and the C<%ENV> variable has been\naliased to another hash, so it doesn't reflect anymore the state of the\nprogram's environment. This is potentially insecure.
E417=Error converting file specification .*?	(F) An error peculiar to VMS. Because Perl may have to deal with file\nspecifications in either VMS or Unix syntax, it converts them to a\nsingle form when it must operate on them directly. Either you've passed\nan invalid file specification to Perl, or you've found a case the\nconversion routines don't handle. Drat.
E419=.*?: Eval-group in insecure regular expression	(F) Perl detected tainted data when trying to compile a regular\nexpression that contains the C<(?{ ... })> zero-width assertion, which\nis unsafe. See L<perlre/(?{ code })>, and L<perlsec>.
E421=.*?: Eval-group not allowed at run time	(F) Perl tried to compile a regular expression containing the\nC<(?{ ... })> zero-width assertion at run time, as it would when the\npattern contains interpolated values. Since that is a security risk, it\nis not allowed. If you insist, you may still do this by explicitly\nbuilding the pattern from an interpolated string at run time and using\nthat in an eval(). See L<perlre/(?{ code })>.
E423=.*?: Eval-group not allowed, use re 'eval'	(F) A regular expression contained the C<(?{ ... })> zero-width\nassertion, but that construct is only allowed when the C<use re 'eval'>\npragma is in effect. See L<perlre/(?{ code })>.
E425=Excessively long <> operator	(F) The contents of a <> operator may not exceed the maximum size of a\nPerl identifier. If you're just trying to glob a long list of\nfilenames, try using the glob() operator, or put the filenames into a\nvariable and glob that.
E427=exec\\? I'm not \\*that\\* kind of operating system	(F) The C<exec> function is not implemented in MacPerl. See L<perlport>.
E429=Execution of .*? aborted due to compilation errors	(F) The final summary message when a Perl compilation fails.
E431=Exiting eval via .*?	(W exiting) You are exiting an eval by unconventional means, such as a\ngoto, or a loop control statement.
E433=Exiting format via .*?	(W exiting) You are exiting a format by unconventional means, such as a\ngoto, or a loop control statement.
E435=Exiting pseudo-block via .*?	(W exiting) You are exiting a rather special block construct (like a\nsort block or subroutine) by unconventional means, such as a goto, or a\nloop control statement. See L<perlfunc/sort>.
E437=Exiting subroutine via .*?	(W exiting) You are exiting a subroutine by unconventional means, such\nas a goto, or a loop control statement.
E439=Exiting substitution via .*?	(W exiting) You are exiting a substitution by unconventional means, such\nas a return, a goto, or a loop control statement.
E441=Explicit blessing to '' \\(assuming package main\\)	(W misc) You are blessing a reference to a zero length string. This has\nthe effect of blessing the reference into the package main. This is\nusually not what you want. Consider providing a default target package,\ne.g. bless($ref, $p || 'MyPackage');
E443=.*?: Expression syntax	(A) You've accidentally run your script through B<csh> instead of Perl.\nCheck the #! line, or manually feed your script into Perl yourself.
E445=.*? failed--call queue aborted	(F) An untrapped exception was raised while executing a CHECK, INIT, or\nEND subroutine. Processing of the remainder of the queue of such\nroutines has been prematurely ended.
E447=False \\[\\] range ".*?" in regex; marked by <-- HERE in m/.*?/	(W regexp) A character class range must start and end at a literal\ncharacter, not another character class like C<\\d> or C<[:alpha:]>. The "-"\nin your false range is interpreted as a literal "-". Consider quoting the\n"-", "\\-". The <-- HERE shows in the regular expression about where the\nproblem was discovered. See L<perlre>.
E449=Fatal VMS error at .*?, line .*?	(P) An error peculiar to VMS. Something untoward happened in a VMS\nsystem service or RTL routine; Perl's exit status should provide more\ndetails. The filename in "at %s" and the line number in "line %d" tell\nyou which section of the Perl source code is distressed.
E451=fcntl is not implemented	(F) Your machine apparently doesn't implement fcntl(). What is this, a\nPDP-11 or something?
E453=Filehandle .*? opened only for input	(W io) You tried to write on a read-only filehandle. If you intended\nit to be a read-write filehandle, you needed to open it with "+<" or\n"+>" or "+>>" instead of with "<" or nothing. If you intended only to\nwrite the file, use ">" or ">>". See L<perlfunc/open>.
E455=Filehandle .*? opened only for output	(W io) You tried to read from a filehandle opened only for writing, If\nyou intended it to be a read/write filehandle, you needed to open it\nwith "+<" or "+>" or "+>>" instead of with "<" or nothing. If you\nintended only to read from the file, use "<". See L<perlfunc/open>.\nAnother possibility is that you attempted to open filedescriptor 0\n(also known as STDIN) for output (maybe you closed STDIN earlier?).
E457=Filehandle .*? reopened as .*? only for input	(W io) You opened for reading a filehandle that got the same filehandle id\nas STDOUT or STDERR. This occurred because you closed STDOUT or STDERR\npreviously.
E459=Filehandle STDIN reopened as .*? only for output	(W io) You opened for writing a filehandle that got the same filehandle id\nas STDIN. This occurred because you closed STDIN previously.
E461=Final \\$ should be .\\$ or \\$name	(F) You must now decide whether the final $ in a string was meant to be\na literal dollar sign, or was meant to introduce a variable name that\nhappens to be missing. So you have to put either the backslash or the\nname.
E463=flock\\(\\) on closed filehandle .*?	(W closed) The filehandle you're attempting to flock() got itself closed\nsome time before now. Check your control flow. flock() operates on\nfilehandles. Are you attempting to call flock() on a dirhandle by the\nsame name?
E465=Format not terminated	(F) A format must be terminated by a line with a solitary dot. Perl got\nto the end of your file without finding such a line.
E467=Format .*? redefined	(W redefine) You redefined a format. To suppress this warning, say
E469=Found = in conditional, should be ==	(W syntax) You said
E471=.*? found where operator expected	(S syntax) The Perl lexer knows whether to expect a term or an operator.\nIf it sees what it knows to be a term when it was expecting to see an\noperator, it gives you this warning. Usually it indicates that an\noperator or delimiter was omitted, such as a semicolon.
E473=gdbm store returned .*?, errno .*?, key ".*?"	(S) A warning from the GDBM_File extension that a store failed.
E475=gethostent not implemented	(F) Your C library apparently doesn't implement gethostent(), probably\nbecause if it did, it'd feel morally obligated to return every hostname\non the Internet.
E477=get.*?name\\(\\) on closed socket .*?	(W closed) You tried to get a socket or peer socket name on a closed\nsocket. Did you forget to check the return value of your socket() call?
E479=getpwnam returned invalid UIC %#o for user ".*?"	(S) A warning peculiar to VMS. The call to C<sys$getuai> underlying the\nC<getpwnam> operator returned an invalid UIC.
E481=getsockopt\\(\\) on closed socket .*?	(W closed) You tried to get a socket option on a closed socket. Did you\nforget to check the return value of your socket() call? See\nL<perlfunc/getsockopt>.
E483=Global symbol ".*?" requires explicit package name	(F) You've said "use strict vars", which indicates that all variables\nmust either be lexically scoped (using "my"), declared beforehand using\n"our", or explicitly qualified to say which package the global variable\nis in (using "::").
E485=glob failed \\(.*?\\)	(W glob) Something went wrong with the external program(s) used for\nC<glob> and C<<*.c>>. Usually, this means that you supplied a\nC<glob> pattern that caused the external program to fail and exit with a\nnonzero status. If the message indicates that the abnormal exit\nresulted in a coredump, this may also mean that your csh (C shell) is\nbroken. If so, you should change all of the csh-related variables in\nconfig.sh: If you have tcsh, make the variables refer to it as if it\nwere csh (e.g. C<full_csh='/usr/bin/tcsh'>); otherwise, make them all\nempty (except that C<d_csh> should be C<'undef'>) so that Perl will\nthink csh is missing. In either case, after editing config.sh, run\nC<./Configure -S> and rebuild Perl.
E487=Glob not terminated	(F) The lexer saw a left angle bracket in a place where it was expecting\na term, so it's looking for the corresponding right angle bracket, and\nnot finding it. Chances are you left some needed parentheses out\nearlier in the line, and you really meant a "less than".
E489=Got an error from DosAllocMem	(P) An error peculiar to OS/2. Most probably you're using an obsolete\nversion of Perl, and this should not happen anyway.
E491=goto must have label	(F) Unlike with "next" or "last", you're not allowed to goto an\nunspecified destination. See L<perlfunc/goto>.
E493=\\(\\)-group starts with a count	(F) A ()-group started with a count. A count is\nsupposed to follow something: a template character or a ()-group.\n See L<perlfunc/pack>.
E495=.*? had compilation errors	(F) The final summary message when a C<perl -c> fails.
E497=Had to create .*? unexpectedly	(S internal) A routine asked for a symbol from a symbol table that ought\nto have existed already, but for some reason it didn't, and had to be\ncreated on an emergency basis to prevent a core dump.
E499=Hash %.*? missing the % in argument .*? of .*?\\(\\)	(D deprecated) Really old Perl let you omit the % on hash names in some\nspots. This is now heavily deprecated.
E501=.*? has too many errors	(F) The parser has given up trying to parse the program after 10 errors.\nFurther error messages would likely be uninformative.
E503=Hexadecimal number > 0xffffffff non-portable	(W portable) The hexadecimal number you specified is larger than 2**32-1\n(4294967295) and therefore non-portable between systems. See\nL<perlport> for more on portability concerns.
E505=Identifier too long	(F) Perl limits identifiers (names for variables, functions, etc.) to\nabout 250 characters for simple names, and somewhat more for compound\nnames (like C<$A::B>). You've exceeded Perl's limits. Future versions\nof Perl are likely to eliminate these arbitrary limitations.
E507=Illegal binary digit .*?	(F) You used a digit other than 0 or 1 in a binary number.
E509=Illegal binary digit .*? ignored	(W digit) You may have tried to use a digit other than 0 or 1 in a\nbinary number. Interpretation of the binary number stopped before the\noffending digit.
E511=Illegal character .*? \\(carriage return\\)	(F) Perl normally treats carriage returns in the program text as it\nwould any other whitespace, which means you should never see this error\nwhen Perl was built using standard options. For some reason, your\nversion of Perl appears to have been built without this support. Talk\nto your Perl administrator.
E513=Illegal character in prototype for .*? : .*?	(W syntax) An illegal character was found in a prototype declaration. Legal\ncharacters in prototypes are $, @, %, *, ;, [, ], &, and \\.
E515=Illegal declaration of anonymous subroutine	(F) When using the C<sub> keyword to construct an anonymous subroutine,\nyou must always specify a block of code. See L<perlsub>.
E517=Illegal declaration of subroutine .*?	(F) A subroutine was not declared correctly. See L<perlsub>.
E519=Illegal division by zero	(F) You tried to divide a number by 0. Either something was wrong in\nyour logic, or you need to put a conditional in to guard against\nmeaningless input.
E521=Illegal hexadecimal digit .*? ignored	(W digit) You may have tried to use a character other than 0 - 9 or\nA - F, a - f in a hexadecimal number. Interpretation of the hexadecimal\nnumber stopped before the illegal character.
E523=Illegal modulus zero	(F) You tried to divide a number by 0 to get the remainder. Most\nnumbers don't take to this kindly.
E525=Illegal number of bits in vec	(F) The number of bits in vec() (the third argument) must be a power of\ntwo from 1 to 32 (or 64, if your platform supports that).
E527=Illegal octal digit .*?	(F) You used an 8 or 9 in an octal number.
E529=Illegal octal digit .*? ignored	(W digit) You may have tried to use an 8 or 9 in an octal number.\nInterpretation of the octal number stopped before the 8 or 9.
E531=Illegal switch in PERL5OPT: .*?	(X) The PERL5OPT environment variable may only be used to set the\nfollowing switches: B<-[DIMUdmtw]>.
E533=Ill-formed CRTL environ value ".*?"	(W internal) A warning peculiar to VMS. Perl tried to read the CRTL's\ninternal environ array, and encountered an element without the C<=>\ndelimiter used to separate keys from values. The element is ignored.
E535=Ill-formed message in prime_env_iter: \\|.*?\\|	(W internal) A warning peculiar to VMS. Perl tried to read a logical\nname or CLI symbol definition when preparing to iterate over %ENV, and\ndidn't see the expected delimiter between key and value, so the line was\nignored.
E537=\\(in cleanup\\) .*?	(W misc) This prefix usually indicates that a DESTROY() method raised\nthe indicated exception. Since destructors are usually called by the\nsystem at arbitrary points during execution, and often a vast number of\ntimes, the warning is issued only once for any number of failures that\nwould otherwise result in the same message being repeated.
E539=In EBCDIC the v-string components cannot exceed 2147483647	(F) An error peculiar to EBCDIC. Internally, v-strings are stored as\nUnicode code points, and encoded in EBCDIC as UTF-EBCDIC. The UTF-EBCDIC\nencoding is limited to code points no larger than 2147483647 (0x7FFFFFFF).
E541=Insecure dependency in .*?	(F) You tried to do something that the tainting mechanism didn't like.\nThe tainting mechanism is turned on when you're running setuid or\nsetgid, or when you specify B<-T> to turn it on explicitly. The\ntainting mechanism labels all data that's derived directly or indirectly\nfrom the user, who is considered to be unworthy of your trust. If any\nsuch data is used in a "dangerous" operation, you get this error. See\nL<perlsec> for more information.
E543=Insecure directory in .*?	(F) You can't use system(), exec(), or a piped open in a setuid or\nsetgid script if C<$ENV{PATH}> contains a directory that is writable by\nthe world. Also, the PATH must not contain any relative directory.\nSee L<perlsec>.
E545=Insecure \\$ENV\\{.*?\\} while running .*?	(F) You can't use system(), exec(), or a piped open in a setuid or\nsetgid script if any of C<$ENV{PATH}>, C<$ENV{IFS}>, C<$ENV{CDPATH}>,\nC<$ENV{ENV}>, C<$ENV{BASH_ENV}> or C<$ENV{TERM}> are derived from data\nsupplied (or potentially supplied) by the user. The script must set\nthe path to a known value, using trustworthy data. See L<perlsec>.
E547=Integer overflow in .*? number	(W overflow) The hexadecimal, octal or binary number you have specified\neither as a literal or as an argument to hex() or oct() is too big for\nyour architecture, and has been converted to a floating point number.\nOn a 32-bit architecture the largest hexadecimal, octal or binary number\nrepresentable without overflow is 0xFFFFFFFF, 037777777777, or\n0b11111111111111111111111111111111 respectively. Note that Perl\ntransparently promotes all numbers to a floating point representation\ninternally--subject to loss of precision errors in subsequent\noperations.
E549=Internal disaster in regex; marked by <-- HERE in m/.*?/	(P) Something went badly wrong in the regular expression parser.\nThe <-- HERE shows in the regular expression about where the problem was\ndiscovered.
E551=Internal inconsistency in tracking vforks	(S) A warning peculiar to VMS. Perl keeps track of the number of times\nyou've called C<fork> and C<exec>, to determine whether the current call\nto C<exec> should affect the current script or a subprocess (see\nL<perlvms/"exec LIST">). Somehow, this count has become scrambled, so\nPerl is making a guess and treating this C<exec> as a request to\nterminate the Perl script and execute the specified command.
E553=Internal urp in regex; marked by <-- HERE in m/.*?/	(P) Something went badly awry in the regular expression parser. The\n<-- HERE shows in the regular expression about where the problem was\ndiscovered.
E555=.*? \\(...\\) interpreted as function	(W syntax) You've run afoul of the rule that says that any list operator\nfollowed by parentheses turns into a function, with all the list\noperators arguments found inside the parentheses. See\nL<perlop/Terms and List Operators (Leftward)>.
E557=Invalid .*? attribute: .*?	The indicated attribute for a subroutine or variable was not recognized\nby Perl or by a user-supplied handler. See L<attributes>.
E559=Invalid .*? attributes: .*?	The indicated attributes for a subroutine or variable were not\nrecognized by Perl or by a user-supplied handler. See L<attributes>.
E561=Invalid conversion in .*?: ".*?"	(W printf) Perl does not understand the given format conversion. See\nL<perlfunc/sprintf>.
E563=Invalid escape in the specified encoding in regex; marked by <-- HERE in m/.*?/	(W regexp) The numeric escape (for example C<\\xHH>) of value < 256\ndidn't correspond to a single character through the conversion\nfrom the encoding specified by the encoding pragma.\nThe escape was replaced with REPLACEMENT CHARACTER (U+FFFD) instead.\nThe <-- HERE shows in the regular expression about where the\nescape was discovered.
E565=Invalid \\[\\] range ".*?" in regex; marked by <-- HERE in m/.*?/	(F) The range specified in a character class had a minimum character\ngreater than the maximum character. One possibility is that you forgot the\nC<{}> from your ending C<\\x{}> - C<\\x> without the curly braces can go only\nup to C<ff>. The <-- HERE shows in the regular expression about where the\nproblem was discovered. See L<perlre>.
E567=Invalid range ".*?" in transliteration operator	(F) The range specified in the tr/// or y/// operator had a minimum\ncharacter greater than the maximum character. See L<perlop>.
E569=Invalid separator character .*? in attribute list	(F) Something other than a colon or whitespace was seen between the\nelements of an attribute list. If the previous attribute had a\nparenthesised parameter list, perhaps that list was terminated too soon.\nSee L<attributes>.
E571=Invalid separator character .*? in PerlIO layer specification .*?	(W layer) When pushing layers onto the Perl I/O system, something other than a\ncolon or whitespace was seen between the elements of a layer list.\nIf the previous attribute had a parenthesised parameter list, perhaps that\nlist was terminated too soon.
E573=Invalid type '.*?' in .*?	(F) The given character is not a valid pack or unpack type.\nSee L<perlfunc/pack>.\n(W) The given character is not a valid pack or unpack type but used to be\nsilently ignored.
E575=ioctl is not implemented	(F) Your machine apparently doesn't implement ioctl(), which is pretty\nstrange for a machine that supports C.
E577=ioctl\\(\\) on unopened .*?	(W unopened) You tried ioctl() on a filehandle that was never opened.\nCheck you control flow and number of arguments.
E579=IO layers \\(like ".*?"\\) unavailable	(F) Your Perl has not been configured to have PerlIO, and therefore\nyou cannot use IO layers. To have PerlIO Perl must be configured\nwith 'useperlio'.
E581=IO::Socket::atmark not implemented on this architecture	(F) Your machine doesn't implement the sockatmark() functionality,\nneither as a system call or an ioctl call (SIOCATMARK).
E583=`.*?' is not a code reference	(W overload) The second (fourth, sixth, ...) argument of overload::constant\nneeds to be a code reference. Either an anonymous subroutine, or a reference\nto a subroutine.
E585=`.*?' is not an overloadable type	(W overload) You tried to overload a constant type the overload package is\nunaware of.
E587=junk on end of regexp	(P) The regular expression parser is confused.
E589=Label not found for "last .*?"	(F) You named a loop to break out of, but you're not currently in a loop\nof that name, not even if you count where you were called from. See\nL<perlfunc/last>.
E591=Label not found for "next .*?"	(F) You named a loop to continue, but you're not currently in a loop of\nthat name, not even if you count where you were called from. See\nL<perlfunc/last>.
E593=Label not found for "redo .*?"	(F) You named a loop to restart, but you're not currently in a loop of\nthat name, not even if you count where you were called from. See\nL<perlfunc/last>.
E595=leaving effective .*? failed	(F) While under the C<use filetest> pragma, switching the real and\neffective uids or gids failed.
E597=length/code after end of string in unpack	(F) While unpacking, the string buffer was already used up when an unpack\nlength/code combination tried to obtain more data. This results in\nan undefined value for the length. See L<perlfunc/pack>.
E599=listen\\(\\) on closed socket .*?	(W closed) You tried to do a listen on a closed socket. Did you forget\nto check the return value of your socket() call? See\nL<perlfunc/listen>.
E601=Lookbehind longer than .*? not implemented in regex; marked by <-- HERE in m/.*?/	(F) There is currently a limit on the length of string which lookbehind can\nhandle. This restriction may be eased in a future release. The <-- HERE\nshows in the regular expression about where the problem was discovered.
E603=lstat\\(\\) on filehandle .*?	(W io) You tried to do an lstat on a filehandle. What did you mean\nby that? lstat() makes sense only on filenames. (Perl did a fstat()\ninstead on the filehandle.)
E605=Lvalue subs returning .*? not implemented yet	(F) Due to limitations in the current implementation, array and hash\nvalues cannot be returned in subroutines used in lvalue context. See\nL<perlsub/"Lvalue subroutines">.
E607=Malformed integer in \\[\\] in  pack	(F) Between the brackets enclosing a numeric repeat count only digits\nare permitted. See L<perlfunc/pack>.
E609=Malformed integer in \\[\\] in unpack	(F) Between the brackets enclosing a numeric repeat count only digits\nare permitted. See L<perlfunc/pack>.
E611=Malformed PERLLIB_PREFIX	(F) An error peculiar to OS/2. PERLLIB_PREFIX should be of the form
E613=Malformed prototype for .*?: .*?	(F) You tried to use a function with a malformed prototype. The\nsyntax of function prototypes is given a brief compile-time check for\nobvious errors like invalid characters. A more rigorous check is run\nwhen the function is called.
E615=Malformed UTF-8 character \\(.*?\\)	(S utf8) (F) Perl detected something that didn't comply with UTF-8\nencoding rules.
E617=Malformed UTF-16 surrogate	Perl thought it was reading UTF-16 encoded character data but while\ndoing it Perl met a malformed Unicode surrogate.
E619=.*? matches null string many times in regex; marked by <-- HERE in m/.*?/	(W regexp) The pattern you've specified would be an infinite loop if the\nregular expression engine didn't specifically check for that. The <-- HERE\nshows in the regular expression about where the problem was discovered.\nSee L<perlre>.
E621=".*?" may clash with future reserved word	(W) This warning may be due to running a perl5 script through a perl4\ncompiler, especially if the word that is being warned about is\n"use" or "my".
E623=% may not be used in pack	(F) You can't pack a string by supplying a checksum, because the\nchecksumming process loses information, and you can't go the other way.\nSee L<perlfunc/unpack>.
E625=Method for operation .*? not found in package .*? during blessing	(F) An attempt was made to specify an entry in an overloading table that\ndoesn't resolve to a valid subroutine. See L<overload>.
E627=Method .*? not permitted	See Server error.
E629=Might be a runaway multi-line .*? string starting on line .*?	(S) An advisory indicating that the previous error may have been caused\nby a missing delimiter on a string or pattern, because it eventually\nended earlier on the current line.
E631=Misplaced _ in number	(W syntax) An underscore (underbar) in a numeric constant did not\nseparate two digits.
E633=Missing argument to -.*?	(F) The argument to the indicated command line switch must follow\nimmediately after the switch, without intervening spaces.
E635=Missing .*?brace.*? on .N\\{\\}	(F) Wrong syntax of character name literal C<\\N{charname}> within\ndouble-quotish context.
E637=Missing comma after first argument to .*? function	(F) While certain functions allow you to specify a filehandle or an\n"indirect object" before the argument list, this ain't one of them.
E639=Missing command in piped open	(W pipe) You used the C<open(FH, "| command")> or\nC<open(FH, "command |")> construction, but the command was missing or\nblank.
E641=Missing control char name in .c	(F) A double-quoted string ended with "\\c", without the required control\ncharacter name.
E643=Missing name in "my sub"	(F) The reserved syntax for lexically scoped subroutines requires that\nthey have a name with which they can be found.
E645=Missing \\$ on loop variable	(F) Apparently you've been programming in B<csh> too much. Variables\nare always mentioned with the $ in Perl, unlike in the shells, where it\ncan vary from one line to the next.
E647=\\(Missing operator before .*?\\?\\)	(S syntax) This is an educated guess made in conjunction with the message\n"%s found where operator expected". Often the missing operator is a comma.
E649=Missing right brace on .*?	(F) Missing right brace in C<\\p{...}> or C<\\P{...}>.
E651=Missing right curly or square bracket	(F) The lexer counted more opening curly or square brackets than closing\nones. As a general rule, you'll find it's missing near the place you\nwere last editing.
E653=\\(Missing semicolon on previous line\\?\\)	(S syntax) This is an educated guess made in conjunction with the message\n"%s found where operator expected". Don't automatically put a semicolon on\nthe previous line just because you saw this message.
E655=Modification of a read-only value attempted	(F) You tried, directly or indirectly, to change the value of a\nconstant. You didn't, of course, try "2 = 1", because the compiler\ncatches that. But an easy way to do the same thing is:
E657=Modification of non-creatable array value attempted, .*?	(F) You tried to make an array value spring into existence, and the\nsubscript was probably negative, even counting from end of the array\nbackwards.
E659=Modification of non-creatable hash value attempted, .*?	(P) You tried to make a hash value spring into existence, and it\ncouldn't be created for some peculiar reason.
E661=Module name must be constant	(F) Only a bare module name is allowed as the first argument to a "use".
E663=Module name required with -.*? option	(F) The C<-M> or C<-m> options say that Perl should load some module, but\nyou omitted the name of the module. Consult L<perlrun> for full details\nabout C<-M> and C<-m>.
E665=More than one argument to open	(F) The C<open> function has been asked to open multiple files. This\ncan happen if you are trying to open a pipe to a command that takes a\nlist of arguments, but have forgotten to specify a piped open mode.\nSee L<perlfunc/open> for details.
E667=msg.*? not implemented	(F) You don't have System V message IPC on your system.
E669=Multidimensional syntax .*? not supported	(W syntax) Multidimensional arrays aren't written like C<$foo[1,2,3]>.\nThey're written like C<$foo[1][2][3]>, as in C.
E671='/' must be followed by 'a\\*', 'A\\*' or 'Z\\*'	(F) You had a pack template indicating a counted-length string,\nCurrently the only things that can have their length counted are a*, A*\nor Z*. See L<perlfunc/pack>.
E673='/' must follow a numeric type in unpack	(F) You had an unpack template that contained a '/', but this did not\nfollow some unpack specification producing a numeric value.\nSee L<perlfunc/pack>.
E675="my sub" not yet implemented	(F) Lexically scoped subroutines are not yet implemented. Don't try\nthat yet.
E677="my" variable .*? can't be in a package	(F) Lexically scoped variables aren't in a package, so it doesn't make\nsense to try to declare one with a package qualifier on the front. Use\nlocal() if you want to localize a package variable.
E679=Name ".*?::.*?" used only once: possible typo	(W once) Typographical errors often show up as unique variable names.\nIf you had a good reason for having a unique name, then just mention it\nagain somehow to suppress the message. The C<our> declaration is\nprovided for this purpose.
E681=Negative '/' count in unpack	(F) The length count obtained from a length/code unpack operation was\nnegative. See L<perlfunc/pack>.
E683=Negative length	(F) You tried to do a read/write/send/recv operation with a buffer\nlength that is less than 0. This is difficult to imagine.
E685=Negative offset to vec in lvalue context	(F) When C<vec> is called in an lvalue context, the second argument must be\ngreater than or equal to zero.
E687=Nested quantifiers in regex; marked by <-- HERE in m/.*?/	(F) You can't quantify a quantifier without intervening parentheses. So\nthings like ** or +* or ?* are illegal. The <-- HERE shows in the regular\nexpression about where the problem was discovered.
E689=.*? never introduced	(S internal) The symbol in question was declared but somehow went out of\nscope before it could possibly have been used.
E691=Newline in left-justified string for .*?	(W printf) There is a newline in a string to be left justified by \nC<printf> or C<sprintf>.
E693=No .*? allowed while running setuid	(F) Certain operations are deemed to be too insecure for a setuid or\nsetgid script to even be allowed to attempt. Generally speaking there\nwill be another way to do what you want that is, if not secure, at least\nsecurable. See L<perlsec>.
E695=No comma allowed after .*?	(F) A list operator that has a filehandle or "indirect object" is not\nallowed to have a comma between that and the following arguments.\nOtherwise it'd be just another one of the arguments.
E697=No command into which to pipe on command line	(F) An error peculiar to VMS. Perl handles its own command line\nredirection, and found a '|' at the end of the command line, so it\ndoesn't know where you want to pipe the output from this command.
E699=No DB::DB routine defined	(F) The currently executing code was compiled with the B<-d> switch, but\nfor some reason the current debugger (e.g. F<perl5db.pl> or a C<Devel::>\nmodule) didn't define a routine to be called at the beginning of each\nstatement.
E701=No dbm on this machine	(P) This is counted as an internal error, because every machine should\nsupply dbm nowadays, because Perl comes with SDBM. See L<SDBM_File>.
E703=No DB::sub routine defined	(F) The currently executing code was compiled with the B<-d> switch, but\nfor some reason the current debugger (e.g. F<perl5db.pl> or a C<Devel::>\nmodule) didn't define a C<DB::sub> routine to be called at the beginning\nof each ordinary subroutine call.
E705=No B<-e> allowed in setuid scripts	(F) A setuid script can't be specified by the user.
E707=No error file after 2> or 2>> on command line	(F) An error peculiar to VMS. Perl handles its own command line\nredirection, and found a '2>' or a '2>>' on the command line, but can't\nfind the name of the file to which to write data destined for stderr.
E709=No group ending character '.*?' found in template	(F) A pack or unpack template has an opening '(' or '[' without its\nmatching counterpart. See L<perlfunc/pack>.
E711=No input file after < on command line	(F) An error peculiar to VMS. Perl handles its own command line\nredirection, and found a '<' on the command line, but can't find the\nname of the file from which to read data for stdin.
E713=No #! line	(F) The setuid emulator requires that scripts have a well-formed #! line\neven on machines that don't support the #! construct.
E715="no" not allowed in expression	(F) The "no" keyword is recognized and executed at compile time, and\nreturns no useful value. See L<perlmod>.
E717=No output file after > on command line	(F) An error peculiar to VMS. Perl handles its own command line\nredirection, and found a lone '>' at the end of the command line, so it\ndoesn't know where you wanted to redirect stdout.
E719=No output file after > or>> on command line	(F) An error peculiar to VMS. Perl handles its own command line\nredirection, and found a '>' or a '>>' on the command line, but can't\nfind the name of the file to which to write data destined for stdout.
E721=No package name allowed for variable .*? in "our"	(F) Fully qualified variable names are not allowed in "our"\ndeclarations, because that doesn't make much sense under existing\nsemantics. Such syntax is reserved for future extensions.
E723=No Perl script found in input	(F) You called C<perl -x>, but no line was found in the file beginning\nwith #! and containing the word "perl".
E725=No setregid available	(F) Configure didn't find anything resembling the setregid() call for\nyour system.
E727=No setreuid available	(F) Configure didn't find anything resembling the setreuid() call for\nyour system.
E729=No .*? specified for -.*?	(F) The indicated command line switch needs a mandatory argument, but\nyou haven't specified one.
E731=No such class .*?	(F) You provided a class qualifier in a "my" or "our" declaration, but\nthis class doesn't exist at this point in your program.
E733=No such pipe open	(P) An error peculiar to VMS. The internal routine my_pclose() tried to\nclose a pipe which hadn't been opened. This should have been caught\nearlier as an attempt to close an unopened filehandle.
E735=No such pseudo-hash field ".*?"	(F) You tried to access an array as a hash, but the field name used is\nnot defined. The hash at index 0 should map all valid field names to\narray indices for that to work.
E737=No such pseudo-hash field ".*?" in variable .*? of type .*?	(F) You tried to access a field of a typed variable where the type does\nnot know about the field name. The field names are looked up in the\n%FIELDS hash in the type package at compile time. The %FIELDS hash is\n%usually set up with the 'fields' pragma.
E739=No such signal: SIG.*?	(W signal) You specified a signal name as a subscript to %SIG that was\nnot recognized. Say C<kill -l> in your shell to see the valid signal\nnames on your system.
E741=Not a CODE reference	(F) Perl was trying to evaluate a reference to a code value (that is, a\nsubroutine), but found a reference to something else instead. You can\nuse the ref() function to find out what kind of ref it really was. See\nalso L<perlref>.
E743=Not a format reference	(F) I'm not sure how you managed to generate a reference to an anonymous\nformat, but this indicates you did, and that it didn't exist.
E745=Not a GLOB reference	(F) Perl was trying to evaluate a reference to a "typeglob" (that is, a\nsymbol table entry that looks like C<*foo>), but found a reference to\nsomething else instead. You can use the ref() function to find out what\nkind of ref it really was. See L<perlref>.
E747=Not a HASH reference	(F) Perl was trying to evaluate a reference to a hash value, but found a\nreference to something else instead. You can use the ref() function to\nfind out what kind of ref it really was. See L<perlref>.
E749=Not an ARRAY reference	(F) Perl was trying to evaluate a reference to an array value, but found\na reference to something else instead. You can use the ref() function\nto find out what kind of ref it really was. See L<perlref>.
E751=Not a perl script	(F) The setuid emulator requires that scripts have a well-formed #! line\neven on machines that don't support the #! construct. The line must\nmention perl.
E753=Not a SCALAR reference	(F) Perl was trying to evaluate a reference to a scalar value, but found\na reference to something else instead. You can use the ref() function\nto find out what kind of ref it really was. See L<perlref>.
E755=Not a subroutine reference	(F) Perl was trying to evaluate a reference to a code value (that is, a\nsubroutine), but found a reference to something else instead. You can\nuse the ref() function to find out what kind of ref it really was. See\nalso L<perlref>.
E757=Not a subroutine reference in overload table	(F) An attempt was made to specify an entry in an overloading table that\ndoesn't somehow point to a valid subroutine. See L<overload>.
E759=Not enough arguments for .*?	(F) The function requires more arguments than you specified.
E761=Not enough format arguments	(W syntax) A format specified more picture fields than the next line\nsupplied. See L<perlform>.
E763=.*?: not found	(A) You've accidentally run your script through the Bourne shell instead\nof Perl. Check the #! line, or manually feed your script into Perl\nyourself.
E765=no UTC offset information; assuming local time is UTC	(S) A warning peculiar to VMS. Perl was unable to find the local\ntimezone offset, so it's assuming that local system time is equivalent\nto UTC. If it's not, define the logical name\nF<SYS$TIMEZONE_DIFFERENTIAL> to translate to the number of seconds which\nneed to be added to UTC to get local time.
E767=Non-string passed as bitmask	(W misc) A number has been passed as a bitmask argument to select().\nUse the vec() function to construct the file descriptor bitmasks for\nselect. See L<perlfunc/select>
E769=Null filename used	(F) You can't require the null filename, especially because on many\nmachines that means the current directory! See L<perlfunc/require>.
E771=NULL OP IN RUN	(P debugging) Some internal routine called run() with a null opcode\npointer.
E773=Null picture in formline	(F) The first argument to formline must be a valid format picture\nspecification. It was found to be empty, which probably means you\nsupplied it an uninitialized value. See L<perlform>.
E775=Null realloc	(P) An attempt was made to realloc NULL.
E777=NULL regexp argument	(P) The internal pattern matching routines blew it big time.
E779=NULL regexp parameter	(P) The internal pattern matching routines are out of their gourd.
E781=Number too long	(F) Perl limits the representation of decimal numbers in programs to\nabout 250 characters. You've exceeded that length. Future\nversions of Perl are likely to eliminate this arbitrary limitation. In\nthe meantime, try using scientific notation (e.g. "1e6" instead of\n"1_000_000").
E783=Octal number in vector unsupported	(F) Numbers with a leading C<0> are not currently allowed in vectors.\nThe octal number interpretation of such numbers may be supported in a\nfuture version.
E785=Octal number > 037777777777 non-portable	(W portable) The octal number you specified is larger than 2**32-1\n(4294967295) and therefore non-portable between systems. See\nL<perlport> for more on portability concerns.
E787=Odd number of arguments for overload::constant	(W overload) The call to overload::constant contained an odd number of\narguments. The arguments should come in pairs.
E789=Odd number of elements in anonymous hash	(W misc) You specified an odd number of elements to initialize a hash,\nwhich is odd, because hashes come in key/value pairs.
E791=Odd number of elements in hash assignment	(W misc) You specified an odd number of elements to initialize a hash,\nwhich is odd, because hashes come in key/value pairs.
E793=Offset outside string	(F) You tried to do a read/write/send/recv operation with an offset\npointing outside the buffer. This is difficult to imagine. The sole\nexception to this is that C<sysread()>ing past the buffer will extend\nthe buffer and zero pad the new area.
E795=.*?\\(\\) on unopened .*?	(W unopened) An I/O operation was attempted on a filehandle that was\nnever initialized. You need to do an open(), a sysopen(), or a socket()\ncall, or call a constructor from the FileHandle package.
E797=-.*? on unopened filehandle .*?	(W unopened) You tried to invoke a file test operator on a filehandle\nthat isn't open. Check your control flow. See also L<perlfunc/-X>.
E799=oops: oopsAV	(S internal) An internal warning that the grammar is screwed up.
E801=oops: oopsHV	(S internal) An internal warning that the grammar is screwed up.
E803=Operation ".*?": no method found, .*?	(F) An attempt was made to perform an overloaded operation for which no\nhandler was defined. While some handlers can be autogenerated in terms\nof other handlers, there is no default handler for any operation, unless\nC<fallback> overloading key is specified to be true. See L<overload>.
E805=Operator or semicolon missing before .*?	(S ambiguous) You used a variable or subroutine call where the parser\nwas expecting an operator. The parser has assumed you really meant to\nuse an operator, but this is highly likely to be incorrect. For\nexample, if you say "*foo *foo" it will be interpreted as if you said\n"*foo * 'foo'".
E807="our" variable .*? redeclared	(W misc) You seem to have already declared the same global once before\nin the current lexical scope.
E809=Out of memory!	(X) The malloc() function returned 0, indicating there was insufficient\nremaining memory (or virtual memory) to satisfy the request. Perl has\nno option but to exit immediately.
E811=Out of memory during .*? extend	(X) An attempt was made to extend an array, a list, or a string beyond\nthe largest possible memory allocation.
E813=Out of memory during "large" request for .*?	(F) The malloc() function returned 0, indicating there was insufficient\nremaining memory (or virtual memory) to satisfy the request. However,\nthe request was judged large enough (compile-time default is 64K), so a\npossibility to shut down by trapping this error is granted.
E815=Out of memory during request for .*?	(X|F) The malloc() function returned 0, indicating there was\ninsufficient remaining memory (or virtual memory) to satisfy the\nrequest.
E817=Out of memory during ridiculously large request	(F) You can't allocate more than 2^31+"small amount" bytes. This error\nis most likely to be caused by a typo in the Perl program. e.g.,\nC<$arr[time]> instead of C<$arr[$time]>.
E819=Out of memory for yacc stack	(F) The yacc parser wanted to grow its stack so it could continue\nparsing, but realloc() wouldn't give it more memory, virtual or\notherwise.
E821='@' outside of string in unpack	(F) You had a template that specified an absolute position outside\nthe string being unpacked. See L<perlfunc/pack>.
E823=.*? package attribute may clash with future reserved word: .*?	(W reserved) A lowercase attribute name was used that had a\npackage-specific handler. That name might have a meaning to Perl itself\nsome day, even though it doesn't yet. Perhaps you should use a\nmixed-case attribute name, instead. See L<attributes>.
E825=pack/unpack repeat count overflow	(F) You can't specify a repeat count so large that it overflows your\nsigned integers. See L<perlfunc/pack>.
E827=page overflow	(W io) A single call to write() produced more lines than can fit on a\npage. See L<perlform>.
E829=panic: .*?	(P) An internal error.
E831=panic: ck_grep	(P) Failed an internal consistency check trying to compile a grep.
E833=panic: ck_split	(P) Failed an internal consistency check trying to compile a split.
E835=panic: corrupt saved stack index	(P) The savestack was requested to restore more localized values than\nthere are in the savestack.
E837=panic: del_backref	(P) Failed an internal consistency check while trying to reset a weak\nreference.
E839=panic: Devel::DProf inconsistent subroutine return	(P) Devel::DProf called a subroutine that exited using goto(LABEL),\nlast(LABEL) or next(LABEL). Leaving that way a subroutine called from\nan XSUB will lead very probably to a crash of the compiler. This is\na bug that will hopefully one day get fixed.
E841=panic: die .*?	(P) We popped the context stack to an eval context, and then discovered\nit wasn't an eval context.
E843=panic: do_subst	(P) The internal pp_subst() routine was called with invalid operational\ndata.
E845=panic: do_trans_.*?	(P) The internal do_trans routines were called with invalid operational\ndata.
E847=panic: frexp	(P) The library function frexp() failed, making printf("%f") impossible.
E849=panic: goto	(P) We popped the context stack to a context with the specified label,\nand then discovered it wasn't a context we know how to do a goto in.
E851=panic: INTERPCASEMOD	(P) The lexer got into a bad state at a case modifier.
E853=panic: INTERPCONCAT	(P) The lexer got into a bad state parsing a string with brackets.
E855=panic: kid popen errno read	(F) forked child returned an incomprehensible message about its errno.
E857=panic: last	(P) We popped the context stack to a block context, and then discovered\nit wasn't a block context.
E859=panic: leave_scope clearsv	(P) A writable lexical variable became read-only somehow within the\nscope.
E861=panic: leave_scope inconsistency	(P) The savestack probably got out of sync. At least, there was an\ninvalid enum on the top of it.
E863=panic: magic_killbackrefs	(P) Failed an internal consistency check while trying to reset all weak\nreferences to an object.
E865=panic: malloc	(P) Something requested a negative number of bytes of malloc.
E867=panic: mapstart	(P) The compiler is screwed up with respect to the map() function.
E869=panic: memory wrap	(P) Something tried to allocate more memory than possible.
E871=panic: null array	(P) One of the internal array routines was passed a null AV pointer.
E873=panic: pad_alloc	(P) The compiler got confused about which scratch pad it was allocating\nand freeing temporaries and lexicals from.
E875=panic: pad_free curpad	(P) The compiler got confused about which scratch pad it was allocating\nand freeing temporaries and lexicals from.
E877=panic: pad_free po	(P) An invalid scratch pad offset was detected internally.
E879=panic: pad_reset curpad	(P) The compiler got confused about which scratch pad it was allocating\nand freeing temporaries and lexicals from.
E881=panic: pad_sv po	(P) An invalid scratch pad offset was detected internally.
E883=panic: pad_swipe curpad	(P) The compiler got confused about which scratch pad it was allocating\nand freeing temporaries and lexicals from.
E885=panic: pad_swipe po	(P) An invalid scratch pad offset was detected internally.
E887=panic: pp_iter	(P) The foreach iterator got called in a non-loop context frame.
E889=panic: pp_match.*?	(P) The internal pp_match() routine was called with invalid operational\ndata.
E891=panic: pp_split	(P) Something terrible went wrong in setting up for the split.
E893=panic: realloc	(P) Something requested a negative number of bytes of realloc.
E895=panic: restartop	(P) Some internal routine requested a goto (or something like it), and\ndidn't supply the destination.
E897=panic: return	(P) We popped the context stack to a subroutine or eval context, and\nthen discovered it wasn't a subroutine or eval context.
E899=panic: scan_num	(P) scan_num() got called on something that wasn't a number.
E901=panic: sv_insert	(P) The sv_insert() routine was told to remove more string than there\nwas string.
E903=panic: top_env	(P) The compiler attempted to do a goto, or something weird like that.
E905=panic: utf16_to_utf8: odd bytelen	(P) Something tried to call utf16_to_utf8 with an odd (as opposed\nto even) byte length.
E907=panic: yylex	(P) The lexer got into a bad state while processing a case modifier.
E909=Parentheses missing around ".*?" list	(W parenthesis) You said something like
E911=C<-p> destination: .*?	(F) An error occurred during the implicit output invoked by the C<-p>\ncommand-line switch. (This output goes to STDOUT unless you've\nredirected it with select().)
E913=\\(perhaps you forgot to load ".*?"\\?\\)	(F) This is an educated guess made in conjunction with the message\n"Can't locate object method \\"%s\\" via package \\"%s\\"". It often means\nthat a method requires a package that has not been loaded.
E915=Perl .*? required--this is only version .*?, stopped	(F) The module in question uses features of a version of Perl more\nrecent than the currently running version. How long has it been since\nyou upgraded, anyway? See L<perlfunc/require>.
E917=PERL_SH_DIR too long	(F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find the\nC<sh>-shell in. See "PERL_SH_DIR" in L<perlos2>.
E919=PERL_SIGNALS illegal: ".*?"	See L<perlrun/PERL_SIGNALS> for legal values.
E921=perl: warning: Setting locale failed.	(S) The whole warning message will look something like:
E923=Permission denied	(F) The setuid emulator in suidperl decided you were up to no good.
E925=pid %x not a child	(W exec) A warning peculiar to VMS. Waitpid() was asked to wait for a\nprocess which isn't a subprocess of the current process. While this is\nfine from VMS' perspective, it's probably not what you intended.
E927='P' must have an explicit size in unpack	(F) The unpack format P must have an explicit size, not "*".
E929=B<-P> not allowed for setuid/setgid script	(F) The script would have to be opened by the C preprocessor by name,\nwhich provides a race condition that breaks security.
E931=POSIX class \\[:.*?:\\] unknown in regex; marked by <-- HERE in m/.*?/	(F) The class in the character class [: :] syntax is unknown. The <-- HERE\nshows in the regular expression about where the problem was discovered.\nNote that the POSIX character classes do B<not> have the C<is> prefix\nthe corresponding C interfaces have: in other words, it's C<[[:print:]]>,\nnot C<isprint>. See L<perlre>.
E933=POSIX getpgrp can't take an argument	(F) Your system has POSIX getpgrp(), which takes no argument, unlike\nthe BSD version, which takes a pid.
E935=POSIX syntax \\[.*?\\] belongs inside character classes in regex; marked by <-- HERE in m/.*?/	(W regexp) The character class constructs [: :], [= =], and [. .] go\nI<inside> character classes, the [] are part of the construct, for example:\n/[012[:alpha:]345]/. Note that [= =] and [. .] are not currently\nimplemented; they are simply placeholders for future extensions and will\ncause fatal errors. The <-- HERE shows in the regular expression about\nwhere the problem was discovered. See L<perlre>.
E937=POSIX syntax \\[. .\\] is reserved for future extensions in regex; marked by <-- HERE in m/.*?/	(F regexp) Within regular expression character classes ([]) the syntax\nbeginning with "[." and ending with ".]" is reserved for future extensions.\nIf you need to represent those character sequences inside a regular\nexpression character class, just quote the square brackets with the\nbackslash: "\\[." and ".\\]". The <-- HERE shows in the regular expression\nabout where the problem was discovered. See L<perlre>.
E939=POSIX syntax \\[= =\\] is reserved for future extensions in regex; marked by <-- HERE in m/.*?/	(F) Within regular expression character classes ([]) the syntax beginning\nwith "[=" and ending with "=]" is reserved for future extensions. If you\nneed to represent those character sequences inside a regular expression\ncharacter class, just quote the square brackets with the backslash: "\\[="\nand "=\\]". The <-- HERE shows in the regular expression about where the\nproblem was discovered. See L<perlre>.
E941=Possible attempt to put comments in qw\\(\\) list	(W qw) qw() lists contain items separated by whitespace; as with literal\nstrings, comment characters are not ignored, but are instead treated as\nliteral data. (You may have used different delimiters than the\nparentheses shown here; braces are also frequently used.)
E943=Possible attempt to separate words with commas	(W qw) qw() lists contain items separated by whitespace; therefore\ncommas aren't needed to separate the items. (You may have used\ndifferent delimiters than the parentheses shown here; braces are also\nfrequently used.)
E945=Possible memory corruption: .*? overflowed 3rd argument	(F) An ioctl() or fcntl() returned more than Perl was bargaining for.\nPerl guesses a reasonable buffer size, but puts a sentinel byte at the\nend of the buffer just in case. This sentinel byte got clobbered, and\nPerl assumes that memory is now corrupted. See L<perlfunc/ioctl>.
E947=Possible precedence problem on bitwise .*? operator	(W precedence) Your program uses a bitwise logical operator in conjunction\nwith a numeric comparison operator, like this :
E949=Possible unintended interpolation of .*? in string	(W ambiguous) You said something like `@foo' in a double-quoted string\nbut there was no array C<@foo> in scope at the time. If you wanted a\nliteral @foo, then write it as \\@foo; otherwise find out what happened\nto the array you apparently lost track of.
E951=Possible Y2K bug: .*?	(W y2k) You are concatenating the number 19 with another number, which\ncould be a potential Year 2000 problem.
E953=pragma "attrs" is deprecated, use "sub NAME : ATTRS" instead	(D deprecated) You have written something like this:
E955=Precedence problem: open .*? should be open\\(.*?\\)	(S precedence) The old irregular construct
E957=Premature end of script headers	See Server error.
E959=printf\\(\\) on closed filehandle .*?	(W closed) The filehandle you're writing to got itself closed sometime\nbefore now. Check your control flow.
E961=print\\(\\) on closed filehandle .*?	(W closed) The filehandle you're printing on got itself closed sometime\nbefore now. Check your control flow.
E963=Process terminated by SIG.*?	(W) This is a standard message issued by OS/2 applications, while *nix\napplications die in silence. It is considered a feature of the OS/2\nport. One can easily disable this by appropriate sighandlers, see\nL<perlipc/"Signals">. See also "Process terminated by SIGTERM/SIGINT"\nin L<perlos2>.
E965=Prototype mismatch: .*? vs .*?	(S prototype) The subroutine being declared or defined had previously been\ndeclared or defined with a different function prototype.
E967=Prototype not terminated	(F) You've omitted the closing parenthesis in a function prototype\ndefinition.
E969=Pseudo-hashes are deprecated	(D deprecated) Pseudo-hashes were deprecated in Perl 5.8.0 and they\nwill be removed in Perl 5.10.0, see L<perl58delta> for more details.\nYou can continue to use the C<fields> pragma.
E971=Quantifier follows nothing in regex; marked by <-- HERE in m/.*?/	(F) You started a regular expression with a quantifier. Backslash it if you\nmeant it literally. The <-- HERE shows in the regular expression about\nwhere the problem was discovered. See L<perlre>.
E973=Quantifier in \\{,\\} bigger than .*? in regex; marked by <-- HERE in m/.*?/	(F) There is currently a limit to the size of the min and max values of the\n{min,max} construct. The <-- HERE shows in the regular expression about where\nthe problem was discovered. See L<perlre>.
E975=Quantifier unexpected on zero-length expression; marked by <-- HERE in m/.*?/	(W regexp) You applied a regular expression quantifier in a place where\nit makes no sense, such as on a zero-width assertion. Try putting the\nquantifier inside the assertion instead. For example, the way to match\n"abc" provided that it is followed by three repetitions of "xyz" is\nC</abc(?=(?:xyz){3})/>, not C</abc(?=xyz){3}/>.
E977=Range iterator outside integer range	(F) One (or both) of the numeric arguments to the range operator ".."\nare outside the range which can be represented by integers internally.\nOne possible workaround is to force Perl to use magical string increment\nby prepending "0" to your numbers.
E979=readline\\(\\) on closed filehandle .*?	(W closed) The filehandle you're reading from got itself closed sometime\nbefore now. Check your control flow.
E981=read\\(\\) on closed filehandle .*?	(W closed) You tried to read from a closed filehandle.
E983=read\\(\\) on unopened filehandle .*?	(W unopened) You tried to read from a filehandle that was never opened.
E985=Reallocation too large: .*?	(F) You can't allocate more than 64K on an MS-DOS machine.
E987=realloc\\(\\) of freed memory ignored	(S malloc) An internal routine called realloc() on something that had\nalready been freed.
E989=Recompile perl with B<-D>DEBUGGING to use B<-D> switch	(F debugging) You can't use the B<-D> option unless the code to produce\nthe desired output is compiled into Perl, which entails some overhead,\nwhich is why it's currently left out of your copy.
E991=Recursive inheritance detected in package '.*?'	(F) More than 100 levels of inheritance were used. Probably indicates\nan unintended loop in your inheritance hierarchy.
E993=Recursive inheritance detected while looking for method .*?	(F) More than 100 levels of inheritance were encountered while invoking\na method. Probably indicates an unintended loop in your inheritance\nhierarchy.
E995=Reference found where even-sized list expected	(W misc) You gave a single reference where Perl was expecting a list\nwith an even number of elements (for assignment to a hash). This usually\nmeans that you used the anon hash constructor when you meant to use\nparens. In any case, a hash requires key/value B<pairs>.
E997=Reference is already weak	(W misc) You have attempted to weaken a reference that is already weak.\nDoing so has no effect.
E999=Reference miscount in sv_replace\\(\\)	(W internal) The internal sv_replace() function was handed a new SV with\na reference count of other than 1.
E1001=Reference to nonexistent group in regex; marked by <-- HERE in m/.*?/	(F) You used something like C<\\7> in your regular expression, but there are\nnot at least seven sets of capturing parentheses in the expression. If you\nwanted to have the character with value 7 inserted into the regular expression,\nprepend a zero to make the number at least two digits: C<\\07>
E1003=regexp memory corruption	(P) The regular expression engine got confused by what the regular\nexpression compiler gave it.
E1005=Regexp out of space	(P) A "can't happen" error, because safemalloc() should have caught it\nearlier.
E1007=Repeated format line will never terminate \\(~~ and @# incompatible\\)	(F) Your format contains the ~~ repeat-until-blank sequence and a\nnumeric field that will never go blank so that the repetition never\nterminates. You might use ^# instead. See L<perlform>.
E1009=Reversed .*?= operator	(W syntax) You wrote your assignment operator backwards. The = must\nalways comes last, to avoid ambiguity with subsequent unary operators.
E1011=Runaway format	(F) Your format contained the ~~ repeat-until-blank sequence, but it\nproduced 200 lines at once, and the 200th line looked exactly like the\n199th line. Apparently you didn't arrange for the arguments to exhaust\nthemselves, either by using ^ instead of @ (for scalar variables), or by\nshifting or popping (for array variables). See L<perlform>.
E1013=Scalars leaked: .*?	(P) Something went wrong in Perl's internal bookkeeping of scalars:\nnot all scalar variables were deallocated by the time Perl exited.\nWhat this usually indicates is a memory leak, which is of course bad,\nespecially if the Perl program is intended to be long-running.
E1015=Scalar value @.*?\\[.*?\\] better written as \\$.*?\\[.*?\\]	(W syntax) You've used an array slice (indicated by @) to select a\nsingle element of an array. Generally it's better to ask for a scalar\nvalue (indicated by $). The difference is that C<$foo[&bar]> always\nbehaves like a scalar, both when assigning to it and when evaluating its\nargument, while C<@foo[&bar]> behaves like a list when you assign to it,\nand provides a list context to its subscript, which can do weird things\nif you're expecting only one subscript.
E1017=Scalar value @.*?\\{.*?\\} better written as \\$.*?\\{.*?\\}	(W syntax) You've used a hash slice (indicated by @) to select a single\nelement of a hash. Generally it's better to ask for a scalar value\n(indicated by $). The difference is that C<$foo{&bar}> always behaves\nlike a scalar, both when assigning to it and when evaluating its\nargument, while C<@foo{&bar}> behaves like a list when you assign to it,\nand provides a list context to its subscript, which can do weird things\nif you're expecting only one subscript.
E1019=Script is not setuid/setgid in suidperl	(F) Oddly, the suidperl program was invoked on a script without a setuid\nor setgid bit set. This doesn't make much sense.
E1021=Search pattern not terminated	(F) The lexer couldn't find the final delimiter of a // or m{}\nconstruct. Remember that bracketing delimiters count nesting level.\nMissing the leading C<$> from a variable C<$m> may cause this error.
E1023=Search pattern not terminated or ternary operator parsed as search pattern	(F) The lexer couldn't find the final delimiter of a C<?PATTERN?>\nconstruct.
E1025=.*?seek\\(\\) on unopened filehandle	(W unopened) You tried to use the seek() or sysseek() function on a\nfilehandle that was either never opened or has since been closed.
E1027=select not implemented	(F) This machine doesn't implement the select() system call.
E1029=Self-ties of arrays and hashes are not supported	(F) Self-ties are of arrays and hashes are not supported in\nthe current implementation.
E1031=Semicolon seems to be missing	(W semicolon) A nearby syntax error was probably caused by a missing\nsemicolon, or possibly some other missing operator, such as a comma.
E1033=semi-panic: attempt to dup freed string	(S internal) The internal newSVsv() routine was called to duplicate a\nscalar that had previously been marked as free.
E1035=sem.*? not implemented	(F) You don't have System V semaphore IPC on your system.
E1037=send\\(\\) on closed socket .*?	(W closed) The socket you're sending to got itself closed sometime\nbefore now. Check your control flow.
E1039=Sequence \\(\\? incomplete in regex; marked by <-- HERE in m/.*?/	(F) A regular expression ended with an incomplete extension (?. The <-- HERE\nshows in the regular expression about where the problem was discovered. See\nL<perlre>.
E1041=Sequence \\(\\?.*?...\\) not implemented in regex; marked by <-- HERE in m/.*?/	(F) A proposed regular expression extension has the character reserved but\nhas not yet been written. The <-- HERE shows in the regular expression about\nwhere the problem was discovered. See L<perlre>.
E1043=Sequence \\(\\?.*?...\\) not recognized in regex; marked by <-- HERE in m/.*?/	(F) You used a regular expression extension that doesn't make sense. The\n<-- HERE shows in the regular expression about where the problem was\ndiscovered. See L<perlre>.
E1045=Sequence \\(\\?#... not terminated in regex; marked by <-- HERE in m/.*?/	(F) A regular expression comment must be terminated by a closing\nparenthesis. Embedded parentheses aren't allowed. The <-- HERE shows in\nthe regular expression about where the problem was discovered. See\nL<perlre>.
E1047=Sequence \\(\\?\\{...\\}\\) not terminated or not \\{\\}-balanced in regex; marked by <-- HERE in m/.*?/	(F) If the contents of a (?{...}) clause contains braces, they must balance\nfor Perl to properly detect the end of the clause. The <-- HERE shows in\nthe regular expression about where the problem was discovered. See\nL<perlre>.
E1049=500 Server error	See Server error.
E1051=Server error	This is the error message generally seen in a browser window when trying\nto run a CGI program (including SSI) over the web. The actual error text\nvaries widely from server to server. The most frequently-seen variants\nare "500 Server error", "Method (something) not permitted", "Document\ncontains no data", "Premature end of script headers", and "Did not\nproduce a valid header".
E1053=setegid\\(\\) not implemented	(F) You tried to assign to C<$)>, and your operating system doesn't\nsupport the setegid() system call (or equivalent), or at least Configure\ndidn't think so.
E1055=seteuid\\(\\) not implemented	(F) You tried to assign to C<$>>, and your operating system doesn't\nsupport the seteuid() system call (or equivalent), or at least Configure\ndidn't think so.
E1057=setpgrp can't take arguments	(F) Your system has the setpgrp() from BSD 4.2, which takes no\narguments, unlike POSIX setpgid(), which takes a process ID and process\ngroup ID.
E1059=setrgid\\(\\) not implemented	(F) You tried to assign to C<$(>, and your operating system doesn't\nsupport the setrgid() system call (or equivalent), or at least Configure\ndidn't think so.
E1061=setruid\\(\\) not implemented	(F) You tried to assign to C<$<>, and your operating system doesn't\nsupport the setruid() system call (or equivalent), or at least Configure\ndidn't think so.
E1063=setsockopt\\(\\) on closed socket .*?	(W closed) You tried to set a socket option on a closed socket. Did you\nforget to check the return value of your socket() call? See\nL<perlfunc/setsockopt>.
E1065=Setuid/gid script is writable by world	(F) The setuid emulator won't run a script that is writable by the\nworld, because the world might have written on it already.
E1067=Setuid script not plain file	(F) The setuid emulator won't run a script that isn't read from a file,\nbut from a socket, a pipe or another device.
E1069=shm.*? not implemented	(F) You don't have System V shared memory IPC on your system.
E1071=<> should be quotes	(F) You wrote C<require <file>> when you should have written\nC<require 'file'>.
E1073=/.*?/ should probably be written as ".*?"	(W syntax) You have used a pattern where Perl expected to find a string,\nas in the first argument to C<join>. Perl will treat the true or false\nresult of matching the pattern against $_ as the string, which is\nprobably not what you had in mind.
E1075=shutdown\\(\\) on closed socket .*?	(W closed) You tried to do a shutdown on a closed socket. Seems a bit\nsuperfluous.
E1077=SIG.*? handler ".*?" not defined	(W signal) The signal handler named in %SIG doesn't, in fact, exist.\nPerhaps you put it into the wrong package?
E1079=sort is now a reserved word	(F) An ancient error message that almost nobody ever runs into anymore.\nBut before sort was a keyword, people sometimes used it as a filehandle.
E1081=Sort subroutine didn't return a numeric value	(F) A sort comparison routine must return a number. You probably blew\nit by not using C<<=>> or C<cmp>, or by not using them correctly.\nSee L<perlfunc/sort>.
E1083=Sort subroutine didn't return single value	(F) A sort comparison subroutine may not return a list value with more\nor less than one element. See L<perlfunc/sort>.
E1085=splice\\(\\) offset past end of array	(W misc) You attempted to specify an offset that was past the end of\nthe array passed to splice(). Splicing will instead commence at the end\nof the array, rather than past it. If this isn't what you want, try\nexplicitly pre-extending the array by assigning $#array = $offset. See\nL<perlfunc/splice>.
E1087=Split loop	(P) The split was looping infinitely. (Obviously, a split shouldn't\niterate more times than there are characters of input, which is what\nhappened.) See L<perlfunc/split>.
E1089=Statement unlikely to be reached	(W exec) You did an exec() with some statement after it other than a\ndie(). This is almost always an error, because exec() never returns\nunless there was a failure. You probably wanted to use system()\ninstead, which does return. To suppress this warning, put the exec() in\na block by itself.
E1091=stat\\(\\) on unopened filehandle .*?	(W unopened) You tried to use the stat() function on a filehandle that\nwas either never opened or has since been closed.
E1093=Stub found while resolving method ".*?" overloading ".*?"	(P) Overloading resolution over @ISA tree may be broken by importation\nstubs. Stubs should never be implicitly created, but explicit calls to\nC<can> may break this.
E1095=Subroutine .*? redefined	(W redefine) You redefined a subroutine. To suppress this warning, say
E1097=Substitution loop	(P) The substitution was looping infinitely. (Obviously, a substitution\nshouldn't iterate more times than there are characters of input, which\nis what happened.) See the discussion of substitution in\nL<perlop/"Quote and Quote-like Operators">.
E1099=Substitution pattern not terminated	(F) The lexer couldn't find the interior delimiter of an s/// or s{}{}\nconstruct. Remember that bracketing delimiters count nesting level.\nMissing the leading C<$> from variable C<$s> may cause this error.
E1101=Substitution replacement not terminated	(F) The lexer couldn't find the final delimiter of an s/// or s{}{}\nconstruct. Remember that bracketing delimiters count nesting level.\nMissing the leading C<$> from variable C<$s> may cause this error.
E1103=substr outside of string	(W substr),(F) You tried to reference a substr() that pointed outside of\na string. That is, the absolute value of the offset was larger than the\nlength of the string. See L<perlfunc/substr>. This warning is fatal if\nsubstr is used in an lvalue context (as the left hand side of an\nassignment or as a subroutine argument for example).
E1105=suidperl is no longer needed since .*?	(F) Your Perl was compiled with B<-D>SETUID_SCRIPTS_ARE_SECURE_NOW, but\na version of the setuid emulator somehow got run anyway.
E1107=Switch \\(\\?\\(condition\\)... contains too many branches in regex; marked by <-- HERE in m/.*?/	(F) A (?(condition)if-clause|else-clause) construct can have at most two\nbranches (the if-clause and the else-clause). If you want one or both to\ncontain alternation, such as using C<this|that|other>, enclose it in\nclustering parentheses:
E1109=Switch condition not recognized in regex; marked by <-- HERE in m/.*?/	(F) If the argument to the (?(...)if-clause|else-clause) construct is a\nnumber, it can be only a number. The <-- HERE shows in the regular expression\nabout where the problem was discovered. See L<perlre>.
E1111=switching effective .*? is not implemented	(F) While under the C<use filetest> pragma, we cannot switch the real\nand effective uids or gids.
E1113=.*? syntax	(F) The final summary message when a C<perl -c> succeeds.
E1115=syntax error	(F) Probably means you had a syntax error. Common reasons include:
E1117=syntax error at line .*?: `.*?' unexpected	(A) You've accidentally run your script through the Bourne shell instead\nof Perl. Check the #! line, or manually feed your script into Perl\nyourself.
E1119=syntax error in file .*? at line .*?, next 2 tokens ".*?"	(F) This error is likely to occur if you run a perl5 script through\na perl4 compiler, especially if the next 2 tokens are "use strict"\nor "my $var" or "our $var".
E1121=sysread\\(\\) on closed filehandle .*?	(W closed) You tried to read from a closed filehandle.
E1123=sysread\\(\\) on unopened filehandle .*?	(W unopened) You tried to read from a filehandle that was never opened.
E1125=System V .*? is not implemented on this machine	(F) You tried to do something with a function beginning with "sem",\n"shm", or "msg" but that System V IPC is not implemented in your\nmachine. In some machines the functionality can exist but be\nunconfigured. Consult your system support.
E1127=syswrite\\(\\) on closed filehandle .*?	(W closed) The filehandle you're writing to got itself closed sometime\nbefore now. Check your control flow.
E1129=C<-T> and C<-B> not implemented on filehandles	(F) Perl can't peek at the stdio buffer of filehandles when it doesn't\nknow about your kind of stdio. You'll have to use a filename instead.
E1131=Target of goto is too deeply nested	(F) You tried to use C<goto> to reach a label that was too deeply nested\nfor Perl to reach. Perl is doing you a favor by refusing.
E1133=tell\\(\\) on unopened filehandle	(W unopened) You tried to use the tell() function on a filehandle that\nwas either never opened or has since been closed.
E1135=That use of \\$\\[ is unsupported	(F) Assignment to C<$[> is now strictly circumscribed, and interpreted\nas a compiler directive. You may say only one of
E1137=The crypt\\(\\) function is unimplemented due to excessive paranoia	(F) Configure couldn't find the crypt() function on your machine,\nprobably because your vendor didn't supply it, probably because they\nthink the U.S. Government thinks it's a secret, or at least that they\nwill continue to pretend that it is. And if you quote me on that, I\nwill deny it.
E1139=The .*? function is unimplemented	The function indicated isn't implemented on this architecture, according\nto the probings of Configure.
E1141=The stat preceding .*? wasn't an lstat	(F) It makes no sense to test the current stat buffer for symbolic\nlinkhood if the last stat that wrote to the stat buffer already went\npast the symlink to get to the real file. Use an actual filename\ninstead.
E1143=The 'unique' attribute may only be applied to 'our' variables	(F) Currently this attribute is not supported on C<my> or C<sub>\ndeclarations. See L<perlfunc/our>.
E1145=This Perl can't set CRTL environ elements \\(.*?=.*?\\)	(W internal) Warnings peculiar to VMS. You tried to change or delete an\nelement of the CRTL's internal environ array, but your copy of Perl\nwasn't built with a CRTL that contained the setenv() function. You'll\nneed to rebuild Perl with a CRTL that does, or redefine\nF<PERL_ENV_TABLES> (see L<perlvms>) so that the environ array isn't the\ntarget of the change to\n%ENV which produced the warning.
E1147=thread failed to start: .*?	(W threads)(S) The entry point function of threads->create() failed for some reason.
E1149=5.005 threads are deprecated	(D deprecated) The 5.005-style threads (activated by C<use Thread;>)\nare deprecated and one should use the new ithreads instead,\nsee L<perl58delta> for more details.
E1151=times not implemented	(F) Your version of the C library apparently doesn't do times(). I\nsuspect you're not running on Unix.
E1153="-T" is on the #! line, it must also be used on the command line	(X) The #! line (or local equivalent) in a Perl script contains the\nB<-T> option, but Perl was not invoked with B<-T> in its command line.\nThis is an error because, by the time Perl discovers a B<-T> in a\nscript, it's too late to properly taint everything from the environment.\nSo Perl gives up.
E1155=To.*?: illegal mapping '.*?'	(F) You tried to define a customized To-mapping for lc(), lcfirst,\nuc(), or ucfirst() (or their string-inlined versions), but you\nspecified an illegal mapping.\nSee L<perlunicode/"User-Defined Character Properties">.
E1157=Too deeply nested \\(\\)-groups	(F) Your template contains ()-groups with a ridiculously deep nesting level. 
E1159=Too few args to syscall	(F) There has to be at least one argument to syscall() to specify the\nsystem call to call, silly dilly.
E1161=Too late for "-.*?" option	(X) The #! line (or local equivalent) in a Perl script contains the\nB<-M> or B<-m> option. This is an error because B<-M> and B<-m> options\nare not intended for use inside scripts. Use the C<use> pragma instead.
E1163=Too late to run .*? block	(W void) A CHECK or INIT block is being defined during run time proper,\nwhen the opportunity to run them has already passed. Perhaps you are\nloading a file with C<require> or C<do> when you should be using C<use>\ninstead. Or perhaps you should put the C<require> or C<do> inside a\nBEGIN block.
E1165=Too many args to syscall	(F) Perl supports a maximum of only 14 args to syscall().
E1167=Too many arguments for .*?	(F) The function requires fewer arguments than you specified.
E1169=Too many \\)'s	(A) You've accidentally run your script through B<csh> instead of Perl.\nCheck the #! line, or manually feed your script into Perl yourself.
E1171=Too many \\('s	(A) You've accidentally run your script through B<csh> instead of Perl.\nCheck the #! line, or manually feed your script into Perl yourself.
E1173=Trailing . in regex m/.*?/	(F) The regular expression ends with an unbackslashed backslash.\nBackslash it. See L<perlre>.
E1175=Transliteration pattern not terminated	(F) The lexer couldn't find the interior delimiter of a tr/// or tr[][]\nor y/// or y[][] construct. Missing the leading C<$> from variables\nC<$tr> or C<$y> may cause this error.
E1177=Transliteration replacement not terminated	(F) The lexer couldn't find the final delimiter of a tr///, tr[][],\ny/// or y[][] construct.
E1179='.*?' trapped by operation mask	(F) You tried to use an operator from a Safe compartment in which it's\ndisallowed. See L<Safe>.
E1181=truncate not implemented	(F) Your machine doesn't implement a file truncation mechanism that\nConfigure knows about.
E1183=Type of arg .*? to .*? must be .*? \\(not .*?\\)	(F) This function requires the argument in that position to be of a\ncertain type. Arrays must be @NAME or C<@{EXPR}>. Hashes must be\n%NAME or C<%{EXPR}>. No implicit dereferencing is allowed--use the\n{EXPR} forms as an explicit dereference. See L<perlref>.
E1185=umask not implemented	(F) Your machine doesn't implement the umask function and you tried to\nuse it to restrict permissions for yourself (EXPR & 0700).
E1187=Unable to create sub named ".*?"	(F) You attempted to create or access a subroutine with an illegal name.
E1189=Unbalanced context: .*? more PUSHes than POPs	(W internal) The exit code detected an internal inconsistency in how\nmany execution contexts were entered and left.
E1191=Unbalanced saves: .*? more saves than restores	(W internal) The exit code detected an internal inconsistency in how\nmany values were temporarily localized.
E1193=Unbalanced scopes: .*? more ENTERs than LEAVEs	(W internal) The exit code detected an internal inconsistency in how\nmany blocks were entered and left.
E1195=Unbalanced tmps: .*? more allocs than frees	(W internal) The exit code detected an internal inconsistency in how\nmany mortal scalars were allocated and freed.
E1197=Undefined format ".*?" called	(F) The format indicated doesn't seem to exist. Perhaps it's really in\nanother package? See L<perlform>.
E1199=Undefined sort subroutine ".*?" called	(F) The sort comparison routine specified doesn't seem to exist.\nPerhaps it's in a different package? See L<perlfunc/sort>.
E1201=Undefined subroutine &.*? called	(F) The subroutine indicated hasn't been defined, or if it was, it has\nsince been undefined.
E1203=Undefined subroutine called	(F) The anonymous subroutine you're trying to call hasn't been defined,\nor if it was, it has since been undefined.
E1205=Undefined subroutine in sort	(F) The sort comparison routine specified is declared but doesn't seem\nto have been defined yet. See L<perlfunc/sort>.
E1207=Undefined top format ".*?" called	(F) The format indicated doesn't seem to exist. Perhaps it's really in\nanother package? See L<perlform>.
E1209=Undefined value assigned to typeglob	(W misc) An undefined value was assigned to a typeglob, a la\nC<*foo = undef>. This does nothing. It's possible that you really mean\nC<undef *foo>.
E1211=.*?: Undefined variable	(A) You've accidentally run your script through B<csh> instead of Perl.\nCheck the #! line, or manually feed your script into Perl yourself.
E1213=unexec of .*? into .*? failed!	(F) The unexec() routine failed for some reason. See your local FSF\nrepresentative, who probably put it there in the first place.
E1215=Unicode character .*? is illegal	(W utf8) Certain Unicode characters have been designated off-limits by\nthe Unicode standard and should not be generated. If you really know\nwhat you are doing you can turn off this warning by C<no warnings 'utf8';>.
E1217=Unknown BYTEORDER	(F) There are no byte-swapping functions for a machine with this byte\norder.
E1219=Unknown open\\(\\) mode '.*?'	(F) The second argument of 3-argument open() is not among the list\nof valid modes: C<<>, C<>>, C<>>>, C<+<>,\nC<+>>, C<+>>>, C<-|>, C<|->, C<<&>, C<>&>.
E1221=Unknown PerlIO layer ".*?"	(W layer) An attempt was made to push an unknown layer onto the Perl I/O\nsystem. (Layers take care of transforming data between external and\ninternal representations.) Note that some layers, such as C<mmap>,\nare not supported in all environments. If your program didn't\nexplicitly request the failing operation, it may be the result of the\nvalue of the environment variable PERLIO.
E1223=Unknown process %x sent message to prime_env_iter: .*?	(P) An error peculiar to VMS. Perl was reading values for %ENV before\niterating over it, and someone else stuck a message in the stream of\ndata Perl expected. Someone's very confused, or perhaps trying to\nsubvert Perl's population of %ENV for nefarious purposes.
E1225=Unknown "re" subpragma '.*?' \\(known ones are: .*?\\)	You tried to use an unknown subpragma of the "re" pragma.
E1227=Unknown switch condition \\(\\?\\(.*? in regex; marked by <-- HERE in m/.*?/	(F) The condition part of a (?(condition)if-clause|else-clause) construct\nis not known. The condition may be lookahead or lookbehind (the condition\nis true if the lookahead or lookbehind is true), a (?{...}) construct (the\ncondition is true if the code evaluates to a true value), or a number (the\ncondition is true if the set of capturing parentheses named by the number\nmatched).
E1229=Unknown Unicode option letter '.*?'	You specified an unknown Unicode option. See L<perlrun> documentation\nof the C<-C> switch for the list of known options.
E1231=Unknown Unicode option value %x	You specified an unknown Unicode option. See L<perlrun> documentation\nof the C<-C> switch for the list of known options.
E1233=Unknown warnings category '.*?'	(F) An error issued by the C<warnings> pragma. You specified a warnings\ncategory that is unknown to perl at this point.
E1235=unmatched \\[ in regex; marked by <-- HERE in m/.*?/	(F) The brackets around a character class must match. If you wish to\ninclude a closing bracket in a character class, backslash it or put it\nfirst. The <-- HERE shows in the regular expression about where the problem\nwas discovered. See L<perlre>.
E1237=unmatched \\( in regex; marked by <-- HERE in m/.*?/	(F) Unbackslashed parentheses must always be balanced in regular\nexpressions. If you're a vi user, the % key is valuable for finding the\nmatching parenthesis. The <-- HERE shows in the regular expression about\nwhere the problem was discovered. See L<perlre>.
E1239=Unmatched right .*? bracket	(F) The lexer counted more closing curly or square brackets than opening\nones, so you're probably missing a matching opening bracket. As a\ngeneral rule, you'll find the missing one (so to speak) near the place\nyou were last editing.
E1241=Unquoted string ".*?" may clash with future reserved word	(W reserved) You used a bareword that might someday be claimed as a\nreserved word. It's best to put such a word in quotes, or capitalize it\nsomehow, or insert an underbar into it. You might also declare it as a\nsubroutine.
E1243=Unrecognized character .*?	(F) The Perl parser has no idea what to do with the specified character\nin your Perl script (or eval). Perhaps you tried to run a compressed\nscript, a binary program, or a directory as a Perl program.
E1245=/.*?/: Unrecognized escape ...*? in character class passed through	(W regexp) You used a backslash-character combination which is not\nrecognized by Perl inside character classes. The character was\nunderstood literally.
E1247=Unrecognized escape ...*? passed through	(W misc) You used a backslash-character combination which is not\nrecognized by Perl.
E1249=Unrecognized escape ...*? passed through in regex; marked by <-- HERE in m/.*?/	(W regexp) You used a backslash-character combination which is not\nrecognized by Perl. This combination appears in an interpolated variable or\na C<'>-delimited regular expression. The character was understood\nliterally. The <-- HERE shows in the regular expression about where the\nescape was discovered.
E1251=Unrecognized signal name ".*?"	(F) You specified a signal name to the kill() function that was not\nrecognized. Say C<kill -l> in your shell to see the valid signal names\non your system.
E1253=Unrecognized switch: -.*?  \\(-h will show valid options\\)	(F) You specified an illegal option to Perl. Don't do that. (If you\nthink you didn't do that, check the #! line to see if it's supplying the\nbad switch on your behalf.)
E1255=Unsuccessful .*? on filename containing newline	(W newline) A file operation was attempted on a filename, and that\noperation failed, PROBABLY because the filename contained a newline,\nPROBABLY because you forgot to chomp() it off. See L<perlfunc/chomp>.
E1257=Unsupported directory function ".*?" called	(F) Your machine doesn't support opendir() and readdir().
E1259=Unsupported function .*?	(F) This machine doesn't implement the indicated function, apparently.\nAt least, Configure doesn't think so.
E1261=Unsupported function fork	(F) Your version of executable does not support forking.
E1263=Unsupported script encoding .*?	(F) Your program file begins with a Unicode Byte Order Mark (BOM) which\ndeclares it to be in a Unicode encoding that Perl cannot read.
E1265=Unsupported socket function ".*?" called	(F) Your machine doesn't support the Berkeley socket mechanism, or at\nleast that's what Configure thought.
E1267=Unterminated attribute list	(F) The lexer found something other than a simple identifier at the\nstart of an attribute, and it wasn't a semicolon or the start of a\nblock. Perhaps you terminated the parameter list of the previous\nattribute too soon. See L<attributes>.
E1269=Unterminated attribute parameter in attribute list	(F) The lexer saw an opening (left) parenthesis character while parsing\nan attribute list, but the matching closing (right) parenthesis\ncharacter was not found. You may need to add (or remove) a backslash\ncharacter to get your parentheses to balance. See L<attributes>.
E1271=Unterminated compressed integer	(F) An argument to unpack("w",...) was incompatible with the BER\ncompressed integer format and could not be converted to an integer.\nSee L<perlfunc/pack>.
E1273=Unterminated <> operator	(F) The lexer saw a left angle bracket in a place where it was expecting\na term, so it's looking for the corresponding right angle bracket, and\nnot finding it. Chances are you left some needed parentheses out\nearlier in the line, and you really meant a "less than".
E1275=untie attempted while .*? inner references still exist	(W untie) A copy of the object returned from C<tie> (or C<tied>) was\nstill valid when C<untie> was called.
E1277=Usage: POSIX::.*?\\(.*?\\)	(F) You called a POSIX function with incorrect arguments.\nSee L<POSIX/FUNCTIONS> for more information.
E1279=Usage: Win32::.*?\\(.*?\\)	(F) You called a Win32 function with incorrect arguments.\nSee L<Win32> for more information.
E1281=Useless \\(\\?-.*?\\) - don't use /.*? modifier in regex; marked by <-- HERE in m/.*?/	(W regexp) You have used an internal modifier such as (?-o) that has no\nmeaning unless removed from the entire regexp:
E1283=Useless \\(\\?.*?\\) - use /.*? modifier in regex; marked by <-- HERE in m/.*?/	(W regexp) You have used an internal modifier such as (?o) that has no\nmeaning unless applied to the entire regexp:
E1285=Useless use of .*? in void context	(W void) You did something without a side effect in a context that does\nnothing with the return value, such as a statement that doesn't return a\nvalue from a block, or the left side of a scalar comma operator. Very\noften this points not to stupidity on your part, but a failure of Perl\nto parse your program the way you thought it would. For example, you'd\nget this if you mixed up your C precedence with Python precedence and\nsaid
E1287=Useless use of "re" pragma	(W) You did C<use re;> without any arguments. That isn't very useful.
E1289=Useless use of sort in scalar context	(W void) You used sort in scalar context, as in :
E1291=Useless use of .*? with no values	(W syntax) You used the push() or unshift() function with no arguments\napart from the array, like C<push(@x)> or C<unshift(@foo)>. That won't\nusually have any effect on the array, so is completely useless. It's\npossible in principle that push(@tied_array) could have some effect\nif the array is tied to a class which implements a PUSH method. If so,\nyou can write it as C<push(@tied_array,())> to avoid this warning.
E1293="use" not allowed in expression	(F) The "use" keyword is recognized and executed at compile time, and\nreturns no useful value. See L<perlmod>.
E1295=Use of bare << to mean <<"" is deprecated	(D deprecated) You are now encouraged to use the explicitly quoted form\nif you wish to use an empty line as the terminator of the here-document.
E1297=Use of chdir\\(''\\) or chdir\\(undef\\) as chdir\\(\\) deprecated	(D deprecated) chdir() with no arguments is documented to change to\n$ENV{HOME} or $ENV{LOGDIR}. chdir(undef) and chdir('') share this\nbehavior, but that has been deprecated. In future versions they\nwill simply fail.
E1299=Use of /c modifier is meaningless in s///	(W regexp) You used the /c modifier in a substitution. The /c\nmodifier is not presently meaningful in substitutions.
E1301=Use of /c modifier is meaningless without /g	(W regexp) You used the /c modifier with a regex operand, but didn't\nuse the /g modifier. Currently, /c is meaningful only when /g is\nused. (This may change in the future.)
E1303=Use of freed value in iteration	(F) Perhaps you modified the iterated array within the loop?\nThis error is typically caused by code like the following:
E1305=Use of \\*glob\\{FILEHANDLE\\} is deprecated	(D deprecated) You are now encouraged to use the shorter *glob{IO} form\nto access the filehandle slot within a typeglob.
E1307=Use of /g modifier is meaningless in split	(W regexp) You used the /g modifier on the pattern for a C<split>\noperator. Since C<split> always tries to match the pattern\nrepeatedly, the C</g> has no effect.
E1309=Use of implicit split to @_ is deprecated	(D deprecated) It makes a lot of work for the compiler when you clobber\na subroutine's argument list, so it's better if you assign the results\nof a split() explicitly to an array (or list).
E1311=Use of inherited AUTOLOAD for non-method .*?\\(\\) is deprecated	(D deprecated) As an (ahem) accidental feature, C<AUTOLOAD> subroutines\nare looked up as methods (using the C<@ISA> hierarchy) even when the\nsubroutines to be autoloaded were called as plain functions (e.g.\nC<Foo::bar()>), not as methods (e.g. C<Foo->bar()> or C<$obj->bar()>).
E1313=Use of .*? in printf format not supported	(F) You attempted to use a feature of printf that is accessible from\nonly C. This usually means there's a better way to do it in Perl.
E1315=Use of \\$\\* is deprecated	(D deprecated) This variable magically turned on multi-line pattern\nmatching, both for you and for any luckless subroutine that you happen\nto call. You should use the new C<//m> and C<//s> modifiers now to do\nthat without the dangerous action-at-a-distance effects of C<$*>.
E1317=Use of \\$# is deprecated	(D deprecated) This was an ill-advised attempt to emulate a poorly\ndefined B<awk> feature. Use an explicit printf() or sprintf() instead.
E1319=Use of .*? is deprecated	(D deprecated) The construct indicated is no longer recommended for use,\ngenerally because there's a better way to do it, and also because the\nold way has bad side effects.
E1321=Use of -l on filehandle .*?	(W io) A filehandle represents an opened file, and when you opened the file\nit already went past any symlink you are presumably trying to look for.\nThe operation returned C<undef>. Use a filename instead.
E1323=Use of "package" with no arguments is deprecated	(D deprecated) You used the C<package> keyword without specifying a package\nname. So no namespace is current at all. Using this can cause many\notherwise reasonable constructs to fail in baffling ways. C<use strict;>\ninstead.
E1325=Use of reference ".*?" as array index	(W misc) You tried to use a reference as an array index; this probably\nisn't what you mean, because references in numerical context tend\nto be huge numbers, and so usually indicates programmer error.
E1327=Use of reserved word ".*?" is deprecated	(D deprecated) The indicated bareword is a reserved word. Future\nversions of perl may use it as a keyword, so you're better off either\nexplicitly quoting the word in a manner appropriate for its context of\nuse, or using a different name altogether. The warning can be\nsuppressed for subroutine names by either adding a C<&> prefix, or using\na package qualifier, e.g. C<&our()>, or C<Foo::our()>.
E1329=Use of tainted arguments in .*? is deprecated	(W taint, deprecated) You have supplied C<system()> or C<exec()> with multiple\narguments and at least one of them is tainted. This used to be allowed\nbut will become a fatal error in a future version of perl. Untaint your\narguments. See L<perlsec>.
E1331=Use of uninitialized value.*?	(W uninitialized) An undefined value was used as if it were already\ndefined. It was interpreted as a "" or a 0, but maybe it was a mistake.\nTo suppress this warning assign a defined value to your variables.
E1333=Using a hash as a reference is deprecated	(D deprecated) You tried to use a hash as a reference, as in\nC<%foo->{"bar"}> or C<%$ref->{"hello"}>. Versions of perl <= 5.6.1\nused to allow this syntax, but shouldn't have. It is now deprecated, and will\nbe removed in a future version.
E1335=Using an array as a reference is deprecated	(D deprecated) You tried to use an array as a reference, as in\nC<@foo->[23]> or C<@$ref->[99]>. Versions of perl <= 5.6.1 used to\nallow this syntax, but shouldn't have. It is now deprecated, and will be\nremoved in a future version.
E1337=UTF-16 surrogate .*?	(W utf8) You tried to generate half of an UTF-16 surrogate by\nrequesting a Unicode character between the code points 0xD800 and\n0xDFFF (inclusive). That range is reserved exclusively for the use of\nUTF-16 encoding (by having two 16-bit UCS-2 characters); but Perl\nencodes its characters in UTF-8, so what you got is a very illegal\ncharacter. If you really know what you are doing you can turn off\nthis warning by C<no warnings 'utf8';>.
E1339=Value of .*? can be "0"; test with defined\\(\\)	(W misc) In a conditional expression, you used <HANDLE>, <*> (glob),\nC<each()>, or C<readdir()> as a boolean value. Each of these constructs\ncan return a value of "0"; that would make the conditional expression\nfalse, which is probably not what you intended. When using these\nconstructs in conditional expressions, test their values with the\nC<defined> operator.
E1341=Value of CLI symbol ".*?" too long	(W misc) A warning peculiar to VMS. Perl tried to read the value of an\n%ENV element from a CLI symbol table, and found a resultant string\nlonger than 1024 characters. The return value has been truncated to\n1024 characters.
E1343=Variable ".*?" is not imported.*?	(F) While "use strict" in effect, you referred to a global variable that\nyou apparently thought was imported from another module, because\nsomething else of the same name (usually a subroutine) is exported by\nthat module. It usually means you put the wrong funny character on the\nfront of your variable.
E1345=Variable length lookbehind not implemented in regex; marked by <-- HERE in m/.*?/	(F) Lookbehind is allowed only for subexpressions whose length is fixed and\nknown at compile time. The <-- HERE shows in the regular expression about\nwhere the problem was discovered. See L<perlre>.
E1347=".*?" variable .*? masks earlier declaration in same .*?	(W misc) A "my" or "our" variable has been redeclared in the current\nscope or statement, effectively eliminating all access to the previous\ninstance. This is almost always a typographical error. Note that the\nearlier variable will still exist until the end of the scope or until\nall closure referents to it are destroyed.
E1349=Variable ".*?" may be unavailable	(W closure) An inner (nested) I<anonymous> subroutine is inside a\nI<named> subroutine, and outside that is another subroutine; and the\nanonymous (innermost) subroutine is referencing a lexical variable\ndefined in the outermost subroutine. For example:
E1351=Variable syntax	(A) You've accidentally run your script through B<csh> instead\nof Perl. Check the #! line, or manually feed your script into\nPerl yourself.
E1353=Variable ".*?" will not stay shared	(W closure) An inner (nested) I<named> subroutine is referencing a\nlexical variable defined in an outer subroutine.
E1355=Version number must be a constant number	(P) The attempt to translate a C<use Module n.n LIST> statement into\nits equivalent C<BEGIN> block found an internal inconsistency with\nthe version number.
E1357=Warning: something's wrong	(W) You passed warn() an empty string (the equivalent of C<warn "">) or\nyou called it with no args and C<$_> was empty.
E1359=Warning: unable to close filehandle .*? properly	(S) The implicit close() done by an open() got an error indication on\nthe close(). This usually indicates your file system ran out of disk\nspace.
E1361=Warning: Use of ".*?" without parentheses is ambiguous	(S ambiguous) You wrote a unary operator followed by something that\nlooks like a binary operator that could also have been interpreted as a\nterm or unary operator. For instance, if you know that the rand\nfunction has a default argument of 1.0, and you write
E1363=Wide character in .*?	(W utf8) Perl met a wide character (>255) when it wasn't expecting\none. This warning is by default on for I/O (like print). The easiest\nway to quiet this warning is simply to add the C<:utf8> layer to the\noutput, e.g. C<binmode STDOUT, ':utf8'>. Another way to turn off the\nwarning is to add C<no warnings 'utf8';> but that is often closer to\ncheating. In general, you are supposed to explicitly mark the\nfilehandle with an encoding, see L<open> and L<perlfunc/binmode>.
E1365=Within \\[\\]-length '.*?' not allowed	(F) The count in the (un)pack template may be replaced by C<[TEMPLATE]> only if\nC<TEMPLATE> always matches the same amount of packed bytes that can be\ndetermined from the template alone. This is not possible if it contains an\nof the codes @, /, U, u, w or a *-length. Redesign the template.
E1367=write\\(\\) on closed filehandle .*?	(W closed) The filehandle you're writing to got itself closed sometime\nbefore now. Check your control flow.
E1369=.*? ".x.*?" does not map to Unicode	When reading in different encodings Perl tries to map everything\ninto Unicode characters. The bytes you read in are not legal in\nthis encoding, for example
E1371='X' outside of string	(F) You had a (un)pack template that specified a relative position before\nthe beginning of the string being (un)packed. See L<perlfunc/pack>.
E1373='x' outside of string in unpack	(F) You had a pack template that specified a relative position after\nthe end of the string being unpacked. See L<perlfunc/pack>.
E1375=YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!	(F) And you probably never will, because you probably don't have the\nsources to your kernel, and your vendor probably doesn't give a rip\nabout what you want. Your best bet is to put a setuid C wrapper around\nyour script.
E1377=You need to quote ".*?"	(W syntax) You assigned a bareword as a signal handler name.\nUnfortunately, you already have a subroutine of that name declared,\nwhich means that Perl 5 will try to call the subroutine when the\nassignment is executed, which is probably not what you want. (If it IS\nwhat you want, put an & in front.)
E1379=Your random numbers are not that random	(F) When trying to initialise the random seed for hashes, Perl could\nnot get any randomness out of your system. This usually indicates\nSomething Very Wrong.
