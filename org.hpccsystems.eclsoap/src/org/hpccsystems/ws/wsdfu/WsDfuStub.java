
/**
 * WsDfuStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
        package org.hpccsystems.ws.wsdfu;

        

        /*
        *  WsDfuStub java implementation
        */

        
        public class WsDfuStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized java.lang.String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("WsDfu" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[17];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUGetDataColumns"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "add"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[1]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUArrayAction"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[2]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUQuery"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[3]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUSearchData"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[4]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "addRemote"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[5]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "savexml"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[6]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "superfileAction"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[7]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "superfileAddRaw"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[8]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "addtoSuperfile"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[9]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUSearch"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[10]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUFileView"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[11]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUSpace"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[12]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "superfileList"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[13]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUInfo"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[14]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUDefFile"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[15]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu", "dFUBrowseData"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[16]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUGetDataColumns"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUGetDataColumns"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUGetDataColumns"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Add"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Add"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Add"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUArrayAction"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUArrayAction"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUArrayAction"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUQuery"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUQuery"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUQuery"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearchData"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearchData"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearchData"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddRemote"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddRemote"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddRemote"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Savexml"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Savexml"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "Savexml"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAction"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAction"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAction"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAddRaw"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAddRaw"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileAddRaw"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddtoSuperfile"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddtoSuperfile"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "AddtoSuperfile"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearch"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearch"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSearch"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUFileView"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUFileView"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUFileView"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSpace"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSpace"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUSpace"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileList"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileList"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "SuperfileList"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUInfo"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUInfo"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUInfo"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUDefFile"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUDefFile"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUDefFile"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           
              faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUBrowseData"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUBrowseData"),"org.hpccsystems.ws.wsdfu.EspSoapFault");
              faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"), "DFUBrowseData"),"org.hpccsystems.ws.wsdfu.WsDfuStub$Exceptions");
           


    }

    /**
      *Constructor that takes in a configContext
      */

    public WsDfuStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public WsDfuStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
        
	
        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
    
    }

    /**
     * Default Constructor
     */
    public WsDfuStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"http://10.241.3.241:8010/WsDfu?ver_=1.19" );
                
    }

    /**
     * Default Constructor
     */
    public WsDfuStub() throws org.apache.axis2.AxisFault {
        
                    this("http://10.241.3.241:8010/WsDfu?ver_=1.19" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public WsDfuStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUGetDataColumns
                     * @param dFUGetDataColumnsRequest0
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse dFUGetDataColumns(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest dFUGetDataColumnsRequest0)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUGetDataColumns?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUGetDataColumnsRequest0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUGetDataColumns")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUGetDataColumns"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUGetDataColumns
                    * @param dFUGetDataColumnsRequest0
                
                */
                public  void startdFUGetDataColumns(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest dFUGetDataColumnsRequest0,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUGetDataColumns?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUGetDataColumnsRequest0,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUGetDataColumns")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUGetDataColumns"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUGetDataColumns(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUGetDataColumns(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUGetDataColumns"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUGetDataColumns((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUGetDataColumns(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUGetDataColumns(f);
                                            }
									    } else {
										    callback.receiveErrordFUGetDataColumns(f);
									    }
									} else {
									    callback.receiveErrordFUGetDataColumns(f);
									}
								} else {
								    callback.receiveErrordFUGetDataColumns(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUGetDataColumns(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#add
                     * @param addRequest2
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse add(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest addRequest2)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
              _operationClient.getOptions().setAction("WsDfu/Add?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addRequest2,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "add")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "add"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startadd
                    * @param addRequest2
                
                */
                public  void startadd(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest addRequest2,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
             _operationClient.getOptions().setAction("WsDfu/Add?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addRequest2,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "add")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "add"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultadd(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErroradd(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Add"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErroradd((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErroradd(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroradd(f);
                                            }
									    } else {
										    callback.receiveErroradd(f);
									    }
									} else {
									    callback.receiveErroradd(f);
									}
								} else {
								    callback.receiveErroradd(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErroradd(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUArrayAction
                     * @param dFUArrayActionRequest4
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse dFUArrayAction(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest dFUArrayActionRequest4)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUArrayAction?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUArrayActionRequest4,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUArrayAction")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUArrayAction"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUArrayAction
                    * @param dFUArrayActionRequest4
                
                */
                public  void startdFUArrayAction(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest dFUArrayActionRequest4,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUArrayAction?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUArrayActionRequest4,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUArrayAction")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUArrayAction"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUArrayAction(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUArrayAction(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUArrayAction"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUArrayAction((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUArrayAction(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUArrayAction(f);
                                            }
									    } else {
										    callback.receiveErrordFUArrayAction(f);
									    }
									} else {
									    callback.receiveErrordFUArrayAction(f);
									}
								} else {
								    callback.receiveErrordFUArrayAction(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUArrayAction(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[2].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUQuery
                     * @param dFUQueryRequest6
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse dFUQuery(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest dFUQueryRequest6)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUQuery?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUQueryRequest6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUQuery")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUQuery"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUQuery
                    * @param dFUQueryRequest6
                
                */
                public  void startdFUQuery(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest dFUQueryRequest6,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUQuery?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUQueryRequest6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUQuery")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUQuery"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUQuery(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUQuery(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUQuery"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUQuery((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUQuery(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUQuery(f);
                                            }
									    } else {
										    callback.receiveErrordFUQuery(f);
									    }
									} else {
									    callback.receiveErrordFUQuery(f);
									}
								} else {
								    callback.receiveErrordFUQuery(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUQuery(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[3].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUSearchData
                     * @param dFUSearchDataRequest8
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse dFUSearchData(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest dFUSearchDataRequest8)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUSearchData?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSearchDataRequest8,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearchData")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearchData"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUSearchData
                    * @param dFUSearchDataRequest8
                
                */
                public  void startdFUSearchData(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest dFUSearchDataRequest8,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUSearchData?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSearchDataRequest8,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearchData")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearchData"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUSearchData(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUSearchData(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearchData"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUSearchData((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUSearchData(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearchData(f);
                                            }
									    } else {
										    callback.receiveErrordFUSearchData(f);
									    }
									} else {
									    callback.receiveErrordFUSearchData(f);
									}
								} else {
								    callback.receiveErrordFUSearchData(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUSearchData(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[4].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[4].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#addRemote
                     * @param addRemoteRequest10
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse addRemote(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest addRemoteRequest10)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
              _operationClient.getOptions().setAction("WsDfu/AddRemote?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addRemoteRequest10,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addRemote")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addRemote"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startaddRemote
                    * @param addRemoteRequest10
                
                */
                public  void startaddRemote(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest addRemoteRequest10,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
             _operationClient.getOptions().setAction("WsDfu/AddRemote?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addRemoteRequest10,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addRemote")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addRemote"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultaddRemote(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErroraddRemote(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddRemote"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErroraddRemote((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErroraddRemote(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddRemote(f);
                                            }
									    } else {
										    callback.receiveErroraddRemote(f);
									    }
									} else {
									    callback.receiveErroraddRemote(f);
									}
								} else {
								    callback.receiveErroraddRemote(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErroraddRemote(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[5].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[5].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#savexml
                     * @param savexmlRequest12
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse savexml(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest savexmlRequest12)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
              _operationClient.getOptions().setAction("WsDfu/Savexml?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    savexmlRequest12,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "savexml")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "savexml"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startsavexml
                    * @param savexmlRequest12
                
                */
                public  void startsavexml(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest savexmlRequest12,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
             _operationClient.getOptions().setAction("WsDfu/Savexml?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    savexmlRequest12,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "savexml")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "savexml"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultsavexml(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorsavexml(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Savexml"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrorsavexml((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorsavexml(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsavexml(f);
                                            }
									    } else {
										    callback.receiveErrorsavexml(f);
									    }
									} else {
									    callback.receiveErrorsavexml(f);
									}
								} else {
								    callback.receiveErrorsavexml(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorsavexml(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[6].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[6].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#superfileAction
                     * @param superfileActionRequest14
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse superfileAction(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest superfileActionRequest14)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
              _operationClient.getOptions().setAction("WsDfu/SuperfileAction?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileActionRequest14,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAction")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAction"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startsuperfileAction
                    * @param superfileActionRequest14
                
                */
                public  void startsuperfileAction(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest superfileActionRequest14,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
             _operationClient.getOptions().setAction("WsDfu/SuperfileAction?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileActionRequest14,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAction")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAction"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultsuperfileAction(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorsuperfileAction(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAction"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrorsuperfileAction((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorsuperfileAction(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAction(f);
                                            }
									    } else {
										    callback.receiveErrorsuperfileAction(f);
									    }
									} else {
									    callback.receiveErrorsuperfileAction(f);
									}
								} else {
								    callback.receiveErrorsuperfileAction(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorsuperfileAction(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[7].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[7].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#superfileAddRaw
                     * @param superfileAddRawRequest16
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse superfileAddRaw(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest superfileAddRawRequest16)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
              _operationClient.getOptions().setAction("WsDfu/SuperfileAddRaw?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileAddRawRequest16,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAddRaw")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAddRaw"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startsuperfileAddRaw
                    * @param superfileAddRawRequest16
                
                */
                public  void startsuperfileAddRaw(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest superfileAddRawRequest16,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
             _operationClient.getOptions().setAction("WsDfu/SuperfileAddRaw?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileAddRawRequest16,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAddRaw")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileAddRaw"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultsuperfileAddRaw(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorsuperfileAddRaw(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileAddRaw"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrorsuperfileAddRaw((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorsuperfileAddRaw(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileAddRaw(f);
                                            }
									    } else {
										    callback.receiveErrorsuperfileAddRaw(f);
									    }
									} else {
									    callback.receiveErrorsuperfileAddRaw(f);
									}
								} else {
								    callback.receiveErrorsuperfileAddRaw(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorsuperfileAddRaw(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[8].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[8].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#addtoSuperfile
                     * @param addtoSuperfileRequest18
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse addtoSuperfile(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest addtoSuperfileRequest18)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
              _operationClient.getOptions().setAction("WsDfu/AddtoSuperfile?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addtoSuperfileRequest18,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addtoSuperfile")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addtoSuperfile"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startaddtoSuperfile
                    * @param addtoSuperfileRequest18
                
                */
                public  void startaddtoSuperfile(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest addtoSuperfileRequest18,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
             _operationClient.getOptions().setAction("WsDfu/AddtoSuperfile?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    addtoSuperfileRequest18,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addtoSuperfile")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "addtoSuperfile"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultaddtoSuperfile(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErroraddtoSuperfile(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AddtoSuperfile"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErroraddtoSuperfile((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErroraddtoSuperfile(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErroraddtoSuperfile(f);
                                            }
									    } else {
										    callback.receiveErroraddtoSuperfile(f);
									    }
									} else {
									    callback.receiveErroraddtoSuperfile(f);
									}
								} else {
								    callback.receiveErroraddtoSuperfile(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErroraddtoSuperfile(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[9].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[9].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUSearch
                     * @param dFUSearchRequest20
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse dFUSearch(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest dFUSearchRequest20)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUSearch?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSearchRequest20,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearch")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearch"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUSearch
                    * @param dFUSearchRequest20
                
                */
                public  void startdFUSearch(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest dFUSearchRequest20,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUSearch?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSearchRequest20,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearch")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSearch"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUSearch(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUSearch(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSearch"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUSearch((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUSearch(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSearch(f);
                                            }
									    } else {
										    callback.receiveErrordFUSearch(f);
									    }
									} else {
									    callback.receiveErrordFUSearch(f);
									}
								} else {
								    callback.receiveErrordFUSearch(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUSearch(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[10].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[10].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUFileView
                     * @param dFUFileViewRequest22
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse dFUFileView(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest dFUFileViewRequest22)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUFileView?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUFileViewRequest22,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUFileView")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUFileView"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUFileView
                    * @param dFUFileViewRequest22
                
                */
                public  void startdFUFileView(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest dFUFileViewRequest22,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUFileView?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUFileViewRequest22,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUFileView")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUFileView"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUFileView(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUFileView(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUFileView"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUFileView((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUFileView(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUFileView(f);
                                            }
									    } else {
										    callback.receiveErrordFUFileView(f);
									    }
									} else {
									    callback.receiveErrordFUFileView(f);
									}
								} else {
								    callback.receiveErrordFUFileView(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUFileView(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[11].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[11].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUSpace
                     * @param dFUSpaceRequest24
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse dFUSpace(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest dFUSpaceRequest24)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUSpace?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSpaceRequest24,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSpace")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSpace"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUSpace
                    * @param dFUSpaceRequest24
                
                */
                public  void startdFUSpace(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest dFUSpaceRequest24,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUSpace?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUSpaceRequest24,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSpace")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUSpace"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUSpace(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUSpace(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUSpace"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUSpace((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUSpace(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUSpace(f);
                                            }
									    } else {
										    callback.receiveErrordFUSpace(f);
									    }
									} else {
									    callback.receiveErrordFUSpace(f);
									}
								} else {
								    callback.receiveErrordFUSpace(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUSpace(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[12].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[12].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#superfileList
                     * @param superfileListRequest26
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse superfileList(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest superfileListRequest26)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
              _operationClient.getOptions().setAction("WsDfu/SuperfileList?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileListRequest26,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileList")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileList"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startsuperfileList
                    * @param superfileListRequest26
                
                */
                public  void startsuperfileList(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest superfileListRequest26,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
             _operationClient.getOptions().setAction("WsDfu/SuperfileList?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    superfileListRequest26,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileList")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "superfileList"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultsuperfileList(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorsuperfileList(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SuperfileList"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrorsuperfileList((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrorsuperfileList(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorsuperfileList(f);
                                            }
									    } else {
										    callback.receiveErrorsuperfileList(f);
									    }
									} else {
									    callback.receiveErrorsuperfileList(f);
									}
								} else {
								    callback.receiveErrorsuperfileList(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorsuperfileList(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[13].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[13].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUInfo
                     * @param dFUInfoRequest28
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse dFUInfo(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest dFUInfoRequest28)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUInfo?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUInfoRequest28,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUInfo")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUInfo"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUInfo
                    * @param dFUInfoRequest28
                
                */
                public  void startdFUInfo(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest dFUInfoRequest28,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUInfo?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUInfoRequest28,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUInfo")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUInfo"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUInfo(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUInfo(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUInfo"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUInfo((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUInfo(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUInfo(f);
                                            }
									    } else {
										    callback.receiveErrordFUInfo(f);
									    }
									} else {
									    callback.receiveErrordFUInfo(f);
									}
								} else {
								    callback.receiveErrordFUInfo(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUInfo(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[14].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[14].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUDefFile
                     * @param dFUDefFileRequest30
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse dFUDefFile(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest dFUDefFileRequest30)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUDefFile?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUDefFileRequest30,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUDefFile")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUDefFile"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUDefFile
                    * @param dFUDefFileRequest30
                
                */
                public  void startdFUDefFile(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest dFUDefFileRequest30,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUDefFile?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUDefFileRequest30,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUDefFile")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUDefFile"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUDefFile(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUDefFile(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUDefFile"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUDefFile((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUDefFile(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUDefFile(f);
                                            }
									    } else {
										    callback.receiveErrordFUDefFile(f);
									    }
									} else {
									    callback.receiveErrordFUDefFile(f);
									}
								} else {
								    callback.receiveErrordFUDefFile(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUDefFile(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[15].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[15].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see org.hpccsystems.ws.wsdfu.WsDfu#dFUBrowseData
                     * @param dFUBrowseDataRequest32
                    
                     * @throws org.hpccsystems.ws.wsdfu.EspSoapFault : 
                     */

                    

                            public  org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse dFUBrowseData(

                            org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest dFUBrowseDataRequest32)
                        

                    throws java.rmi.RemoteException
                    
                    
                        ,org.hpccsystems.ws.wsdfu.EspSoapFault{
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
              _operationClient.getOptions().setAction("WsDfu/DFUBrowseData?ver_=1.19");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUBrowseDataRequest32,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUBrowseData")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUBrowseData"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        
                        if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
                          throw (org.hpccsystems.ws.wsdfu.EspSoapFault)ex;
                        }
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see org.hpccsystems.ws.wsdfu.WsDfu#startdFUBrowseData
                    * @param dFUBrowseDataRequest32
                
                */
                public  void startdFUBrowseData(

                 org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest dFUBrowseDataRequest32,

                  final org.hpccsystems.ws.wsdfu.WsDfuCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
             _operationClient.getOptions().setAction("WsDfu/DFUBrowseData?ver_=1.19");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    dFUBrowseDataRequest32,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUBrowseData")), new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                    "dFUBrowseData"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultdFUBrowseData(
                                        (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrordFUBrowseData(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"DFUBrowseData"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.hpccsystems.ws.wsdfu.EspSoapFault){
														callback.receiveErrordFUBrowseData((org.hpccsystems.ws.wsdfu.EspSoapFault)ex);
											            return;
										            }
										            
					
										            callback.receiveErrordFUBrowseData(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrordFUBrowseData(f);
                                            }
									    } else {
										    callback.receiveErrordFUBrowseData(f);
									    }
									} else {
									    callback.receiveErrordFUBrowseData(f);
									}
								} else {
								    callback.receiveErrordFUBrowseData(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrordFUBrowseData(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[16].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[16].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //http://10.241.3.241:8010/WsDfu?ver_=1.19
        public static class DFUArrayActionRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUArrayActionRequest",
                "ns1");

            

                        /**
                        * field for Type
                        */

                        
                                    protected java.lang.String localType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTypeTracker = false ;

                           public boolean isTypeSpecified(){
                               return localTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType(){
                               return localType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type
                               */
                               public void setType(java.lang.String param){
                            localTypeTracker = param != null;
                                   
                                            this.localType=param;
                                    

                               }
                            

                        /**
                        * field for NoDelete
                        */

                        
                                    protected boolean localNoDelete ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNoDeleteTracker = false ;

                           public boolean isNoDeleteSpecified(){
                               return localNoDeleteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getNoDelete(){
                               return localNoDelete;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NoDelete
                               */
                               public void setNoDelete(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localNoDeleteTracker =
                                       true;
                                   
                                            this.localNoDelete=param;
                                    

                               }
                            

                        /**
                        * field for BackToPage
                        */

                        
                                    protected java.lang.String localBackToPage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBackToPageTracker = false ;

                           public boolean isBackToPageSpecified(){
                               return localBackToPageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBackToPage(){
                               return localBackToPage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BackToPage
                               */
                               public void setBackToPage(java.lang.String param){
                            localBackToPageTracker = param != null;
                                   
                                            this.localBackToPage=param;
                                    

                               }
                            

                        /**
                        * field for LogicalFiles
                        */

                        
                                    protected EspStringArray localLogicalFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalFilesTracker = false ;

                           public boolean isLogicalFilesSpecified(){
                               return localLogicalFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspStringArray
                           */
                           public  EspStringArray getLogicalFiles(){
                               return localLogicalFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalFiles
                               */
                               public void setLogicalFiles(EspStringArray param){
                            localLogicalFilesTracker = param != null;
                                   
                                            this.localLogicalFiles=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUArrayActionRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUArrayActionRequest",
                           xmlWriter);
                   }

               
                   }
                if (localTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Type", xmlWriter);
                             

                                          if (localType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Type cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNoDeleteTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NoDelete", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NoDelete cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoDelete));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBackToPageTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BackToPage", xmlWriter);
                             

                                          if (localBackToPage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBackToPage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalFilesTracker){
                                            if (localLogicalFiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("LogicalFiles cannot be null!!");
                                            }
                                           localLogicalFiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalFiles"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Type"));
                                 
                                        if (localType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Type cannot be null!!");
                                        }
                                    } if (localNoDeleteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NoDelete"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNoDelete));
                            } if (localBackToPageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BackToPage"));
                                 
                                        if (localBackToPage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBackToPage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                        }
                                    } if (localLogicalFilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalFiles"));
                            
                            
                                    if (localLogicalFiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("LogicalFiles cannot be null!!");
                                    }
                                    elementList.add(localLogicalFiles);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUArrayActionRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUArrayActionRequest object =
                new DFUArrayActionRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUArrayActionRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUArrayActionRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Type").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NoDelete").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NoDelete" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNoDelete(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BackToPage").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BackToPage" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBackToPage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalFiles").equals(reader.getName())){
                                
                                                object.setLogicalFiles(EspStringArray.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ArrayOfDFUPart
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ArrayOfDFUPart
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for DFUPart
                        * This was an Array!
                        */

                        
                                    protected DFUPart[] localDFUPart ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUPartTracker = false ;

                           public boolean isDFUPartSpecified(){
                               return localDFUPartTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUPart[]
                           */
                           public  DFUPart[] getDFUPart(){
                               return localDFUPart;
                           }

                           
                        


                               
                              /**
                               * validate the array for DFUPart
                               */
                              protected void validateDFUPart(DFUPart[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DFUPart
                              */
                              public void setDFUPart(DFUPart[] param){
                              
                                   validateDFUPart(param);

                               localDFUPartTracker = param != null;
                                      
                                      this.localDFUPart=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFUPart
                             */
                             public void addDFUPart(DFUPart param){
                                   if (localDFUPart == null){
                                   localDFUPart = new DFUPart[]{};
                                   }

                            
                                 //update the setting tracker
                                localDFUPartTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDFUPart);
                               list.add(param);
                               this.localDFUPart =
                             (DFUPart[])list.toArray(
                            new DFUPart[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ArrayOfDFUPart",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ArrayOfDFUPart",
                           xmlWriter);
                   }

               
                   }
                if (localDFUPartTracker){
                                       if (localDFUPart!=null){
                                            for (int i = 0;i < localDFUPart.length;i++){
                                                if (localDFUPart[i] != null){
                                                 localDFUPart[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUPart"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DFUPart cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDFUPartTracker){
                             if (localDFUPart!=null) {
                                 for (int i = 0;i < localDFUPart.length;i++){

                                    if (localDFUPart[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "DFUPart"));
                                         elementList.add(localDFUPart[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DFUPart cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ArrayOfDFUPart parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ArrayOfDFUPart object =
                new ArrayOfDFUPart();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ArrayOfDFUPart".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfDFUPart)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUPart").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFUPart.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUPart").equals(reader.getName())){
                                                                    list1.add(DFUPart.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDFUPart((DFUPart[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFUPart.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUGetDataColumnsRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUGetDataColumnsRequest",
                "ns1");

            

                        /**
                        * field for OpenLogicalName
                        */

                        
                                    protected java.lang.String localOpenLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenLogicalNameTracker = false ;

                           public boolean isOpenLogicalNameSpecified(){
                               return localOpenLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenLogicalName(){
                               return localOpenLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenLogicalName
                               */
                               public void setOpenLogicalName(java.lang.String param){
                            localOpenLogicalNameTracker = param != null;
                                   
                                            this.localOpenLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for FilterBy
                        */

                        
                                    protected java.lang.String localFilterBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterByTracker = false ;

                           public boolean isFilterBySpecified(){
                               return localFilterByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterBy(){
                               return localFilterBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterBy
                               */
                               public void setFilterBy(java.lang.String param){
                            localFilterByTracker = param != null;
                                   
                                            this.localFilterBy=param;
                                    

                               }
                            

                        /**
                        * field for ShowColumns
                        */

                        
                                    protected java.lang.String localShowColumns ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowColumnsTracker = false ;

                           public boolean isShowColumnsSpecified(){
                               return localShowColumnsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowColumns(){
                               return localShowColumns;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowColumns
                               */
                               public void setShowColumns(java.lang.String param){
                            localShowColumnsTracker = param != null;
                                   
                                            this.localShowColumns=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

                        /**
                        * field for StartIndex
                        */

                        
                                    protected long localStartIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartIndexTracker = false ;

                           public boolean isStartIndexSpecified(){
                               return localStartIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartIndex(){
                               return localStartIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartIndex
                               */
                               public void setStartIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartIndex=param;
                                    

                               }
                            

                        /**
                        * field for EndIndex
                        */

                        
                                    protected long localEndIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndIndexTracker = false ;

                           public boolean isEndIndexSpecified(){
                               return localEndIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getEndIndex(){
                               return localEndIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndIndex
                               */
                               public void setEndIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localEndIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localEndIndex=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUGetDataColumnsRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUGetDataColumnsRequest",
                           xmlWriter);
                   }

               
                   }
                if (localOpenLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OpenLogicalName", xmlWriter);
                             

                                          if (localOpenLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterBy", xmlWriter);
                             

                                          if (localFilterBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowColumnsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowColumns", xmlWriter);
                             

                                          if (localShowColumns==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowColumns);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartIndex", xmlWriter);
                             
                                               if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndIndex", xmlWriter);
                             
                                               if (localEndIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EndIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localOpenLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OpenLogicalName"));
                                 
                                        if (localOpenLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                        }
                                    } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localFilterByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterBy"));
                                 
                                        if (localFilterBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                        }
                                    } if (localShowColumnsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowColumns"));
                                 
                                        if (localShowColumns != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowColumns));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                        }
                                    } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    } if (localStartIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                            } if (localEndIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUGetDataColumnsRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUGetDataColumnsRequest object =
                new DFUGetDataColumnsRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUGetDataColumnsRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUGetDataColumnsRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OpenLogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OpenLogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowColumns").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowColumns" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowColumns(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ArrayOfEspException
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ArrayOfEspException
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Source
                        */

                        
                                    protected java.lang.String localSource ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSourceTracker = false ;

                           public boolean isSourceSpecified(){
                               return localSourceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource(){
                               return localSource;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source
                               */
                               public void setSource(java.lang.String param){
                            localSourceTracker = param != null;
                                   
                                            this.localSource=param;
                                    

                               }
                            

                        /**
                        * field for Exception
                        * This was an Array!
                        */

                        
                                    protected EspException[] localException ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionTracker = false ;

                           public boolean isExceptionSpecified(){
                               return localExceptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspException[]
                           */
                           public  EspException[] getException(){
                               return localException;
                           }

                           
                        


                               
                              /**
                               * validate the array for Exception
                               */
                              protected void validateException(EspException[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param Exception
                              */
                              public void setException(EspException[] param){
                              
                                   validateException(param);

                               localExceptionTracker = param != null;
                                      
                                      this.localException=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param EspException
                             */
                             public void addException(EspException param){
                                   if (localException == null){
                                   localException = new EspException[]{};
                                   }

                            
                                 //update the setting tracker
                                localExceptionTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localException);
                               list.add(param);
                               this.localException =
                             (EspException[])list.toArray(
                            new EspException[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ArrayOfEspException",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ArrayOfEspException",
                           xmlWriter);
                   }

               
                   }
                if (localSourceTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Source", xmlWriter);
                             

                                          if (localSource==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localExceptionTracker){
                                       if (localException!=null){
                                            for (int i = 0;i < localException.length;i++){
                                                if (localException[i] != null){
                                                 localException[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exception"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("Exception cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localSourceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Source"));
                                 
                                        if (localSource != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source cannot be null!!");
                                        }
                                    } if (localExceptionTracker){
                             if (localException!=null) {
                                 for (int i = 0;i < localException.length;i++){

                                    if (localException[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "Exception"));
                                         elementList.add(localException[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("Exception cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ArrayOfEspException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ArrayOfEspException object =
                new ArrayOfEspException();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ArrayOfEspException".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfEspException)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list2 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Source").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exception").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list2.add(EspException.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone2 = false;
                                                        while(!loopDone2){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone2 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exception").equals(reader.getName())){
                                                                    list2.add(EspException.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone2 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setException((EspException[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                EspException.class,
                                                                list2));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUBrowseDataRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUBrowseDataRequest",
                "ns1");

            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for FilterBy
                        */

                        
                                    protected java.lang.String localFilterBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterByTracker = false ;

                           public boolean isFilterBySpecified(){
                               return localFilterByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterBy(){
                               return localFilterBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterBy
                               */
                               public void setFilterBy(java.lang.String param){
                            localFilterByTracker = param != null;
                                   
                                            this.localFilterBy=param;
                                    

                               }
                            

                        /**
                        * field for ShowColumns
                        */

                        
                                    protected java.lang.String localShowColumns ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowColumnsTracker = false ;

                           public boolean isShowColumnsSpecified(){
                               return localShowColumnsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowColumns(){
                               return localShowColumns;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowColumns
                               */
                               public void setShowColumns(java.lang.String param){
                            localShowColumnsTracker = param != null;
                                   
                                            this.localShowColumns=param;
                                    

                               }
                            

                        /**
                        * field for SchemaOnly
                        */

                        
                                    protected boolean localSchemaOnly =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSchemaOnlyTracker = false ;

                           public boolean isSchemaOnlySpecified(){
                               return localSchemaOnlyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSchemaOnly(){
                               return localSchemaOnly;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SchemaOnly
                               */
                               public void setSchemaOnly(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localSchemaOnlyTracker =
                                       true;
                                   
                                            this.localSchemaOnly=param;
                                    

                               }
                            

                        /**
                        * field for StartForGoback
                        */

                        
                                    protected long localStartForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartForGobackTracker = false ;

                           public boolean isStartForGobackSpecified(){
                               return localStartForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartForGoback(){
                               return localStartForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartForGoback
                               */
                               public void setStartForGoback(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartForGobackTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartForGoback=param;
                                    

                               }
                            

                        /**
                        * field for CountForGoback
                        */

                        
                                    protected int localCountForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountForGobackTracker = false ;

                           public boolean isCountForGobackSpecified(){
                               return localCountForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCountForGoback(){
                               return localCountForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountForGoback
                               */
                               public void setCountForGoback(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountForGobackTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCountForGoback=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

                        /**
                        * field for ParentName
                        */

                        
                                    protected java.lang.String localParentName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localParentNameTracker = false ;

                           public boolean isParentNameSpecified(){
                               return localParentNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParentName(){
                               return localParentName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ParentName
                               */
                               public void setParentName(java.lang.String param){
                            localParentNameTracker = param != null;
                                   
                                            this.localParentName=param;
                                    

                               }
                            

                        /**
                        * field for Start
                        */

                        
                                    protected long localStart ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartTracker = false ;

                           public boolean isStartSpecified(){
                               return localStartTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStart(){
                               return localStart;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Start
                               */
                               public void setStart(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStart=param;
                                    

                               }
                            

                        /**
                        * field for Count
                        */

                        
                                    protected int localCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountTracker = false ;

                           public boolean isCountSpecified(){
                               return localCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCount(){
                               return localCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Count
                               */
                               public void setCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCount=param;
                                    

                               }
                            

                        /**
                        * field for DisableUppercaseTranslation
                        */

                        
                                    protected boolean localDisableUppercaseTranslation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisableUppercaseTranslationTracker = false ;

                           public boolean isDisableUppercaseTranslationSpecified(){
                               return localDisableUppercaseTranslationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDisableUppercaseTranslation(){
                               return localDisableUppercaseTranslation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisableUppercaseTranslation
                               */
                               public void setDisableUppercaseTranslation(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDisableUppercaseTranslationTracker =
                                       true;
                                   
                                            this.localDisableUppercaseTranslation=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUBrowseDataRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUBrowseDataRequest",
                           xmlWriter);
                   }

               
                   }
                if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterBy", xmlWriter);
                             

                                          if (localFilterBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowColumnsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowColumns", xmlWriter);
                             

                                          if (localShowColumns==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowColumns);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSchemaOnlyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SchemaOnly", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("SchemaOnly cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartForGoback", xmlWriter);
                             
                                               if (localStartForGoback==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountForGoback", xmlWriter);
                             
                                               if (localCountForGoback==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("CountForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localParentNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ParentName", xmlWriter);
                             

                                          if (localParentName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParentName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Start", xmlWriter);
                             
                                               if (localStart==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Start cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Count", xmlWriter);
                             
                                               if (localCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Count cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDisableUppercaseTranslationTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "DisableUppercaseTranslation", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("DisableUppercaseTranslation cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localFilterByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterBy"));
                                 
                                        if (localFilterBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                        }
                                    } if (localShowColumnsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowColumns"));
                                 
                                        if (localShowColumns != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowColumns));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                        }
                                    } if (localSchemaOnlyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SchemaOnly"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                            } if (localStartForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                            } if (localCountForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                            } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    } if (localParentNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ParentName"));
                                 
                                        if (localParentName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                        }
                                    } if (localStartTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Start"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                            } if (localCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Count"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                            } if (localDisableUppercaseTranslationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DisableUppercaseTranslation"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUBrowseDataRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUBrowseDataRequest object =
                new DFUBrowseDataRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUBrowseDataRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUBrowseDataRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowColumns").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowColumns" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowColumns(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SchemaOnly").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SchemaOnly" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSchemaOnly(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ParentName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ParentName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParentName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Start").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Start" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStart(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Count").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Count" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DisableUppercaseTranslation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"DisableUppercaseTranslation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisableUppercaseTranslation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ClusterNames_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ClusterNames_type0
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for ClusterName
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localClusterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterNameTracker = false ;

                           public boolean isClusterNameSpecified(){
                               return localClusterNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getClusterName(){
                               return localClusterName;
                           }

                           
                        


                               
                              /**
                               * validate the array for ClusterName
                               */
                              protected void validateClusterName(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param ClusterName
                              */
                              public void setClusterName(java.lang.String[] param){
                              
                                   validateClusterName(param);

                               localClusterNameTracker = param != null;
                                      
                                      this.localClusterName=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addClusterName(java.lang.String param){
                                   if (localClusterName == null){
                                   localClusterName = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localClusterNameTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localClusterName);
                               list.add(param);
                               this.localClusterName =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ClusterNames_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ClusterNames_type0",
                           xmlWriter);
                   }

               
                   }
                if (localClusterNameTracker){
                             if (localClusterName!=null) {
                                   namespace = "urn:hpccsystems:ws:wsdfu";
                                   for (int i = 0;i < localClusterName.length;i++){
                                        
                                            if (localClusterName[i] != null){
                                        
                                                writeStartElement(null, namespace, "ClusterName", xmlWriter);

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterName[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // we have to do nothing since minOccurs is zero
                                                       
                                                }

                                   }
                             } else {
                                 
                                         throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localClusterNameTracker){
                            if (localClusterName!=null){
                                  for (int i = 0;i < localClusterName.length;i++){
                                      
                                         if (localClusterName[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                              "ClusterName"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterName[i]));
                                          } else {
                                             
                                                    // have to do nothing
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ClusterNames_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ClusterNames_type0 object =
                new ClusterNames_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ClusterNames_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ClusterNames_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterName").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(reader.getElementText());
                                            
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone1 = false;
                                            while(!loopDone1){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone1 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterName").equals(reader.getName())){
                                                         list1.add(reader.getElementText());
                                                        
                                                    }else{
                                                        loopDone1 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setClusterName((java.lang.String[])
                                                        list1.toArray(new java.lang.String[list1.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SavexmlResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SavexmlResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Xmlmap
                        */

                        
                                    protected javax.activation.DataHandler localXmlmap ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localXmlmapTracker = false ;

                           public boolean isXmlmapSpecified(){
                               return localXmlmapTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return javax.activation.DataHandler
                           */
                           public  javax.activation.DataHandler getXmlmap(){
                               return localXmlmap;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Xmlmap
                               */
                               public void setXmlmap(javax.activation.DataHandler param){
                            localXmlmapTracker = param != null;
                                   
                                            this.localXmlmap=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SavexmlResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SavexmlResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localXmlmapTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "xmlmap", xmlWriter);
                             
                                        
                                    if (localXmlmap!=null)  {
                                       try {
                                           org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localXmlmap, null, true);
                                       } catch (java.io.IOException ex) {
                                           throw new javax.xml.stream.XMLStreamException("Unable to read data handler for xmlmap", ex);
                                       }
                                    } else {
                                         
                                    }
                                 
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localXmlmapTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                        "xmlmap"));
                                
                            elementList.add(localXmlmap);
                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SavexmlResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SavexmlResponse object =
                new SavexmlResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SavexmlResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SavexmlResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","xmlmap").equals(reader.getName())){
                                
                                            object.setXmlmap(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddRequest",
                "ns1");

            

                        /**
                        * field for Dstname
                        */

                        
                                    protected java.lang.String localDstname ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDstnameTracker = false ;

                           public boolean isDstnameSpecified(){
                               return localDstnameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDstname(){
                               return localDstname;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Dstname
                               */
                               public void setDstname(java.lang.String param){
                            localDstnameTracker = param != null;
                                   
                                            this.localDstname=param;
                                    

                               }
                            

                        /**
                        * field for Xmlmap
                        */

                        
                                    protected javax.activation.DataHandler localXmlmap ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localXmlmapTracker = false ;

                           public boolean isXmlmapSpecified(){
                               return localXmlmapTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return javax.activation.DataHandler
                           */
                           public  javax.activation.DataHandler getXmlmap(){
                               return localXmlmap;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Xmlmap
                               */
                               public void setXmlmap(javax.activation.DataHandler param){
                            localXmlmapTracker = param != null;
                                   
                                            this.localXmlmap=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddRequest",
                           xmlWriter);
                   }

               
                   }
                if (localDstnameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "dstname", xmlWriter);
                             

                                          if (localDstname==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("dstname cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDstname);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localXmlmapTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "xmlmap", xmlWriter);
                             
                                        
                                    if (localXmlmap!=null)  {
                                       try {
                                           org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localXmlmap, null, true);
                                       } catch (java.io.IOException ex) {
                                           throw new javax.xml.stream.XMLStreamException("Unable to read data handler for xmlmap", ex);
                                       }
                                    } else {
                                         
                                    }
                                 
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDstnameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "dstname"));
                                 
                                        if (localDstname != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstname));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("dstname cannot be null!!");
                                        }
                                    } if (localXmlmapTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                        "xmlmap"));
                                
                            elementList.add(localXmlmap);
                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddRequest object =
                new AddRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","dstname").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"dstname" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDstname(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","xmlmap").equals(reader.getName())){
                                
                                            object.setXmlmap(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddResponse object =
                new AddResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ExtensionMapper{

          public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                       java.lang.String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "Graphs_type0".equals(typeName)){
                   
                            return  Graphs_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "EspException".equals(typeName)){
                   
                            return  EspException.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ArrayOfDFUPart".equals(typeName)){
                   
                            return  ArrayOfDFUPart.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFUFileDetail".equals(typeName)){
                   
                            return  DFUFileDetail.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ArrayOfEspException".equals(typeName)){
                   
                            return  ArrayOfEspException.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "EspStringArray".equals(typeName)){
                   
                            return  EspStringArray.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFUSpaceItem".equals(typeName)){
                   
                            return  DFUSpaceItem.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "FileTypes_type0".equals(typeName)){
                   
                            return  FileTypes_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ClusterNames_type0".equals(typeName)){
                   
                            return  ClusterNames_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFULogicalFile".equals(typeName)){
                   
                            return  DFULogicalFile.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFUFileStat".equals(typeName)){
                   
                            return  DFUFileStat.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ColumnsHidden_type1".equals(typeName)){
                   
                            return  ColumnsHidden_type1.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ColumnsHidden_type0".equals(typeName)){
                   
                            return  ColumnsHidden_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "SubfileNames_type0".equals(typeName)){
                   
                            return  SubfileNames_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ArrayOfDFUSpaceItem".equals(typeName)){
                   
                            return  ArrayOfDFUSpaceItem.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ArrayOfDFULogicalFile".equals(typeName)){
                   
                            return  ArrayOfDFULogicalFile.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFUPart".equals(typeName)){
                   
                            return  DFUPart.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "ArrayOfDFUDataColumn".equals(typeName)){
                   
                            return  ArrayOfDFUDataColumn.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:hpccsystems:ws:wsdfu".equals(namespaceURI) &&
                  "DFUDataColumn".equals(typeName)){
                   
                            return  DFUDataColumn.Factory.parse(reader);
                        

                  }

              
             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }
    
        public static class DFUDefFileResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUDefFileResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for DefFile
                        */

                        
                                    protected javax.activation.DataHandler localDefFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDefFileTracker = false ;

                           public boolean isDefFileSpecified(){
                               return localDefFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return javax.activation.DataHandler
                           */
                           public  javax.activation.DataHandler getDefFile(){
                               return localDefFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DefFile
                               */
                               public void setDefFile(javax.activation.DataHandler param){
                            localDefFileTracker = param != null;
                                   
                                            this.localDefFile=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUDefFileResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUDefFileResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localDefFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "defFile", xmlWriter);
                             
                                        
                                    if (localDefFile!=null)  {
                                       try {
                                           org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, localDefFile, null, true);
                                       } catch (java.io.IOException ex) {
                                           throw new javax.xml.stream.XMLStreamException("Unable to read data handler for defFile", ex);
                                       }
                                    } else {
                                         
                                    }
                                 
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localDefFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                        "defFile"));
                                
                            elementList.add(localDefFile);
                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUDefFileResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUDefFileResponse object =
                new DFUDefFileResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUDefFileResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUDefFileResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","defFile").equals(reader.getName())){
                                
                                            object.setDefFile(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(reader));
                                      
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileListResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileListResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected EspStringArray localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspStringArray
                           */
                           public  EspStringArray getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(EspStringArray param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileListResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileListResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfilesTracker){
                                            if (localSubfiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                            }
                                           localSubfiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    } if (localSubfilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "subfiles"));
                            
                            
                                    if (localSubfiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                    }
                                    elementList.add(localSubfiles);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileListResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileListResponse object =
                new SuperfileListResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileListResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileListResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles").equals(reader.getName())){
                                
                                                object.setSubfiles(EspStringArray.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ArrayOfDFULogicalFile
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ArrayOfDFULogicalFile
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for DFULogicalFile
                        * This was an Array!
                        */

                        
                                    protected DFULogicalFile[] localDFULogicalFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFULogicalFileTracker = false ;

                           public boolean isDFULogicalFileSpecified(){
                               return localDFULogicalFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFULogicalFile[]
                           */
                           public  DFULogicalFile[] getDFULogicalFile(){
                               return localDFULogicalFile;
                           }

                           
                        


                               
                              /**
                               * validate the array for DFULogicalFile
                               */
                              protected void validateDFULogicalFile(DFULogicalFile[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DFULogicalFile
                              */
                              public void setDFULogicalFile(DFULogicalFile[] param){
                              
                                   validateDFULogicalFile(param);

                               localDFULogicalFileTracker = param != null;
                                      
                                      this.localDFULogicalFile=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFULogicalFile
                             */
                             public void addDFULogicalFile(DFULogicalFile param){
                                   if (localDFULogicalFile == null){
                                   localDFULogicalFile = new DFULogicalFile[]{};
                                   }

                            
                                 //update the setting tracker
                                localDFULogicalFileTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDFULogicalFile);
                               list.add(param);
                               this.localDFULogicalFile =
                             (DFULogicalFile[])list.toArray(
                            new DFULogicalFile[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ArrayOfDFULogicalFile",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ArrayOfDFULogicalFile",
                           xmlWriter);
                   }

               
                   }
                if (localDFULogicalFileTracker){
                                       if (localDFULogicalFile!=null){
                                            for (int i = 0;i < localDFULogicalFile.length;i++){
                                                if (localDFULogicalFile[i] != null){
                                                 localDFULogicalFile[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFile"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DFULogicalFile cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDFULogicalFileTracker){
                             if (localDFULogicalFile!=null) {
                                 for (int i = 0;i < localDFULogicalFile.length;i++){

                                    if (localDFULogicalFile[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "DFULogicalFile"));
                                         elementList.add(localDFULogicalFile[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DFULogicalFile cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ArrayOfDFULogicalFile parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ArrayOfDFULogicalFile object =
                new ArrayOfDFULogicalFile();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ArrayOfDFULogicalFile".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfDFULogicalFile)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFile").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFULogicalFile.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFile").equals(reader.getName())){
                                                                    list1.add(DFULogicalFile.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDFULogicalFile((DFULogicalFile[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFULogicalFile.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUPart
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFUPart
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Id
                        */

                        
                                    protected int localId ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIdTracker = false ;

                           public boolean isIdSpecified(){
                               return localIdTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getId(){
                               return localId;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Id
                               */
                               public void setId(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localIdTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localId=param;
                                    

                               }
                            

                        /**
                        * field for Copy
                        */

                        
                                    protected int localCopy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCopyTracker = false ;

                           public boolean isCopySpecified(){
                               return localCopyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCopy(){
                               return localCopy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Copy
                               */
                               public void setCopy(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCopyTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCopy=param;
                                    

                               }
                            

                        /**
                        * field for ActualSize
                        */

                        
                                    protected java.lang.String localActualSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localActualSizeTracker = false ;

                           public boolean isActualSizeSpecified(){
                               return localActualSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getActualSize(){
                               return localActualSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ActualSize
                               */
                               public void setActualSize(java.lang.String param){
                            localActualSizeTracker = param != null;
                                   
                                            this.localActualSize=param;
                                    

                               }
                            

                        /**
                        * field for Ip
                        */

                        
                                    protected java.lang.String localIp ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIpTracker = false ;

                           public boolean isIpSpecified(){
                               return localIpTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIp(){
                               return localIp;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Ip
                               */
                               public void setIp(java.lang.String param){
                            localIpTracker = param != null;
                                   
                                            this.localIp=param;
                                    

                               }
                            

                        /**
                        * field for Partsize
                        */

                        
                                    protected java.lang.String localPartsize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartsizeTracker = false ;

                           public boolean isPartsizeSpecified(){
                               return localPartsizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPartsize(){
                               return localPartsize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Partsize
                               */
                               public void setPartsize(java.lang.String param){
                            localPartsizeTracker = param != null;
                                   
                                            this.localPartsize=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUPart",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUPart",
                           xmlWriter);
                   }

               
                   }
                if (localIdTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Id", xmlWriter);
                             
                                               if (localId==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Id cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCopyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Copy", xmlWriter);
                             
                                               if (localCopy==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Copy cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCopy));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localActualSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ActualSize", xmlWriter);
                             

                                          if (localActualSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ActualSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localActualSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIpTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Ip", xmlWriter);
                             

                                          if (localIp==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Ip cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIp);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPartsizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Partsize", xmlWriter);
                             

                                          if (localPartsize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Partsize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPartsize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localIdTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Id"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localId));
                            } if (localCopyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Copy"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCopy));
                            } if (localActualSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ActualSize"));
                                 
                                        if (localActualSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ActualSize cannot be null!!");
                                        }
                                    } if (localIpTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Ip"));
                                 
                                        if (localIp != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIp));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Ip cannot be null!!");
                                        }
                                    } if (localPartsizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Partsize"));
                                 
                                        if (localPartsize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPartsize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Partsize cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUPart parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUPart object =
                new DFUPart();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUPart".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUPart)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Id").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Id" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setId(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Copy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Copy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCopy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ActualSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ActualSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setActualSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Ip").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Ip" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIp(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Partsize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Partsize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPartsize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUInfoRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUInfoRequest",
                "ns1");

            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for UpdateDescription
                        */

                        
                                    protected boolean localUpdateDescription =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUpdateDescriptionTracker = false ;

                           public boolean isUpdateDescriptionSpecified(){
                               return localUpdateDescriptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getUpdateDescription(){
                               return localUpdateDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UpdateDescription
                               */
                               public void setUpdateDescription(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localUpdateDescriptionTracker =
                                       true;
                                   
                                            this.localUpdateDescription=param;
                                    

                               }
                            

                        /**
                        * field for FileName
                        */

                        
                                    protected java.lang.String localFileName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileNameTracker = false ;

                           public boolean isFileNameSpecified(){
                               return localFileNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileName(){
                               return localFileName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileName
                               */
                               public void setFileName(java.lang.String param){
                            localFileNameTracker = param != null;
                                   
                                            this.localFileName=param;
                                    

                               }
                            

                        /**
                        * field for FileDesc
                        */

                        
                                    protected java.lang.String localFileDesc ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileDescTracker = false ;

                           public boolean isFileDescSpecified(){
                               return localFileDescTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileDesc(){
                               return localFileDesc;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileDesc
                               */
                               public void setFileDesc(java.lang.String param){
                            localFileDescTracker = param != null;
                                   
                                            this.localFileDesc=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUInfoRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUInfoRequest",
                           xmlWriter);
                   }

               
                   }
                if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUpdateDescriptionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "UpdateDescription", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("UpdateDescription cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdateDescription));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileName", xmlWriter);
                             

                                          if (localFileName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FileName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileDescTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileDesc", xmlWriter);
                             

                                          if (localFileDesc==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FileDesc cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileDesc);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localUpdateDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "UpdateDescription"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUpdateDescription));
                            } if (localFileNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileName"));
                                 
                                        if (localFileName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FileName cannot be null!!");
                                        }
                                    } if (localFileDescTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileDesc"));
                                 
                                        if (localFileDesc != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileDesc));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FileDesc cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUInfoRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUInfoRequest object =
                new DFUInfoRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUInfoRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUInfoRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","UpdateDescription").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"UpdateDescription" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUpdateDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileDesc").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileDesc" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileDesc(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileActionRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileActionRequest",
                "ns1");

            

                        /**
                        * field for Action
                        */

                        
                                    protected java.lang.String localAction ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localActionTracker = false ;

                           public boolean isActionSpecified(){
                               return localActionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAction(){
                               return localAction;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Action
                               */
                               public void setAction(java.lang.String param){
                            localActionTracker = param != null;
                                   
                                            this.localAction=param;
                                    

                               }
                            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected EspStringArray localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspStringArray
                           */
                           public  EspStringArray getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(EspStringArray param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

                        /**
                        * field for Before
                        */

                        
                                    protected java.lang.String localBefore ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBeforeTracker = false ;

                           public boolean isBeforeSpecified(){
                               return localBeforeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBefore(){
                               return localBefore;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Before
                               */
                               public void setBefore(java.lang.String param){
                            localBeforeTracker = param != null;
                                   
                                            this.localBefore=param;
                                    

                               }
                            

                        /**
                        * field for Delete
                        */

                        
                                    protected boolean localDelete ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDeleteTracker = false ;

                           public boolean isDeleteSpecified(){
                               return localDeleteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDelete(){
                               return localDelete;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Delete
                               */
                               public void setDelete(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDeleteTracker =
                                       true;
                                   
                                            this.localDelete=param;
                                    

                               }
                            

                        /**
                        * field for RemoveSuperfile
                        */

                        
                                    protected boolean localRemoveSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRemoveSuperfileTracker = false ;

                           public boolean isRemoveSuperfileSpecified(){
                               return localRemoveSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRemoveSuperfile(){
                               return localRemoveSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RemoveSuperfile
                               */
                               public void setRemoveSuperfile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localRemoveSuperfileTracker =
                                       true;
                                   
                                            this.localRemoveSuperfile=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileActionRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileActionRequest",
                           xmlWriter);
                   }

               
                   }
                if (localActionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "action", xmlWriter);
                             

                                          if (localAction==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("action cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAction);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfilesTracker){
                                            if (localSubfiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                            }
                                           localSubfiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles"),
                                               xmlWriter);
                                        } if (localBeforeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "before", xmlWriter);
                             

                                          if (localBefore==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("before cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBefore);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDeleteTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "delete", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("delete cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelete));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRemoveSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "removeSuperfile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("removeSuperfile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemoveSuperfile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localActionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "action"));
                                 
                                        if (localAction != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAction));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("action cannot be null!!");
                                        }
                                    } if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    } if (localSubfilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "subfiles"));
                            
                            
                                    if (localSubfiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                    }
                                    elementList.add(localSubfiles);
                                } if (localBeforeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "before"));
                                 
                                        if (localBefore != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBefore));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("before cannot be null!!");
                                        }
                                    } if (localDeleteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "delete"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelete));
                            } if (localRemoveSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "removeSuperfile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemoveSuperfile));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileActionRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileActionRequest object =
                new SuperfileActionRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileActionRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileActionRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","action").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"action" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAction(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles").equals(reader.getName())){
                                
                                                object.setSubfiles(EspStringArray.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","before").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"before" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBefore(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","delete").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"delete" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDelete(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","removeSuperfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"removeSuperfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRemoveSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileAddRawRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileAddRawRequest",
                "ns1");

            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected java.lang.String localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(java.lang.String param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

                        /**
                        * field for Before
                        */

                        
                                    protected java.lang.String localBefore ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBeforeTracker = false ;

                           public boolean isBeforeSpecified(){
                               return localBeforeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBefore(){
                               return localBefore;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Before
                               */
                               public void setBefore(java.lang.String param){
                            localBeforeTracker = param != null;
                                   
                                            this.localBefore=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileAddRawRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileAddRawRequest",
                           xmlWriter);
                   }

               
                   }
                if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "subfiles", xmlWriter);
                             

                                          if (localSubfiles==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSubfiles);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBeforeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "before", xmlWriter);
                             

                                          if (localBefore==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("before cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBefore);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    } if (localSubfilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "subfiles"));
                                 
                                        if (localSubfiles != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubfiles));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                        }
                                    } if (localBeforeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "before"));
                                 
                                        if (localBefore != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBefore));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("before cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileAddRawRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileAddRawRequest object =
                new SuperfileAddRawRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileAddRawRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileAddRawRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"subfiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubfiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","before").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"before" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBefore(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUFileDetail
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFUFileDetail
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for Filename
                        */

                        
                                    protected java.lang.String localFilename ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilenameTracker = false ;

                           public boolean isFilenameSpecified(){
                               return localFilenameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilename(){
                               return localFilename;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Filename
                               */
                               public void setFilename(java.lang.String param){
                            localFilenameTracker = param != null;
                                   
                                            this.localFilename=param;
                                    

                               }
                            

                        /**
                        * field for Description
                        */

                        
                                    protected java.lang.String localDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescriptionTracker = false ;

                           public boolean isDescriptionSpecified(){
                               return localDescriptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDescription(){
                               return localDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Description
                               */
                               public void setDescription(java.lang.String param){
                            localDescriptionTracker = param != null;
                                   
                                            this.localDescription=param;
                                    

                               }
                            

                        /**
                        * field for Dir
                        */

                        
                                    protected java.lang.String localDir ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDirTracker = false ;

                           public boolean isDirSpecified(){
                               return localDirTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDir(){
                               return localDir;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Dir
                               */
                               public void setDir(java.lang.String param){
                            localDirTracker = param != null;
                                   
                                            this.localDir=param;
                                    

                               }
                            

                        /**
                        * field for PathMask
                        */

                        
                                    protected java.lang.String localPathMask ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPathMaskTracker = false ;

                           public boolean isPathMaskSpecified(){
                               return localPathMaskTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPathMask(){
                               return localPathMask;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PathMask
                               */
                               public void setPathMask(java.lang.String param){
                            localPathMaskTracker = param != null;
                                   
                                            this.localPathMask=param;
                                    

                               }
                            

                        /**
                        * field for Filesize
                        */

                        
                                    protected java.lang.String localFilesize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilesizeTracker = false ;

                           public boolean isFilesizeSpecified(){
                               return localFilesizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilesize(){
                               return localFilesize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Filesize
                               */
                               public void setFilesize(java.lang.String param){
                            localFilesizeTracker = param != null;
                                   
                                            this.localFilesize=param;
                                    

                               }
                            

                        /**
                        * field for ActualSize
                        */

                        
                                    protected java.lang.String localActualSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localActualSizeTracker = false ;

                           public boolean isActualSizeSpecified(){
                               return localActualSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getActualSize(){
                               return localActualSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ActualSize
                               */
                               public void setActualSize(java.lang.String param){
                            localActualSizeTracker = param != null;
                                   
                                            this.localActualSize=param;
                                    

                               }
                            

                        /**
                        * field for RecordSize
                        */

                        
                                    protected java.lang.String localRecordSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecordSizeTracker = false ;

                           public boolean isRecordSizeSpecified(){
                               return localRecordSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecordSize(){
                               return localRecordSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecordSize
                               */
                               public void setRecordSize(java.lang.String param){
                            localRecordSizeTracker = param != null;
                                   
                                            this.localRecordSize=param;
                                    

                               }
                            

                        /**
                        * field for RecordCount
                        */

                        
                                    protected java.lang.String localRecordCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecordCountTracker = false ;

                           public boolean isRecordCountSpecified(){
                               return localRecordCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecordCount(){
                               return localRecordCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecordCount
                               */
                               public void setRecordCount(java.lang.String param){
                            localRecordCountTracker = param != null;
                                   
                                            this.localRecordCount=param;
                                    

                               }
                            

                        /**
                        * field for Wuid
                        */

                        
                                    protected java.lang.String localWuid ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localWuidTracker = false ;

                           public boolean isWuidSpecified(){
                               return localWuidTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getWuid(){
                               return localWuid;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Wuid
                               */
                               public void setWuid(java.lang.String param){
                            localWuidTracker = param != null;
                                   
                                            this.localWuid=param;
                                    

                               }
                            

                        /**
                        * field for Owner
                        */

                        
                                    protected java.lang.String localOwner ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerTracker = false ;

                           public boolean isOwnerSpecified(){
                               return localOwnerTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwner(){
                               return localOwner;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Owner
                               */
                               public void setOwner(java.lang.String param){
                            localOwnerTracker = param != null;
                                   
                                            this.localOwner=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for JobName
                        */

                        
                                    protected java.lang.String localJobName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localJobNameTracker = false ;

                           public boolean isJobNameSpecified(){
                               return localJobNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getJobName(){
                               return localJobName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param JobName
                               */
                               public void setJobName(java.lang.String param){
                            localJobNameTracker = param != null;
                                   
                                            this.localJobName=param;
                                    

                               }
                            

                        /**
                        * field for Persistent
                        */

                        
                                    protected java.lang.String localPersistent ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPersistentTracker = false ;

                           public boolean isPersistentSpecified(){
                               return localPersistentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPersistent(){
                               return localPersistent;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Persistent
                               */
                               public void setPersistent(java.lang.String param){
                            localPersistentTracker = param != null;
                                   
                                            this.localPersistent=param;
                                    

                               }
                            

                        /**
                        * field for Format
                        */

                        
                                    protected java.lang.String localFormat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFormatTracker = false ;

                           public boolean isFormatSpecified(){
                               return localFormatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFormat(){
                               return localFormat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Format
                               */
                               public void setFormat(java.lang.String param){
                            localFormatTracker = param != null;
                                   
                                            this.localFormat=param;
                                    

                               }
                            

                        /**
                        * field for MaxRecordSize
                        */

                        
                                    protected java.lang.String localMaxRecordSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxRecordSizeTracker = false ;

                           public boolean isMaxRecordSizeSpecified(){
                               return localMaxRecordSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMaxRecordSize(){
                               return localMaxRecordSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxRecordSize
                               */
                               public void setMaxRecordSize(java.lang.String param){
                            localMaxRecordSizeTracker = param != null;
                                   
                                            this.localMaxRecordSize=param;
                                    

                               }
                            

                        /**
                        * field for CsvSeparate
                        */

                        
                                    protected java.lang.String localCsvSeparate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCsvSeparateTracker = false ;

                           public boolean isCsvSeparateSpecified(){
                               return localCsvSeparateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCsvSeparate(){
                               return localCsvSeparate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CsvSeparate
                               */
                               public void setCsvSeparate(java.lang.String param){
                            localCsvSeparateTracker = param != null;
                                   
                                            this.localCsvSeparate=param;
                                    

                               }
                            

                        /**
                        * field for CsvQuote
                        */

                        
                                    protected java.lang.String localCsvQuote ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCsvQuoteTracker = false ;

                           public boolean isCsvQuoteSpecified(){
                               return localCsvQuoteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCsvQuote(){
                               return localCsvQuote;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CsvQuote
                               */
                               public void setCsvQuote(java.lang.String param){
                            localCsvQuoteTracker = param != null;
                                   
                                            this.localCsvQuote=param;
                                    

                               }
                            

                        /**
                        * field for CsvTerminate
                        */

                        
                                    protected java.lang.String localCsvTerminate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCsvTerminateTracker = false ;

                           public boolean isCsvTerminateSpecified(){
                               return localCsvTerminateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCsvTerminate(){
                               return localCsvTerminate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CsvTerminate
                               */
                               public void setCsvTerminate(java.lang.String param){
                            localCsvTerminateTracker = param != null;
                                   
                                            this.localCsvTerminate=param;
                                    

                               }
                            

                        /**
                        * field for Modified
                        */

                        
                                    protected java.lang.String localModified ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedTracker = false ;

                           public boolean isModifiedSpecified(){
                               return localModifiedTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModified(){
                               return localModified;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modified
                               */
                               public void setModified(java.lang.String param){
                            localModifiedTracker = param != null;
                                   
                                            this.localModified=param;
                                    

                               }
                            

                        /**
                        * field for Ecl
                        */

                        
                                    protected java.lang.String localEcl ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEclTracker = false ;

                           public boolean isEclSpecified(){
                               return localEclTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEcl(){
                               return localEcl;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Ecl
                               */
                               public void setEcl(java.lang.String param){
                            localEclTracker = param != null;
                                   
                                            this.localEcl=param;
                                    

                               }
                            

                        /**
                        * field for ZipFile
                        */

                        
                                    protected boolean localZipFile =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localZipFileTracker = false ;

                           public boolean isZipFileSpecified(){
                               return localZipFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getZipFile(){
                               return localZipFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ZipFile
                               */
                               public void setZipFile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localZipFileTracker =
                                       true;
                                   
                                            this.localZipFile=param;
                                    

                               }
                            

                        /**
                        * field for Stat
                        */

                        
                                    protected DFUFileStat localStat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStatTracker = false ;

                           public boolean isStatSpecified(){
                               return localStatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUFileStat
                           */
                           public  DFUFileStat getStat(){
                               return localStat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Stat
                               */
                               public void setStat(DFUFileStat param){
                            localStatTracker = param != null;
                                   
                                            this.localStat=param;
                                    

                               }
                            

                        /**
                        * field for DFUFileParts
                        */

                        
                                    protected ArrayOfDFUPart localDFUFileParts ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUFilePartsTracker = false ;

                           public boolean isDFUFilePartsSpecified(){
                               return localDFUFilePartsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUPart
                           */
                           public  ArrayOfDFUPart getDFUFileParts(){
                               return localDFUFileParts;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUFileParts
                               */
                               public void setDFUFileParts(ArrayOfDFUPart param){
                            localDFUFilePartsTracker = param != null;
                                   
                                            this.localDFUFileParts=param;
                                    

                               }
                            

                        /**
                        * field for IsSuperfile
                        */

                        
                                    protected boolean localIsSuperfile =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsSuperfileTracker = false ;

                           public boolean isIsSuperfileSpecified(){
                               return localIsSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIsSuperfile(){
                               return localIsSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsSuperfile
                               */
                               public void setIsSuperfile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localIsSuperfileTracker =
                                       true;
                                   
                                            this.localIsSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for ShowFileContent
                        */

                        
                                    protected boolean localShowFileContent =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("true");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowFileContentTracker = false ;

                           public boolean isShowFileContentSpecified(){
                               return localShowFileContentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getShowFileContent(){
                               return localShowFileContent;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowFileContent
                               */
                               public void setShowFileContent(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localShowFileContentTracker =
                                       true;
                                   
                                            this.localShowFileContent=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected EspStringArray localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspStringArray
                           */
                           public  EspStringArray getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(EspStringArray param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

                        /**
                        * field for Superfiles
                        */

                        
                                    protected ArrayOfDFULogicalFile localSuperfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfilesTracker = false ;

                           public boolean isSuperfilesSpecified(){
                               return localSuperfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFULogicalFile
                           */
                           public  ArrayOfDFULogicalFile getSuperfiles(){
                               return localSuperfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfiles
                               */
                               public void setSuperfiles(ArrayOfDFULogicalFile param){
                            localSuperfilesTracker = param != null;
                                   
                                            this.localSuperfiles=param;
                                    

                               }
                            

                        /**
                        * field for FromRoxieCluster
                        */

                        
                                    protected boolean localFromRoxieCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFromRoxieClusterTracker = false ;

                           public boolean isFromRoxieClusterSpecified(){
                               return localFromRoxieClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getFromRoxieCluster(){
                               return localFromRoxieCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FromRoxieCluster
                               */
                               public void setFromRoxieCluster(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localFromRoxieClusterTracker =
                                       true;
                                   
                                            this.localFromRoxieCluster=param;
                                    

                               }
                            

                        /**
                        * field for Graphs
                        */

                        
                                    protected Graphs_type0 localGraphs ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGraphsTracker = false ;

                           public boolean isGraphsSpecified(){
                               return localGraphsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Graphs_type0
                           */
                           public  Graphs_type0 getGraphs(){
                               return localGraphs;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Graphs
                               */
                               public void setGraphs(Graphs_type0 param){
                            localGraphsTracker = param != null;
                                   
                                            this.localGraphs=param;
                                    

                               }
                            

                        /**
                        * field for UserPermission
                        */

                        
                                    protected java.lang.String localUserPermission ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUserPermissionTracker = false ;

                           public boolean isUserPermissionSpecified(){
                               return localUserPermissionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserPermission(){
                               return localUserPermission;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserPermission
                               */
                               public void setUserPermission(java.lang.String param){
                            localUserPermissionTracker = param != null;
                                   
                                            this.localUserPermission=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUFileDetail",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUFileDetail",
                           xmlWriter);
                   }

               
                   }
                if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilenameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Filename", xmlWriter);
                             

                                          if (localFilename==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Filename cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilename);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescriptionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Description", xmlWriter);
                             

                                          if (localDescription==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDescription);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDirTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Dir", xmlWriter);
                             

                                          if (localDir==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Dir cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDir);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPathMaskTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PathMask", xmlWriter);
                             

                                          if (localPathMask==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("PathMask cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPathMask);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilesizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Filesize", xmlWriter);
                             

                                          if (localFilesize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Filesize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilesize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localActualSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ActualSize", xmlWriter);
                             

                                          if (localActualSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ActualSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localActualSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecordSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RecordSize", xmlWriter);
                             

                                          if (localRecordSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RecordSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecordSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecordCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RecordCount", xmlWriter);
                             

                                          if (localRecordCount==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RecordCount cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecordCount);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localWuidTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Wuid", xmlWriter);
                             

                                          if (localWuid==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Wuid cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localWuid);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Owner", xmlWriter);
                             

                                          if (localOwner==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwner);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localJobNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "JobName", xmlWriter);
                             

                                          if (localJobName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("JobName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localJobName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPersistentTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Persistent", xmlWriter);
                             

                                          if (localPersistent==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Persistent cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPersistent);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFormatTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Format", xmlWriter);
                             

                                          if (localFormat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Format cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFormat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMaxRecordSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MaxRecordSize", xmlWriter);
                             

                                          if (localMaxRecordSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MaxRecordSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMaxRecordSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCsvSeparateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CsvSeparate", xmlWriter);
                             

                                          if (localCsvSeparate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CsvSeparate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCsvSeparate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCsvQuoteTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CsvQuote", xmlWriter);
                             

                                          if (localCsvQuote==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CsvQuote cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCsvQuote);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCsvTerminateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CsvTerminate", xmlWriter);
                             

                                          if (localCsvTerminate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CsvTerminate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCsvTerminate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Modified", xmlWriter);
                             

                                          if (localModified==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modified cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModified);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEclTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Ecl", xmlWriter);
                             

                                          if (localEcl==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Ecl cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEcl);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localZipFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ZipFile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ZipFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localZipFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStatTracker){
                                            if (localStat==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Stat cannot be null!!");
                                            }
                                           localStat.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Stat"),
                                               xmlWriter);
                                        } if (localDFUFilePartsTracker){
                                            if (localDFUFileParts==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUFileParts cannot be null!!");
                                            }
                                           localDFUFileParts.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUFileParts"),
                                               xmlWriter);
                                        } if (localIsSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "isSuperfile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("isSuperfile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsSuperfile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowFileContentTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowFileContent", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ShowFileContent cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowFileContent));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfilesTracker){
                                            if (localSubfiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                            }
                                           localSubfiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles"),
                                               xmlWriter);
                                        } if (localSuperfilesTracker){
                                            if (localSuperfiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Superfiles cannot be null!!");
                                            }
                                           localSuperfiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Superfiles"),
                                               xmlWriter);
                                        } if (localFromRoxieClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FromRoxieCluster", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FromRoxieCluster cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFromRoxieCluster));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGraphsTracker){
                                            if (localGraphs==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Graphs cannot be null!!");
                                            }
                                           localGraphs.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Graphs"),
                                               xmlWriter);
                                        } if (localUserPermissionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "UserPermission", xmlWriter);
                             

                                          if (localUserPermission==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("UserPermission cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserPermission);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localFilenameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Filename"));
                                 
                                        if (localFilename != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilename));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Filename cannot be null!!");
                                        }
                                    } if (localDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Description"));
                                 
                                        if (localDescription != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                        }
                                    } if (localDirTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Dir"));
                                 
                                        if (localDir != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDir));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Dir cannot be null!!");
                                        }
                                    } if (localPathMaskTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PathMask"));
                                 
                                        if (localPathMask != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPathMask));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("PathMask cannot be null!!");
                                        }
                                    } if (localFilesizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Filesize"));
                                 
                                        if (localFilesize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilesize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Filesize cannot be null!!");
                                        }
                                    } if (localActualSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ActualSize"));
                                 
                                        if (localActualSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActualSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ActualSize cannot be null!!");
                                        }
                                    } if (localRecordSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RecordSize"));
                                 
                                        if (localRecordSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RecordSize cannot be null!!");
                                        }
                                    } if (localRecordCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RecordCount"));
                                 
                                        if (localRecordCount != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordCount));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RecordCount cannot be null!!");
                                        }
                                    } if (localWuidTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Wuid"));
                                 
                                        if (localWuid != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWuid));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Wuid cannot be null!!");
                                        }
                                    } if (localOwnerTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Owner"));
                                 
                                        if (localOwner != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwner));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                        }
                                    } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localJobNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "JobName"));
                                 
                                        if (localJobName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localJobName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("JobName cannot be null!!");
                                        }
                                    } if (localPersistentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Persistent"));
                                 
                                        if (localPersistent != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPersistent));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Persistent cannot be null!!");
                                        }
                                    } if (localFormatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Format"));
                                 
                                        if (localFormat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Format cannot be null!!");
                                        }
                                    } if (localMaxRecordSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MaxRecordSize"));
                                 
                                        if (localMaxRecordSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRecordSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MaxRecordSize cannot be null!!");
                                        }
                                    } if (localCsvSeparateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CsvSeparate"));
                                 
                                        if (localCsvSeparate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCsvSeparate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CsvSeparate cannot be null!!");
                                        }
                                    } if (localCsvQuoteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CsvQuote"));
                                 
                                        if (localCsvQuote != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCsvQuote));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CsvQuote cannot be null!!");
                                        }
                                    } if (localCsvTerminateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CsvTerminate"));
                                 
                                        if (localCsvTerminate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCsvTerminate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CsvTerminate cannot be null!!");
                                        }
                                    } if (localModifiedTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Modified"));
                                 
                                        if (localModified != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModified));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modified cannot be null!!");
                                        }
                                    } if (localEclTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Ecl"));
                                 
                                        if (localEcl != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEcl));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Ecl cannot be null!!");
                                        }
                                    } if (localZipFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ZipFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localZipFile));
                            } if (localStatTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Stat"));
                            
                            
                                    if (localStat==null){
                                         throw new org.apache.axis2.databinding.ADBException("Stat cannot be null!!");
                                    }
                                    elementList.add(localStat);
                                } if (localDFUFilePartsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUFileParts"));
                            
                            
                                    if (localDFUFileParts==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUFileParts cannot be null!!");
                                    }
                                    elementList.add(localDFUFileParts);
                                } if (localIsSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "isSuperfile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsSuperfile));
                            } if (localShowFileContentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowFileContent"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowFileContent));
                            } if (localSubfilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "subfiles"));
                            
                            
                                    if (localSubfiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("subfiles cannot be null!!");
                                    }
                                    elementList.add(localSubfiles);
                                } if (localSuperfilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Superfiles"));
                            
                            
                                    if (localSuperfiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("Superfiles cannot be null!!");
                                    }
                                    elementList.add(localSuperfiles);
                                } if (localFromRoxieClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FromRoxieCluster"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFromRoxieCluster));
                            } if (localGraphsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Graphs"));
                            
                            
                                    if (localGraphs==null){
                                         throw new org.apache.axis2.databinding.ADBException("Graphs cannot be null!!");
                                    }
                                    elementList.add(localGraphs);
                                } if (localUserPermissionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "UserPermission"));
                                 
                                        if (localUserPermission != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserPermission));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("UserPermission cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUFileDetail parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUFileDetail object =
                new DFUFileDetail();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUFileDetail".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUFileDetail)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Filename").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Filename" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilename(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Description").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Description" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Dir").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Dir" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDir(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PathMask").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PathMask" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPathMask(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Filesize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Filesize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilesize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ActualSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ActualSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setActualSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RecordSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RecordSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecordSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RecordCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RecordCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecordCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Wuid").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Wuid" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setWuid(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Owner").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Owner" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwner(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","JobName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"JobName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setJobName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Persistent").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Persistent" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPersistent(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Format").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Format" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFormat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MaxRecordSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MaxRecordSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxRecordSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CsvSeparate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CsvSeparate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCsvSeparate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CsvQuote").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CsvQuote" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCsvQuote(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CsvTerminate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CsvTerminate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCsvTerminate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Modified").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modified" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModified(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Ecl").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Ecl" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEcl(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ZipFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ZipFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setZipFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Stat").equals(reader.getName())){
                                
                                                object.setStat(DFUFileStat.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUFileParts").equals(reader.getName())){
                                
                                                object.setDFUFileParts(ArrayOfDFUPart.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","isSuperfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"isSuperfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowFileContent").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowFileContent" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowFileContent(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","subfiles").equals(reader.getName())){
                                
                                                object.setSubfiles(EspStringArray.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Superfiles").equals(reader.getName())){
                                
                                                object.setSuperfiles(ArrayOfDFULogicalFile.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FromRoxieCluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FromRoxieCluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFromRoxieCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Graphs").equals(reader.getName())){
                                
                                                object.setGraphs(Graphs_type0.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","UserPermission").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"UserPermission" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserPermission(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class EspStringArray
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = EspStringArray
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Item
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localItem ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localItemTracker = false ;

                           public boolean isItemSpecified(){
                               return localItemTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getItem(){
                               return localItem;
                           }

                           
                        


                               
                              /**
                               * validate the array for Item
                               */
                              protected void validateItem(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param Item
                              */
                              public void setItem(java.lang.String[] param){
                              
                                   validateItem(param);

                               localItemTracker = param != null;
                                      
                                      this.localItem=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addItem(java.lang.String param){
                                   if (localItem == null){
                                   localItem = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localItemTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
                               list.add(param);
                               this.localItem =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":EspStringArray",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "EspStringArray",
                           xmlWriter);
                   }

               
                   }
                if (localItemTracker){
                             if (localItem!=null) {
                                   namespace = "urn:hpccsystems:ws:wsdfu";
                                   for (int i = 0;i < localItem.length;i++){
                                        
                                            if (localItem[i] != null){
                                        
                                                writeStartElement(null, namespace, "Item", xmlWriter);

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItem[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // we have to do nothing since minOccurs is zero
                                                       
                                                }

                                   }
                             } else {
                                 
                                         throw new org.apache.axis2.databinding.ADBException("Item cannot be null!!");
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localItemTracker){
                            if (localItem!=null){
                                  for (int i = 0;i < localItem.length;i++){
                                      
                                         if (localItem[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                              "Item"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localItem[i]));
                                          } else {
                                             
                                                    // have to do nothing
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    throw new org.apache.axis2.databinding.ADBException("Item cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EspStringArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EspStringArray object =
                new EspStringArray();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"EspStringArray".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (EspStringArray)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Item").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(reader.getElementText());
                                            
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone1 = false;
                                            while(!loopDone1){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone1 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Item").equals(reader.getName())){
                                                         list1.add(reader.getElementText());
                                                        
                                                    }else{
                                                        loopDone1 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setItem((java.lang.String[])
                                                        list1.toArray(new java.lang.String[list1.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUQueryRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUQueryRequest",
                "ns1");

            

                        /**
                        * field for Prefix
                        */

                        
                                    protected java.lang.String localPrefix ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrefixTracker = false ;

                           public boolean isPrefixSpecified(){
                               return localPrefixTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrefix(){
                               return localPrefix;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prefix
                               */
                               public void setPrefix(java.lang.String param){
                            localPrefixTracker = param != null;
                                   
                                            this.localPrefix=param;
                                    

                               }
                            

                        /**
                        * field for ClusterName
                        */

                        
                                    protected java.lang.String localClusterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterNameTracker = false ;

                           public boolean isClusterNameSpecified(){
                               return localClusterNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterName(){
                               return localClusterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterName
                               */
                               public void setClusterName(java.lang.String param){
                            localClusterNameTracker = param != null;
                                   
                                            this.localClusterName=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for Description
                        */

                        
                                    protected java.lang.String localDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescriptionTracker = false ;

                           public boolean isDescriptionSpecified(){
                               return localDescriptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDescription(){
                               return localDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Description
                               */
                               public void setDescription(java.lang.String param){
                            localDescriptionTracker = param != null;
                                   
                                            this.localDescription=param;
                                    

                               }
                            

                        /**
                        * field for Owner
                        */

                        
                                    protected java.lang.String localOwner ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerTracker = false ;

                           public boolean isOwnerSpecified(){
                               return localOwnerTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwner(){
                               return localOwner;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Owner
                               */
                               public void setOwner(java.lang.String param){
                            localOwnerTracker = param != null;
                                   
                                            this.localOwner=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.lang.String localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;

                           public boolean isStartDateSpecified(){
                               return localStartDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.lang.String param){
                            localStartDateTracker = param != null;
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for EndDate
                        */

                        
                                    protected java.lang.String localEndDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndDateTracker = false ;

                           public boolean isEndDateSpecified(){
                               return localEndDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEndDate(){
                               return localEndDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndDate
                               */
                               public void setEndDate(java.lang.String param){
                            localEndDateTracker = param != null;
                                   
                                            this.localEndDate=param;
                                    

                               }
                            

                        /**
                        * field for FileType
                        */

                        
                                    protected java.lang.String localFileType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTypeTracker = false ;

                           public boolean isFileTypeSpecified(){
                               return localFileTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileType(){
                               return localFileType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileType
                               */
                               public void setFileType(java.lang.String param){
                            localFileTypeTracker = param != null;
                                   
                                            this.localFileType=param;
                                    

                               }
                            

                        /**
                        * field for FileSizeFrom
                        */

                        
                                    protected long localFileSizeFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileSizeFromTracker = false ;

                           public boolean isFileSizeFromSpecified(){
                               return localFileSizeFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getFileSizeFrom(){
                               return localFileSizeFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileSizeFrom
                               */
                               public void setFileSizeFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localFileSizeFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localFileSizeFrom=param;
                                    

                               }
                            

                        /**
                        * field for FileSizeTo
                        */

                        
                                    protected long localFileSizeTo =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileSizeToTracker = false ;

                           public boolean isFileSizeToSpecified(){
                               return localFileSizeToTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getFileSizeTo(){
                               return localFileSizeTo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileSizeTo
                               */
                               public void setFileSizeTo(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localFileSizeToTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localFileSizeTo=param;
                                    

                               }
                            

                        /**
                        * field for FirstN
                        */

                        
                                    protected int localFirstN =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNTracker = false ;

                           public boolean isFirstNSpecified(){
                               return localFirstNTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getFirstN(){
                               return localFirstN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstN
                               */
                               public void setFirstN(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localFirstNTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localFirstN=param;
                                    

                               }
                            

                        /**
                        * field for FirstNType
                        */

                        
                                    protected java.lang.String localFirstNType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNTypeTracker = false ;

                           public boolean isFirstNTypeSpecified(){
                               return localFirstNTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFirstNType(){
                               return localFirstNType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstNType
                               */
                               public void setFirstNType(java.lang.String param){
                            localFirstNTypeTracker = param != null;
                                   
                                            this.localFirstNType=param;
                                    

                               }
                            

                        /**
                        * field for PageSize
                        */

                        
                                    protected int localPageSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageSizeTracker = false ;

                           public boolean isPageSizeSpecified(){
                               return localPageSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getPageSize(){
                               return localPageSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageSize
                               */
                               public void setPageSize(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageSizeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localPageSize=param;
                                    

                               }
                            

                        /**
                        * field for PageStartFrom
                        */

                        
                                    protected int localPageStartFrom ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageStartFromTracker = false ;

                           public boolean isPageStartFromSpecified(){
                               return localPageStartFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getPageStartFrom(){
                               return localPageStartFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageStartFrom
                               */
                               public void setPageStartFrom(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageStartFromTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localPageStartFrom=param;
                                    

                               }
                            

                        /**
                        * field for Sortby
                        */

                        
                                    protected java.lang.String localSortby ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSortbyTracker = false ;

                           public boolean isSortbySpecified(){
                               return localSortbyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSortby(){
                               return localSortby;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Sortby
                               */
                               public void setSortby(java.lang.String param){
                            localSortbyTracker = param != null;
                                   
                                            this.localSortby=param;
                                    

                               }
                            

                        /**
                        * field for Descending
                        */

                        
                                    protected boolean localDescending =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescendingTracker = false ;

                           public boolean isDescendingSpecified(){
                               return localDescendingTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDescending(){
                               return localDescending;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Descending
                               */
                               public void setDescending(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDescendingTracker =
                                       true;
                                   
                                            this.localDescending=param;
                                    

                               }
                            

                        /**
                        * field for OneLevelDirFileReturn
                        */

                        
                                    protected boolean localOneLevelDirFileReturn =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOneLevelDirFileReturnTracker = false ;

                           public boolean isOneLevelDirFileReturnSpecified(){
                               return localOneLevelDirFileReturnTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getOneLevelDirFileReturn(){
                               return localOneLevelDirFileReturn;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OneLevelDirFileReturn
                               */
                               public void setOneLevelDirFileReturn(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localOneLevelDirFileReturnTracker =
                                       true;
                                   
                                            this.localOneLevelDirFileReturn=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUQueryRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUQueryRequest",
                           xmlWriter);
                   }

               
                   }
                if (localPrefixTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Prefix", xmlWriter);
                             

                                          if (localPrefix==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrefix);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterName", xmlWriter);
                             

                                          if (localClusterName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescriptionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Description", xmlWriter);
                             

                                          if (localDescription==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDescription);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Owner", xmlWriter);
                             

                                          if (localOwner==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwner);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartDate", xmlWriter);
                             

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndDate", xmlWriter);
                             

                                          if (localEndDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEndDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileType", xmlWriter);
                             

                                          if (localFileType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileSizeFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileSizeFrom", xmlWriter);
                             
                                               if (localFileSizeFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FileSizeFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileSizeToTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileSizeTo", xmlWriter);
                             
                                               if (localFileSizeTo==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FileSizeTo cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeTo));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FirstN", xmlWriter);
                             
                                               if (localFirstN==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FirstN cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstN));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FirstNType", xmlWriter);
                             

                                          if (localFirstNType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FirstNType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFirstNType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageSize", xmlWriter);
                             
                                               if (localPageSize==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageStartFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageStartFrom", xmlWriter);
                             
                                               if (localPageStartFrom==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageStartFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageStartFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSortbyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Sortby", xmlWriter);
                             

                                          if (localSortby==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Sortby cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSortby);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescendingTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Descending", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Descending cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescending));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOneLevelDirFileReturnTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OneLevelDirFileReturn", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("OneLevelDirFileReturn cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOneLevelDirFileReturn));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localPrefixTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Prefix"));
                                 
                                        if (localPrefix != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrefix));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                        }
                                    } if (localClusterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterName"));
                                 
                                        if (localClusterName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                        }
                                    } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Description"));
                                 
                                        if (localDescription != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                        }
                                    } if (localOwnerTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Owner"));
                                 
                                        if (localOwner != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwner));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localEndDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndDate"));
                                 
                                        if (localEndDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                        }
                                    } if (localFileTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileType"));
                                 
                                        if (localFileType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                        }
                                    } if (localFileSizeFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileSizeFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeFrom));
                            } if (localFileSizeToTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileSizeTo"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeTo));
                            } if (localFirstNTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FirstN"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstN));
                            } if (localFirstNTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FirstNType"));
                                 
                                        if (localFirstNType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstNType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FirstNType cannot be null!!");
                                        }
                                    } if (localPageSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                            } if (localPageStartFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageStartFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageStartFrom));
                            } if (localSortbyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Sortby"));
                                 
                                        if (localSortby != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortby));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Sortby cannot be null!!");
                                        }
                                    } if (localDescendingTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Descending"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescending));
                            } if (localOneLevelDirFileReturnTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OneLevelDirFileReturn"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOneLevelDirFileReturn));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUQueryRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUQueryRequest object =
                new DFUQueryRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUQueryRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUQueryRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Prefix").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prefix" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrefix(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Description").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Description" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Owner").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Owner" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwner(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileSizeFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileSizeFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileSizeFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileSizeTo").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileSizeTo" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileSizeTo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FirstN").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FirstN" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstN(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FirstNType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FirstNType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstNType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageStartFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageStartFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageStartFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Sortby").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Sortby" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSortby(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Descending").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Descending" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescending(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OneLevelDirFileReturn").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OneLevelDirFileReturn" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOneLevelDirFileReturn(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddRemoteRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddRemoteRequest",
                "ns1");

            

                        /**
                        * field for Dstname
                        */

                        
                                    protected java.lang.String localDstname ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDstnameTracker = false ;

                           public boolean isDstnameSpecified(){
                               return localDstnameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDstname(){
                               return localDstname;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Dstname
                               */
                               public void setDstname(java.lang.String param){
                            localDstnameTracker = param != null;
                                   
                                            this.localDstname=param;
                                    

                               }
                            

                        /**
                        * field for Srcname
                        */

                        
                                    protected java.lang.String localSrcname ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSrcnameTracker = false ;

                           public boolean isSrcnameSpecified(){
                               return localSrcnameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSrcname(){
                               return localSrcname;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Srcname
                               */
                               public void setSrcname(java.lang.String param){
                            localSrcnameTracker = param != null;
                                   
                                            this.localSrcname=param;
                                    

                               }
                            

                        /**
                        * field for Srcdali
                        */

                        
                                    protected java.lang.String localSrcdali ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSrcdaliTracker = false ;

                           public boolean isSrcdaliSpecified(){
                               return localSrcdaliTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSrcdali(){
                               return localSrcdali;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Srcdali
                               */
                               public void setSrcdali(java.lang.String param){
                            localSrcdaliTracker = param != null;
                                   
                                            this.localSrcdali=param;
                                    

                               }
                            

                        /**
                        * field for Srcusername
                        */

                        
                                    protected java.lang.String localSrcusername ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSrcusernameTracker = false ;

                           public boolean isSrcusernameSpecified(){
                               return localSrcusernameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSrcusername(){
                               return localSrcusername;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Srcusername
                               */
                               public void setSrcusername(java.lang.String param){
                            localSrcusernameTracker = param != null;
                                   
                                            this.localSrcusername=param;
                                    

                               }
                            

                        /**
                        * field for Srcpassword
                        */

                        
                                    protected java.lang.String localSrcpassword ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSrcpasswordTracker = false ;

                           public boolean isSrcpasswordSpecified(){
                               return localSrcpasswordTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSrcpassword(){
                               return localSrcpassword;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Srcpassword
                               */
                               public void setSrcpassword(java.lang.String param){
                            localSrcpasswordTracker = param != null;
                                   
                                            this.localSrcpassword=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddRemoteRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddRemoteRequest",
                           xmlWriter);
                   }

               
                   }
                if (localDstnameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "dstname", xmlWriter);
                             

                                          if (localDstname==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("dstname cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDstname);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSrcnameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "srcname", xmlWriter);
                             

                                          if (localSrcname==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("srcname cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSrcname);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSrcdaliTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "srcdali", xmlWriter);
                             

                                          if (localSrcdali==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("srcdali cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSrcdali);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSrcusernameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "srcusername", xmlWriter);
                             

                                          if (localSrcusername==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("srcusername cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSrcusername);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSrcpasswordTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "srcpassword", xmlWriter);
                             

                                          if (localSrcpassword==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("srcpassword cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSrcpassword);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDstnameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "dstname"));
                                 
                                        if (localDstname != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstname));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("dstname cannot be null!!");
                                        }
                                    } if (localSrcnameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "srcname"));
                                 
                                        if (localSrcname != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSrcname));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("srcname cannot be null!!");
                                        }
                                    } if (localSrcdaliTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "srcdali"));
                                 
                                        if (localSrcdali != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSrcdali));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("srcdali cannot be null!!");
                                        }
                                    } if (localSrcusernameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "srcusername"));
                                 
                                        if (localSrcusername != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSrcusername));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("srcusername cannot be null!!");
                                        }
                                    } if (localSrcpasswordTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "srcpassword"));
                                 
                                        if (localSrcpassword != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSrcpassword));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("srcpassword cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddRemoteRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddRemoteRequest object =
                new AddRemoteRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddRemoteRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddRemoteRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","dstname").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"dstname" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDstname(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","srcname").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"srcname" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSrcname(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","srcdali").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"srcdali" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSrcdali(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","srcusername").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"srcusername" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSrcusername(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","srcpassword").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"srcpassword" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSrcpassword(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFULogicalFile
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFULogicalFile
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Prefix
                        */

                        
                                    protected java.lang.String localPrefix ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrefixTracker = false ;

                           public boolean isPrefixSpecified(){
                               return localPrefixTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrefix(){
                               return localPrefix;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prefix
                               */
                               public void setPrefix(java.lang.String param){
                            localPrefixTracker = param != null;
                                   
                                            this.localPrefix=param;
                                    

                               }
                            

                        /**
                        * field for ClusterName
                        */

                        
                                    protected java.lang.String localClusterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterNameTracker = false ;

                           public boolean isClusterNameSpecified(){
                               return localClusterNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterName(){
                               return localClusterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterName
                               */
                               public void setClusterName(java.lang.String param){
                            localClusterNameTracker = param != null;
                                   
                                            this.localClusterName=param;
                                    

                               }
                            

                        /**
                        * field for Directory
                        */

                        
                                    protected java.lang.String localDirectory ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDirectoryTracker = false ;

                           public boolean isDirectorySpecified(){
                               return localDirectoryTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDirectory(){
                               return localDirectory;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Directory
                               */
                               public void setDirectory(java.lang.String param){
                            localDirectoryTracker = param != null;
                                   
                                            this.localDirectory=param;
                                    

                               }
                            

                        /**
                        * field for Description
                        */

                        
                                    protected java.lang.String localDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescriptionTracker = false ;

                           public boolean isDescriptionSpecified(){
                               return localDescriptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDescription(){
                               return localDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Description
                               */
                               public void setDescription(java.lang.String param){
                            localDescriptionTracker = param != null;
                                   
                                            this.localDescription=param;
                                    

                               }
                            

                        /**
                        * field for Parts
                        */

                        
                                    protected java.lang.String localParts ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPartsTracker = false ;

                           public boolean isPartsSpecified(){
                               return localPartsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParts(){
                               return localParts;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Parts
                               */
                               public void setParts(java.lang.String param){
                            localPartsTracker = param != null;
                                   
                                            this.localParts=param;
                                    

                               }
                            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for Owner
                        */

                        
                                    protected java.lang.String localOwner ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerTracker = false ;

                           public boolean isOwnerSpecified(){
                               return localOwnerTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwner(){
                               return localOwner;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Owner
                               */
                               public void setOwner(java.lang.String param){
                            localOwnerTracker = param != null;
                                   
                                            this.localOwner=param;
                                    

                               }
                            

                        /**
                        * field for Totalsize
                        */

                        
                                    protected java.lang.String localTotalsize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTotalsizeTracker = false ;

                           public boolean isTotalsizeSpecified(){
                               return localTotalsizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTotalsize(){
                               return localTotalsize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Totalsize
                               */
                               public void setTotalsize(java.lang.String param){
                            localTotalsizeTracker = param != null;
                                   
                                            this.localTotalsize=param;
                                    

                               }
                            

                        /**
                        * field for RecordCount
                        */

                        
                                    protected java.lang.String localRecordCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRecordCountTracker = false ;

                           public boolean isRecordCountSpecified(){
                               return localRecordCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRecordCount(){
                               return localRecordCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RecordCount
                               */
                               public void setRecordCount(java.lang.String param){
                            localRecordCountTracker = param != null;
                                   
                                            this.localRecordCount=param;
                                    

                               }
                            

                        /**
                        * field for Modified
                        */

                        
                                    protected java.lang.String localModified ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifiedTracker = false ;

                           public boolean isModifiedSpecified(){
                               return localModifiedTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModified(){
                               return localModified;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modified
                               */
                               public void setModified(java.lang.String param){
                            localModifiedTracker = param != null;
                                   
                                            this.localModified=param;
                                    

                               }
                            

                        /**
                        * field for LongSize
                        */

                        
                                    protected java.lang.String localLongSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLongSizeTracker = false ;

                           public boolean isLongSizeSpecified(){
                               return localLongSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLongSize(){
                               return localLongSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LongSize
                               */
                               public void setLongSize(java.lang.String param){
                            localLongSizeTracker = param != null;
                                   
                                            this.localLongSize=param;
                                    

                               }
                            

                        /**
                        * field for LongRecordCount
                        */

                        
                                    protected java.lang.String localLongRecordCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLongRecordCountTracker = false ;

                           public boolean isLongRecordCountSpecified(){
                               return localLongRecordCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLongRecordCount(){
                               return localLongRecordCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LongRecordCount
                               */
                               public void setLongRecordCount(java.lang.String param){
                            localLongRecordCountTracker = param != null;
                                   
                                            this.localLongRecordCount=param;
                                    

                               }
                            

                        /**
                        * field for IsSuperfile
                        */

                        
                                    protected boolean localIsSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsSuperfileTracker = false ;

                           public boolean isIsSuperfileSpecified(){
                               return localIsSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIsSuperfile(){
                               return localIsSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsSuperfile
                               */
                               public void setIsSuperfile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localIsSuperfileTracker =
                                       true;
                                   
                                            this.localIsSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for IsZipfile
                        */

                        
                                    protected boolean localIsZipfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsZipfileTracker = false ;

                           public boolean isIsZipfileSpecified(){
                               return localIsZipfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIsZipfile(){
                               return localIsZipfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsZipfile
                               */
                               public void setIsZipfile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localIsZipfileTracker =
                                       true;
                                   
                                            this.localIsZipfile=param;
                                    

                               }
                            

                        /**
                        * field for IsDirectory
                        */

                        
                                    protected boolean localIsDirectory =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsDirectoryTracker = false ;

                           public boolean isIsDirectorySpecified(){
                               return localIsDirectoryTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIsDirectory(){
                               return localIsDirectory;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsDirectory
                               */
                               public void setIsDirectory(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localIsDirectoryTracker =
                                       true;
                                   
                                            this.localIsDirectory=param;
                                    

                               }
                            

                        /**
                        * field for Replicate
                        */

                        
                                    protected boolean localReplicate =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localReplicateTracker = false ;

                           public boolean isReplicateSpecified(){
                               return localReplicateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getReplicate(){
                               return localReplicate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Replicate
                               */
                               public void setReplicate(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localReplicateTracker =
                                       true;
                                   
                                            this.localReplicate=param;
                                    

                               }
                            

                        /**
                        * field for IntSize
                        */

                        
                                    protected long localIntSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntSizeTracker = false ;

                           public boolean isIntSizeSpecified(){
                               return localIntSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getIntSize(){
                               return localIntSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IntSize
                               */
                               public void setIntSize(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localIntSizeTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localIntSize=param;
                                    

                               }
                            

                        /**
                        * field for IntRecordCount
                        */

                        
                                    protected long localIntRecordCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntRecordCountTracker = false ;

                           public boolean isIntRecordCountSpecified(){
                               return localIntRecordCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getIntRecordCount(){
                               return localIntRecordCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IntRecordCount
                               */
                               public void setIntRecordCount(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localIntRecordCountTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localIntRecordCount=param;
                                    

                               }
                            

                        /**
                        * field for FromRoxieCluster
                        */

                        
                                    protected boolean localFromRoxieCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFromRoxieClusterTracker = false ;

                           public boolean isFromRoxieClusterSpecified(){
                               return localFromRoxieClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getFromRoxieCluster(){
                               return localFromRoxieCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FromRoxieCluster
                               */
                               public void setFromRoxieCluster(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localFromRoxieClusterTracker =
                                       true;
                                   
                                            this.localFromRoxieCluster=param;
                                    

                               }
                            

                        /**
                        * field for BrowseData
                        */

                        
                                    protected boolean localBrowseData ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBrowseDataTracker = false ;

                           public boolean isBrowseDataSpecified(){
                               return localBrowseDataTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getBrowseData(){
                               return localBrowseData;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BrowseData
                               */
                               public void setBrowseData(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localBrowseDataTracker =
                                       true;
                                   
                                            this.localBrowseData=param;
                                    

                               }
                            

                        /**
                        * field for IsKeyFile
                        */

                        
                                    protected boolean localIsKeyFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIsKeyFileTracker = false ;

                           public boolean isIsKeyFileSpecified(){
                               return localIsKeyFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getIsKeyFile(){
                               return localIsKeyFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param IsKeyFile
                               */
                               public void setIsKeyFile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localIsKeyFileTracker =
                                       true;
                                   
                                            this.localIsKeyFile=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFULogicalFile",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFULogicalFile",
                           xmlWriter);
                   }

               
                   }
                if (localPrefixTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Prefix", xmlWriter);
                             

                                          if (localPrefix==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrefix);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterName", xmlWriter);
                             

                                          if (localClusterName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDirectoryTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Directory", xmlWriter);
                             

                                          if (localDirectory==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Directory cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDirectory);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescriptionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Description", xmlWriter);
                             

                                          if (localDescription==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDescription);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPartsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Parts", xmlWriter);
                             

                                          if (localParts==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Parts cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParts);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Owner", xmlWriter);
                             

                                          if (localOwner==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwner);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTotalsizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Totalsize", xmlWriter);
                             

                                          if (localTotalsize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Totalsize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTotalsize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRecordCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RecordCount", xmlWriter);
                             

                                          if (localRecordCount==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RecordCount cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRecordCount);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifiedTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Modified", xmlWriter);
                             

                                          if (localModified==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modified cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModified);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLongSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LongSize", xmlWriter);
                             

                                          if (localLongSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LongSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLongSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLongRecordCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LongRecordCount", xmlWriter);
                             

                                          if (localLongRecordCount==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LongRecordCount cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLongRecordCount);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIsSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "isSuperfile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("isSuperfile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsSuperfile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIsZipfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "isZipfile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("isZipfile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsZipfile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIsDirectoryTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "isDirectory", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("isDirectory cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsDirectory));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localReplicateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Replicate", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Replicate cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReplicate));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "IntSize", xmlWriter);
                             
                                               if (localIntSize==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("IntSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntRecordCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "IntRecordCount", xmlWriter);
                             
                                               if (localIntRecordCount==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("IntRecordCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntRecordCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFromRoxieClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FromRoxieCluster", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FromRoxieCluster cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFromRoxieCluster));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBrowseDataTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BrowseData", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("BrowseData cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrowseData));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIsKeyFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "IsKeyFile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("IsKeyFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsKeyFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localPrefixTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Prefix"));
                                 
                                        if (localPrefix != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrefix));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                        }
                                    } if (localClusterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterName"));
                                 
                                        if (localClusterName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                        }
                                    } if (localDirectoryTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Directory"));
                                 
                                        if (localDirectory != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDirectory));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Directory cannot be null!!");
                                        }
                                    } if (localDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Description"));
                                 
                                        if (localDescription != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                        }
                                    } if (localPartsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Parts"));
                                 
                                        if (localParts != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParts));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Parts cannot be null!!");
                                        }
                                    } if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localOwnerTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Owner"));
                                 
                                        if (localOwner != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwner));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                        }
                                    } if (localTotalsizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Totalsize"));
                                 
                                        if (localTotalsize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotalsize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Totalsize cannot be null!!");
                                        }
                                    } if (localRecordCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RecordCount"));
                                 
                                        if (localRecordCount != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecordCount));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RecordCount cannot be null!!");
                                        }
                                    } if (localModifiedTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Modified"));
                                 
                                        if (localModified != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModified));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modified cannot be null!!");
                                        }
                                    } if (localLongSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LongSize"));
                                 
                                        if (localLongSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLongSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LongSize cannot be null!!");
                                        }
                                    } if (localLongRecordCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LongRecordCount"));
                                 
                                        if (localLongRecordCount != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLongRecordCount));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LongRecordCount cannot be null!!");
                                        }
                                    } if (localIsSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "isSuperfile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsSuperfile));
                            } if (localIsZipfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "isZipfile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsZipfile));
                            } if (localIsDirectoryTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "isDirectory"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsDirectory));
                            } if (localReplicateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Replicate"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReplicate));
                            } if (localIntSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "IntSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntSize));
                            } if (localIntRecordCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "IntRecordCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntRecordCount));
                            } if (localFromRoxieClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FromRoxieCluster"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFromRoxieCluster));
                            } if (localBrowseDataTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BrowseData"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBrowseData));
                            } if (localIsKeyFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "IsKeyFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIsKeyFile));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFULogicalFile parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFULogicalFile object =
                new DFULogicalFile();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFULogicalFile".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFULogicalFile)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Prefix").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prefix" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrefix(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Directory").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Directory" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDirectory(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Description").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Description" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Parts").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Parts" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParts(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Owner").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Owner" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwner(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Totalsize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Totalsize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTotalsize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RecordCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RecordCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRecordCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Modified").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modified" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModified(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LongSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LongSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLongSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LongRecordCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LongRecordCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLongRecordCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","isSuperfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"isSuperfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","isZipfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"isZipfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsZipfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","isDirectory").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"isDirectory" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsDirectory(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Replicate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Replicate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setReplicate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","IntSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"IntSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","IntRecordCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"IntRecordCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntRecordCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FromRoxieCluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FromRoxieCluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFromRoxieCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BrowseData").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BrowseData" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBrowseData(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","IsKeyFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"IsKeyFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIsKeyFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ColumnsHidden_type1
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ColumnsHidden_type1
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for ColumnHidden
                        * This was an Array!
                        */

                        
                                    protected DFUDataColumn[] localColumnHidden ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnHiddenTracker = false ;

                           public boolean isColumnHiddenSpecified(){
                               return localColumnHiddenTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUDataColumn[]
                           */
                           public  DFUDataColumn[] getColumnHidden(){
                               return localColumnHidden;
                           }

                           
                        


                               
                              /**
                               * validate the array for ColumnHidden
                               */
                              protected void validateColumnHidden(DFUDataColumn[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param ColumnHidden
                              */
                              public void setColumnHidden(DFUDataColumn[] param){
                              
                                   validateColumnHidden(param);

                               localColumnHiddenTracker = param != null;
                                      
                                      this.localColumnHidden=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFUDataColumn
                             */
                             public void addColumnHidden(DFUDataColumn param){
                                   if (localColumnHidden == null){
                                   localColumnHidden = new DFUDataColumn[]{};
                                   }

                            
                                 //update the setting tracker
                                localColumnHiddenTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localColumnHidden);
                               list.add(param);
                               this.localColumnHidden =
                             (DFUDataColumn[])list.toArray(
                            new DFUDataColumn[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ColumnsHidden_type1",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ColumnsHidden_type1",
                           xmlWriter);
                   }

               
                   }
                if (localColumnHiddenTracker){
                                       if (localColumnHidden!=null){
                                            for (int i = 0;i < localColumnHidden.length;i++){
                                                if (localColumnHidden[i] != null){
                                                 localColumnHidden[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("ColumnHidden cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localColumnHiddenTracker){
                             if (localColumnHidden!=null) {
                                 for (int i = 0;i < localColumnHidden.length;i++){

                                    if (localColumnHidden[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "ColumnHidden"));
                                         elementList.add(localColumnHidden[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("ColumnHidden cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ColumnsHidden_type1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ColumnsHidden_type1 object =
                new ColumnsHidden_type1();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ColumnsHidden_type1".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ColumnsHidden_type1)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden").equals(reader.getName())){
                                                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setColumnHidden((DFUDataColumn[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFUDataColumn.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ColumnsHidden_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ColumnsHidden_type0
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for ColumnHidden
                        * This was an Array!
                        */

                        
                                    protected DFUDataColumn[] localColumnHidden ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnHiddenTracker = false ;

                           public boolean isColumnHiddenSpecified(){
                               return localColumnHiddenTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUDataColumn[]
                           */
                           public  DFUDataColumn[] getColumnHidden(){
                               return localColumnHidden;
                           }

                           
                        


                               
                              /**
                               * validate the array for ColumnHidden
                               */
                              protected void validateColumnHidden(DFUDataColumn[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param ColumnHidden
                              */
                              public void setColumnHidden(DFUDataColumn[] param){
                              
                                   validateColumnHidden(param);

                               localColumnHiddenTracker = param != null;
                                      
                                      this.localColumnHidden=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFUDataColumn
                             */
                             public void addColumnHidden(DFUDataColumn param){
                                   if (localColumnHidden == null){
                                   localColumnHidden = new DFUDataColumn[]{};
                                   }

                            
                                 //update the setting tracker
                                localColumnHiddenTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localColumnHidden);
                               list.add(param);
                               this.localColumnHidden =
                             (DFUDataColumn[])list.toArray(
                            new DFUDataColumn[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ColumnsHidden_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ColumnsHidden_type0",
                           xmlWriter);
                   }

               
                   }
                if (localColumnHiddenTracker){
                                       if (localColumnHidden!=null){
                                            for (int i = 0;i < localColumnHidden.length;i++){
                                                if (localColumnHidden[i] != null){
                                                 localColumnHidden[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("ColumnHidden cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localColumnHiddenTracker){
                             if (localColumnHidden!=null) {
                                 for (int i = 0;i < localColumnHidden.length;i++){

                                    if (localColumnHidden[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "ColumnHidden"));
                                         elementList.add(localColumnHidden[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("ColumnHidden cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ColumnsHidden_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ColumnsHidden_type0 object =
                new ColumnsHidden_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ColumnsHidden_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ColumnsHidden_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnHidden").equals(reader.getName())){
                                                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setColumnHidden((DFUDataColumn[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFUDataColumn.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSearchDataResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSearchDataResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for OpenLogicalName
                        */

                        
                                    protected java.lang.String localOpenLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenLogicalNameTracker = false ;

                           public boolean isOpenLogicalNameSpecified(){
                               return localOpenLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenLogicalName(){
                               return localOpenLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenLogicalName
                               */
                               public void setOpenLogicalName(java.lang.String param){
                            localOpenLogicalNameTracker = param != null;
                                   
                                            this.localOpenLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for ParentName
                        */

                        
                                    protected java.lang.String localParentName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localParentNameTracker = false ;

                           public boolean isParentNameSpecified(){
                               return localParentNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParentName(){
                               return localParentName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ParentName
                               */
                               public void setParentName(java.lang.String param){
                            localParentNameTracker = param != null;
                                   
                                            this.localParentName=param;
                                    

                               }
                            

                        /**
                        * field for StartIndex
                        */

                        
                                    protected long localStartIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartIndexTracker = false ;

                           public boolean isStartIndexSpecified(){
                               return localStartIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartIndex(){
                               return localStartIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartIndex
                               */
                               public void setStartIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartIndex=param;
                                    

                               }
                            

                        /**
                        * field for EndIndex
                        */

                        
                                    protected long localEndIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndIndexTracker = false ;

                           public boolean isEndIndexSpecified(){
                               return localEndIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getEndIndex(){
                               return localEndIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndIndex
                               */
                               public void setEndIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localEndIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localEndIndex=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns1
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns1Tracker = false ;

                           public boolean isDFUDataKeyedColumns1Specified(){
                               return localDFUDataKeyedColumns1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns1(){
                               return localDFUDataKeyedColumns1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns1
                               */
                               public void setDFUDataKeyedColumns1(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns1Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns1=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns2
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns2Tracker = false ;

                           public boolean isDFUDataKeyedColumns2Specified(){
                               return localDFUDataKeyedColumns2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns2(){
                               return localDFUDataKeyedColumns2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns2
                               */
                               public void setDFUDataKeyedColumns2(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns2Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns2=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns3
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns3Tracker = false ;

                           public boolean isDFUDataKeyedColumns3Specified(){
                               return localDFUDataKeyedColumns3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns3(){
                               return localDFUDataKeyedColumns3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns3
                               */
                               public void setDFUDataKeyedColumns3(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns3Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns3=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns4
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns4Tracker = false ;

                           public boolean isDFUDataKeyedColumns4Specified(){
                               return localDFUDataKeyedColumns4Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns4(){
                               return localDFUDataKeyedColumns4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns4
                               */
                               public void setDFUDataKeyedColumns4(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns4Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns4=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns5
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns5 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns5Tracker = false ;

                           public boolean isDFUDataKeyedColumns5Specified(){
                               return localDFUDataKeyedColumns5Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns5(){
                               return localDFUDataKeyedColumns5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns5
                               */
                               public void setDFUDataKeyedColumns5(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns5Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns5=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns6
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns6 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns6Tracker = false ;

                           public boolean isDFUDataKeyedColumns6Specified(){
                               return localDFUDataKeyedColumns6Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns6(){
                               return localDFUDataKeyedColumns6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns6
                               */
                               public void setDFUDataKeyedColumns6(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns6Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns6=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns7
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns7 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns7Tracker = false ;

                           public boolean isDFUDataKeyedColumns7Specified(){
                               return localDFUDataKeyedColumns7Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns7(){
                               return localDFUDataKeyedColumns7;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns7
                               */
                               public void setDFUDataKeyedColumns7(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns7Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns7=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns8
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns8 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns8Tracker = false ;

                           public boolean isDFUDataKeyedColumns8Specified(){
                               return localDFUDataKeyedColumns8Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns8(){
                               return localDFUDataKeyedColumns8;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns8
                               */
                               public void setDFUDataKeyedColumns8(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns8Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns8=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns9
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns9 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns9Tracker = false ;

                           public boolean isDFUDataKeyedColumns9Specified(){
                               return localDFUDataKeyedColumns9Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns9(){
                               return localDFUDataKeyedColumns9;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns9
                               */
                               public void setDFUDataKeyedColumns9(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns9Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns9=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns10
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns10 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns10Tracker = false ;

                           public boolean isDFUDataKeyedColumns10Specified(){
                               return localDFUDataKeyedColumns10Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns10(){
                               return localDFUDataKeyedColumns10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns10
                               */
                               public void setDFUDataKeyedColumns10(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns10Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns10=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns11
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns11 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns11Tracker = false ;

                           public boolean isDFUDataKeyedColumns11Specified(){
                               return localDFUDataKeyedColumns11Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns11(){
                               return localDFUDataKeyedColumns11;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns11
                               */
                               public void setDFUDataKeyedColumns11(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns11Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns11=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns12
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns12 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns12Tracker = false ;

                           public boolean isDFUDataKeyedColumns12Specified(){
                               return localDFUDataKeyedColumns12Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns12(){
                               return localDFUDataKeyedColumns12;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns12
                               */
                               public void setDFUDataKeyedColumns12(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns12Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns12=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns13
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns13 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns13Tracker = false ;

                           public boolean isDFUDataKeyedColumns13Specified(){
                               return localDFUDataKeyedColumns13Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns13(){
                               return localDFUDataKeyedColumns13;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns13
                               */
                               public void setDFUDataKeyedColumns13(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns13Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns13=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns14
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns14 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns14Tracker = false ;

                           public boolean isDFUDataKeyedColumns14Specified(){
                               return localDFUDataKeyedColumns14Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns14(){
                               return localDFUDataKeyedColumns14;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns14
                               */
                               public void setDFUDataKeyedColumns14(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns14Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns14=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns15
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns15 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns15Tracker = false ;

                           public boolean isDFUDataKeyedColumns15Specified(){
                               return localDFUDataKeyedColumns15Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns15(){
                               return localDFUDataKeyedColumns15;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns15
                               */
                               public void setDFUDataKeyedColumns15(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns15Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns15=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns16
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns16 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns16Tracker = false ;

                           public boolean isDFUDataKeyedColumns16Specified(){
                               return localDFUDataKeyedColumns16Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns16(){
                               return localDFUDataKeyedColumns16;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns16
                               */
                               public void setDFUDataKeyedColumns16(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns16Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns16=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns17
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns17 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns17Tracker = false ;

                           public boolean isDFUDataKeyedColumns17Specified(){
                               return localDFUDataKeyedColumns17Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns17(){
                               return localDFUDataKeyedColumns17;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns17
                               */
                               public void setDFUDataKeyedColumns17(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns17Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns17=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns18
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns18 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns18Tracker = false ;

                           public boolean isDFUDataKeyedColumns18Specified(){
                               return localDFUDataKeyedColumns18Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns18(){
                               return localDFUDataKeyedColumns18;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns18
                               */
                               public void setDFUDataKeyedColumns18(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns18Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns18=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns19
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns19 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns19Tracker = false ;

                           public boolean isDFUDataKeyedColumns19Specified(){
                               return localDFUDataKeyedColumns19Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns19(){
                               return localDFUDataKeyedColumns19;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns19
                               */
                               public void setDFUDataKeyedColumns19(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns19Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns19=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns20
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns20 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns20Tracker = false ;

                           public boolean isDFUDataKeyedColumns20Specified(){
                               return localDFUDataKeyedColumns20Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns20(){
                               return localDFUDataKeyedColumns20;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns20
                               */
                               public void setDFUDataKeyedColumns20(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns20Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns20=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns1
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns1Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns1Specified(){
                               return localDFUDataNonKeyedColumns1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns1(){
                               return localDFUDataNonKeyedColumns1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns1
                               */
                               public void setDFUDataNonKeyedColumns1(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns1Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns1=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns2
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns2Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns2Specified(){
                               return localDFUDataNonKeyedColumns2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns2(){
                               return localDFUDataNonKeyedColumns2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns2
                               */
                               public void setDFUDataNonKeyedColumns2(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns2Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns2=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns3
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns3Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns3Specified(){
                               return localDFUDataNonKeyedColumns3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns3(){
                               return localDFUDataNonKeyedColumns3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns3
                               */
                               public void setDFUDataNonKeyedColumns3(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns3Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns3=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns4
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns4Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns4Specified(){
                               return localDFUDataNonKeyedColumns4Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns4(){
                               return localDFUDataNonKeyedColumns4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns4
                               */
                               public void setDFUDataNonKeyedColumns4(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns4Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns4=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns5
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns5 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns5Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns5Specified(){
                               return localDFUDataNonKeyedColumns5Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns5(){
                               return localDFUDataNonKeyedColumns5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns5
                               */
                               public void setDFUDataNonKeyedColumns5(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns5Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns5=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns6
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns6 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns6Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns6Specified(){
                               return localDFUDataNonKeyedColumns6Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns6(){
                               return localDFUDataNonKeyedColumns6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns6
                               */
                               public void setDFUDataNonKeyedColumns6(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns6Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns6=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns7
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns7 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns7Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns7Specified(){
                               return localDFUDataNonKeyedColumns7Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns7(){
                               return localDFUDataNonKeyedColumns7;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns7
                               */
                               public void setDFUDataNonKeyedColumns7(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns7Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns7=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns8
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns8 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns8Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns8Specified(){
                               return localDFUDataNonKeyedColumns8Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns8(){
                               return localDFUDataNonKeyedColumns8;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns8
                               */
                               public void setDFUDataNonKeyedColumns8(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns8Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns8=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns9
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns9 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns9Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns9Specified(){
                               return localDFUDataNonKeyedColumns9Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns9(){
                               return localDFUDataNonKeyedColumns9;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns9
                               */
                               public void setDFUDataNonKeyedColumns9(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns9Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns9=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns10
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns10 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns10Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns10Specified(){
                               return localDFUDataNonKeyedColumns10Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns10(){
                               return localDFUDataNonKeyedColumns10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns10
                               */
                               public void setDFUDataNonKeyedColumns10(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns10Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns10=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns11
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns11 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns11Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns11Specified(){
                               return localDFUDataNonKeyedColumns11Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns11(){
                               return localDFUDataNonKeyedColumns11;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns11
                               */
                               public void setDFUDataNonKeyedColumns11(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns11Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns11=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns12
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns12 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns12Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns12Specified(){
                               return localDFUDataNonKeyedColumns12Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns12(){
                               return localDFUDataNonKeyedColumns12;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns12
                               */
                               public void setDFUDataNonKeyedColumns12(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns12Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns12=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns13
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns13 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns13Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns13Specified(){
                               return localDFUDataNonKeyedColumns13Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns13(){
                               return localDFUDataNonKeyedColumns13;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns13
                               */
                               public void setDFUDataNonKeyedColumns13(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns13Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns13=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns14
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns14 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns14Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns14Specified(){
                               return localDFUDataNonKeyedColumns14Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns14(){
                               return localDFUDataNonKeyedColumns14;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns14
                               */
                               public void setDFUDataNonKeyedColumns14(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns14Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns14=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns15
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns15 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns15Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns15Specified(){
                               return localDFUDataNonKeyedColumns15Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns15(){
                               return localDFUDataNonKeyedColumns15;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns15
                               */
                               public void setDFUDataNonKeyedColumns15(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns15Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns15=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns16
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns16 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns16Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns16Specified(){
                               return localDFUDataNonKeyedColumns16Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns16(){
                               return localDFUDataNonKeyedColumns16;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns16
                               */
                               public void setDFUDataNonKeyedColumns16(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns16Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns16=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns17
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns17 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns17Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns17Specified(){
                               return localDFUDataNonKeyedColumns17Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns17(){
                               return localDFUDataNonKeyedColumns17;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns17
                               */
                               public void setDFUDataNonKeyedColumns17(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns17Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns17=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns18
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns18 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns18Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns18Specified(){
                               return localDFUDataNonKeyedColumns18Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns18(){
                               return localDFUDataNonKeyedColumns18;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns18
                               */
                               public void setDFUDataNonKeyedColumns18(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns18Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns18=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns19
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns19 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns19Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns19Specified(){
                               return localDFUDataNonKeyedColumns19Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns19(){
                               return localDFUDataNonKeyedColumns19;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns19
                               */
                               public void setDFUDataNonKeyedColumns19(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns19Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns19=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns20
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns20 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns20Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns20Specified(){
                               return localDFUDataNonKeyedColumns20Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns20(){
                               return localDFUDataNonKeyedColumns20;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns20
                               */
                               public void setDFUDataNonKeyedColumns20(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns20Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns20=param;
                                    

                               }
                            

                        /**
                        * field for RowCount
                        */

                        
                                    protected long localRowCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRowCountTracker = false ;

                           public boolean isRowCountSpecified(){
                               return localRowCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getRowCount(){
                               return localRowCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RowCount
                               */
                               public void setRowCount(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localRowCountTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localRowCount=param;
                                    

                               }
                            

                        /**
                        * field for ShowColumns
                        */

                        
                                    protected java.lang.String localShowColumns ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowColumnsTracker = false ;

                           public boolean isShowColumnsSpecified(){
                               return localShowColumnsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowColumns(){
                               return localShowColumns;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowColumns
                               */
                               public void setShowColumns(java.lang.String param){
                            localShowColumnsTracker = param != null;
                                   
                                            this.localShowColumns=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for FilterBy
                        */

                        
                                    protected java.lang.String localFilterBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterByTracker = false ;

                           public boolean isFilterBySpecified(){
                               return localFilterByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterBy(){
                               return localFilterBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterBy
                               */
                               public void setFilterBy(java.lang.String param){
                            localFilterByTracker = param != null;
                                   
                                            this.localFilterBy=param;
                                    

                               }
                            

                        /**
                        * field for FilterForGoBack
                        */

                        
                                    protected java.lang.String localFilterForGoBack ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterForGoBackTracker = false ;

                           public boolean isFilterForGoBackSpecified(){
                               return localFilterForGoBackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterForGoBack(){
                               return localFilterForGoBack;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterForGoBack
                               */
                               public void setFilterForGoBack(java.lang.String param){
                            localFilterForGoBackTracker = param != null;
                                   
                                            this.localFilterForGoBack=param;
                                    

                               }
                            

                        /**
                        * field for ColumnsHidden
                        */

                        
                                    protected ColumnsHidden_type1 localColumnsHidden ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnsHiddenTracker = false ;

                           public boolean isColumnsHiddenSpecified(){
                               return localColumnsHiddenTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ColumnsHidden_type1
                           */
                           public  ColumnsHidden_type1 getColumnsHidden(){
                               return localColumnsHidden;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnsHidden
                               */
                               public void setColumnsHidden(ColumnsHidden_type1 param){
                            localColumnsHiddenTracker = param != null;
                                   
                                            this.localColumnsHidden=param;
                                    

                               }
                            

                        /**
                        * field for ColumnCount
                        */

                        
                                    protected int localColumnCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnCountTracker = false ;

                           public boolean isColumnCountSpecified(){
                               return localColumnCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getColumnCount(){
                               return localColumnCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnCount
                               */
                               public void setColumnCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localColumnCountTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localColumnCount=param;
                                    

                               }
                            

                        /**
                        * field for StartForGoback
                        */

                        
                                    protected long localStartForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartForGobackTracker = false ;

                           public boolean isStartForGobackSpecified(){
                               return localStartForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartForGoback(){
                               return localStartForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartForGoback
                               */
                               public void setStartForGoback(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartForGobackTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartForGoback=param;
                                    

                               }
                            

                        /**
                        * field for CountForGoback
                        */

                        
                                    protected int localCountForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountForGobackTracker = false ;

                           public boolean isCountForGobackSpecified(){
                               return localCountForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCountForGoback(){
                               return localCountForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountForGoback
                               */
                               public void setCountForGoback(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountForGobackTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCountForGoback=param;
                                    

                               }
                            

                        /**
                        * field for Start
                        */

                        
                                    protected long localStart ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartTracker = false ;

                           public boolean isStartSpecified(){
                               return localStartTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStart(){
                               return localStart;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Start
                               */
                               public void setStart(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStart=param;
                                    

                               }
                            

                        /**
                        * field for Count
                        */

                        
                                    protected long localCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountTracker = false ;

                           public boolean isCountSpecified(){
                               return localCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getCount(){
                               return localCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Count
                               */
                               public void setCount(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localCount=param;
                                    

                               }
                            

                        /**
                        * field for PageSize
                        */

                        
                                    protected long localPageSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageSizeTracker = false ;

                           public boolean isPageSizeSpecified(){
                               return localPageSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getPageSize(){
                               return localPageSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageSize
                               */
                               public void setPageSize(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageSizeTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localPageSize=param;
                                    

                               }
                            

                        /**
                        * field for Total
                        */

                        
                                    protected long localTotal ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTotalTracker = false ;

                           public boolean isTotalSpecified(){
                               return localTotalTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getTotal(){
                               return localTotal;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Total
                               */
                               public void setTotal(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localTotalTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localTotal=param;
                                    

                               }
                            

                        /**
                        * field for Result
                        */

                        
                                    protected java.lang.String localResult ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResultTracker = false ;

                           public boolean isResultSpecified(){
                               return localResultTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResult(){
                               return localResult;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Result
                               */
                               public void setResult(java.lang.String param){
                            localResultTracker = param != null;
                                   
                                            this.localResult=param;
                                    

                               }
                            

                        /**
                        * field for MsgToDisplay
                        */

                        
                                    protected java.lang.String localMsgToDisplay ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMsgToDisplayTracker = false ;

                           public boolean isMsgToDisplaySpecified(){
                               return localMsgToDisplayTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMsgToDisplay(){
                               return localMsgToDisplay;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MsgToDisplay
                               */
                               public void setMsgToDisplay(java.lang.String param){
                            localMsgToDisplayTracker = param != null;
                                   
                                            this.localMsgToDisplay=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

                        /**
                        * field for File
                        */

                        
                                    protected java.lang.String localFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTracker = false ;

                           public boolean isFileSpecified(){
                               return localFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFile(){
                               return localFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param File
                               */
                               public void setFile(java.lang.String param){
                            localFileTracker = param != null;
                                   
                                            this.localFile=param;
                                    

                               }
                            

                        /**
                        * field for Key
                        */

                        
                                    protected java.lang.String localKey ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localKeyTracker = false ;

                           public boolean isKeySpecified(){
                               return localKeyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getKey(){
                               return localKey;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Key
                               */
                               public void setKey(java.lang.String param){
                            localKeyTracker = param != null;
                                   
                                            this.localKey=param;
                                    

                               }
                            

                        /**
                        * field for SchemaOnly
                        */

                        
                                    protected boolean localSchemaOnly ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSchemaOnlyTracker = false ;

                           public boolean isSchemaOnlySpecified(){
                               return localSchemaOnlyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSchemaOnly(){
                               return localSchemaOnly;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SchemaOnly
                               */
                               public void setSchemaOnly(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localSchemaOnlyTracker =
                                       true;
                                   
                                            this.localSchemaOnly=param;
                                    

                               }
                            

                        /**
                        * field for RoxieSelections
                        */

                        
                                    protected boolean localRoxieSelections ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoxieSelectionsTracker = false ;

                           public boolean isRoxieSelectionsSpecified(){
                               return localRoxieSelectionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRoxieSelections(){
                               return localRoxieSelections;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoxieSelections
                               */
                               public void setRoxieSelections(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localRoxieSelectionsTracker =
                                       true;
                                   
                                            this.localRoxieSelections=param;
                                    

                               }
                            

                        /**
                        * field for DisableUppercaseTranslation
                        */

                        
                                    protected boolean localDisableUppercaseTranslation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisableUppercaseTranslationTracker = false ;

                           public boolean isDisableUppercaseTranslationSpecified(){
                               return localDisableUppercaseTranslationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDisableUppercaseTranslation(){
                               return localDisableUppercaseTranslation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisableUppercaseTranslation
                               */
                               public void setDisableUppercaseTranslation(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDisableUppercaseTranslationTracker =
                                       true;
                                   
                                            this.localDisableUppercaseTranslation=param;
                                    

                               }
                            

                        /**
                        * field for AutoUppercaseTranslation
                        */

                        
                                    protected boolean localAutoUppercaseTranslation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAutoUppercaseTranslationTracker = false ;

                           public boolean isAutoUppercaseTranslationSpecified(){
                               return localAutoUppercaseTranslationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getAutoUppercaseTranslation(){
                               return localAutoUppercaseTranslation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AutoUppercaseTranslation
                               */
                               public void setAutoUppercaseTranslation(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localAutoUppercaseTranslationTracker =
                                       true;
                                   
                                            this.localAutoUppercaseTranslation=param;
                                    

                               }
                            

                        /**
                        * field for SelectedKey
                        */

                        
                                    protected java.lang.String localSelectedKey ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSelectedKeyTracker = false ;

                           public boolean isSelectedKeySpecified(){
                               return localSelectedKeyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSelectedKey(){
                               return localSelectedKey;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SelectedKey
                               */
                               public void setSelectedKey(java.lang.String param){
                            localSelectedKeyTracker = param != null;
                                   
                                            this.localSelectedKey=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSearchDataResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSearchDataResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localOpenLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OpenLogicalName", xmlWriter);
                             

                                          if (localOpenLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localParentNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ParentName", xmlWriter);
                             

                                          if (localParentName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParentName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartIndex", xmlWriter);
                             
                                               if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndIndex", xmlWriter);
                             
                                               if (localEndIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EndIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDFUDataKeyedColumns1Tracker){
                                            if (localDFUDataKeyedColumns1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns1 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns1.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns1"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns2Tracker){
                                            if (localDFUDataKeyedColumns2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns2 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns2.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns2"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns3Tracker){
                                            if (localDFUDataKeyedColumns3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns3 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns3.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns3"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns4Tracker){
                                            if (localDFUDataKeyedColumns4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns4 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns4.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns4"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns5Tracker){
                                            if (localDFUDataKeyedColumns5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns5 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns5.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns5"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns6Tracker){
                                            if (localDFUDataKeyedColumns6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns6 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns6.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns6"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns7Tracker){
                                            if (localDFUDataKeyedColumns7==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns7 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns7.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns7"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns8Tracker){
                                            if (localDFUDataKeyedColumns8==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns8 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns8.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns8"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns9Tracker){
                                            if (localDFUDataKeyedColumns9==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns9 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns9.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns9"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns10Tracker){
                                            if (localDFUDataKeyedColumns10==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns10 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns10.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns10"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns11Tracker){
                                            if (localDFUDataKeyedColumns11==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns11 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns11.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns11"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns12Tracker){
                                            if (localDFUDataKeyedColumns12==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns12 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns12.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns12"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns13Tracker){
                                            if (localDFUDataKeyedColumns13==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns13 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns13.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns13"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns14Tracker){
                                            if (localDFUDataKeyedColumns14==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns14 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns14.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns14"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns15Tracker){
                                            if (localDFUDataKeyedColumns15==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns15 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns15.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns15"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns16Tracker){
                                            if (localDFUDataKeyedColumns16==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns16 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns16.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns16"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns17Tracker){
                                            if (localDFUDataKeyedColumns17==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns17 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns17.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns17"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns18Tracker){
                                            if (localDFUDataKeyedColumns18==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns18 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns18.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns18"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns19Tracker){
                                            if (localDFUDataKeyedColumns19==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns19 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns19.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns19"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns20Tracker){
                                            if (localDFUDataKeyedColumns20==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns20 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns20.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns20"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns1Tracker){
                                            if (localDFUDataNonKeyedColumns1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns1 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns1.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns1"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns2Tracker){
                                            if (localDFUDataNonKeyedColumns2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns2 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns2.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns2"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns3Tracker){
                                            if (localDFUDataNonKeyedColumns3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns3 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns3.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns3"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns4Tracker){
                                            if (localDFUDataNonKeyedColumns4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns4 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns4.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns4"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns5Tracker){
                                            if (localDFUDataNonKeyedColumns5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns5 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns5.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns5"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns6Tracker){
                                            if (localDFUDataNonKeyedColumns6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns6 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns6.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns6"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns7Tracker){
                                            if (localDFUDataNonKeyedColumns7==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns7 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns7.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns7"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns8Tracker){
                                            if (localDFUDataNonKeyedColumns8==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns8 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns8.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns8"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns9Tracker){
                                            if (localDFUDataNonKeyedColumns9==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns9 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns9.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns9"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns10Tracker){
                                            if (localDFUDataNonKeyedColumns10==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns10 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns10.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns10"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns11Tracker){
                                            if (localDFUDataNonKeyedColumns11==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns11 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns11.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns11"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns12Tracker){
                                            if (localDFUDataNonKeyedColumns12==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns12 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns12.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns12"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns13Tracker){
                                            if (localDFUDataNonKeyedColumns13==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns13 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns13.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns13"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns14Tracker){
                                            if (localDFUDataNonKeyedColumns14==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns14 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns14.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns14"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns15Tracker){
                                            if (localDFUDataNonKeyedColumns15==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns15 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns15.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns15"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns16Tracker){
                                            if (localDFUDataNonKeyedColumns16==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns16 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns16.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns16"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns17Tracker){
                                            if (localDFUDataNonKeyedColumns17==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns17 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns17.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns17"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns18Tracker){
                                            if (localDFUDataNonKeyedColumns18==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns18 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns18.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns18"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns19Tracker){
                                            if (localDFUDataNonKeyedColumns19==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns19 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns19.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns19"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns20Tracker){
                                            if (localDFUDataNonKeyedColumns20==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns20 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns20.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns20"),
                                               xmlWriter);
                                        } if (localRowCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RowCount", xmlWriter);
                             
                                               if (localRowCount==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("RowCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowColumnsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowColumns", xmlWriter);
                             

                                          if (localShowColumns==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowColumns);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterBy", xmlWriter);
                             

                                          if (localFilterBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterForGoBackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterForGoBack", xmlWriter);
                             

                                          if (localFilterForGoBack==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterForGoBack cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterForGoBack);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localColumnsHiddenTracker){
                                            if (localColumnsHidden==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ColumnsHidden cannot be null!!");
                                            }
                                           localColumnsHidden.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnsHidden"),
                                               xmlWriter);
                                        } if (localColumnCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnCount", xmlWriter);
                             
                                               if (localColumnCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ColumnCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartForGoback", xmlWriter);
                             
                                               if (localStartForGoback==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountForGoback", xmlWriter);
                             
                                               if (localCountForGoback==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("CountForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Start", xmlWriter);
                             
                                               if (localStart==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Start cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Count", xmlWriter);
                             
                                               if (localCount==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Count cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageSize", xmlWriter);
                             
                                               if (localPageSize==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTotalTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Total", xmlWriter);
                             
                                               if (localTotal==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Total cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotal));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResultTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Result", xmlWriter);
                             

                                          if (localResult==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Result cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResult);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMsgToDisplayTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MsgToDisplay", xmlWriter);
                             

                                          if (localMsgToDisplay==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MsgToDisplay cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMsgToDisplay);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "File", xmlWriter);
                             

                                          if (localFile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localKeyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Key", xmlWriter);
                             

                                          if (localKey==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Key cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localKey);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSchemaOnlyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SchemaOnly", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("SchemaOnly cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoxieSelectionsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RoxieSelections", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("RoxieSelections cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoxieSelections));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDisableUppercaseTranslationTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "DisableUppercaseTranslation", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("DisableUppercaseTranslation cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAutoUppercaseTranslationTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "AutoUppercaseTranslation", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("AutoUppercaseTranslation cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAutoUppercaseTranslation));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSelectedKeyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SelectedKey", xmlWriter);
                             

                                          if (localSelectedKey==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SelectedKey cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSelectedKey);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localOpenLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OpenLogicalName"));
                                 
                                        if (localOpenLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                        }
                                    } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localParentNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ParentName"));
                                 
                                        if (localParentName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                        }
                                    } if (localStartIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                            } if (localEndIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                            } if (localDFUDataKeyedColumns1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns1"));
                            
                            
                                    if (localDFUDataKeyedColumns1==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns1 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns1);
                                } if (localDFUDataKeyedColumns2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns2"));
                            
                            
                                    if (localDFUDataKeyedColumns2==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns2 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns2);
                                } if (localDFUDataKeyedColumns3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns3"));
                            
                            
                                    if (localDFUDataKeyedColumns3==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns3 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns3);
                                } if (localDFUDataKeyedColumns4Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns4"));
                            
                            
                                    if (localDFUDataKeyedColumns4==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns4 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns4);
                                } if (localDFUDataKeyedColumns5Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns5"));
                            
                            
                                    if (localDFUDataKeyedColumns5==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns5 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns5);
                                } if (localDFUDataKeyedColumns6Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns6"));
                            
                            
                                    if (localDFUDataKeyedColumns6==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns6 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns6);
                                } if (localDFUDataKeyedColumns7Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns7"));
                            
                            
                                    if (localDFUDataKeyedColumns7==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns7 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns7);
                                } if (localDFUDataKeyedColumns8Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns8"));
                            
                            
                                    if (localDFUDataKeyedColumns8==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns8 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns8);
                                } if (localDFUDataKeyedColumns9Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns9"));
                            
                            
                                    if (localDFUDataKeyedColumns9==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns9 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns9);
                                } if (localDFUDataKeyedColumns10Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns10"));
                            
                            
                                    if (localDFUDataKeyedColumns10==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns10 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns10);
                                } if (localDFUDataKeyedColumns11Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns11"));
                            
                            
                                    if (localDFUDataKeyedColumns11==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns11 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns11);
                                } if (localDFUDataKeyedColumns12Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns12"));
                            
                            
                                    if (localDFUDataKeyedColumns12==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns12 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns12);
                                } if (localDFUDataKeyedColumns13Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns13"));
                            
                            
                                    if (localDFUDataKeyedColumns13==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns13 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns13);
                                } if (localDFUDataKeyedColumns14Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns14"));
                            
                            
                                    if (localDFUDataKeyedColumns14==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns14 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns14);
                                } if (localDFUDataKeyedColumns15Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns15"));
                            
                            
                                    if (localDFUDataKeyedColumns15==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns15 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns15);
                                } if (localDFUDataKeyedColumns16Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns16"));
                            
                            
                                    if (localDFUDataKeyedColumns16==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns16 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns16);
                                } if (localDFUDataKeyedColumns17Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns17"));
                            
                            
                                    if (localDFUDataKeyedColumns17==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns17 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns17);
                                } if (localDFUDataKeyedColumns18Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns18"));
                            
                            
                                    if (localDFUDataKeyedColumns18==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns18 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns18);
                                } if (localDFUDataKeyedColumns19Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns19"));
                            
                            
                                    if (localDFUDataKeyedColumns19==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns19 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns19);
                                } if (localDFUDataKeyedColumns20Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns20"));
                            
                            
                                    if (localDFUDataKeyedColumns20==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns20 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns20);
                                } if (localDFUDataNonKeyedColumns1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns1"));
                            
                            
                                    if (localDFUDataNonKeyedColumns1==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns1 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns1);
                                } if (localDFUDataNonKeyedColumns2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns2"));
                            
                            
                                    if (localDFUDataNonKeyedColumns2==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns2 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns2);
                                } if (localDFUDataNonKeyedColumns3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns3"));
                            
                            
                                    if (localDFUDataNonKeyedColumns3==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns3 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns3);
                                } if (localDFUDataNonKeyedColumns4Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns4"));
                            
                            
                                    if (localDFUDataNonKeyedColumns4==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns4 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns4);
                                } if (localDFUDataNonKeyedColumns5Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns5"));
                            
                            
                                    if (localDFUDataNonKeyedColumns5==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns5 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns5);
                                } if (localDFUDataNonKeyedColumns6Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns6"));
                            
                            
                                    if (localDFUDataNonKeyedColumns6==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns6 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns6);
                                } if (localDFUDataNonKeyedColumns7Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns7"));
                            
                            
                                    if (localDFUDataNonKeyedColumns7==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns7 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns7);
                                } if (localDFUDataNonKeyedColumns8Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns8"));
                            
                            
                                    if (localDFUDataNonKeyedColumns8==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns8 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns8);
                                } if (localDFUDataNonKeyedColumns9Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns9"));
                            
                            
                                    if (localDFUDataNonKeyedColumns9==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns9 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns9);
                                } if (localDFUDataNonKeyedColumns10Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns10"));
                            
                            
                                    if (localDFUDataNonKeyedColumns10==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns10 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns10);
                                } if (localDFUDataNonKeyedColumns11Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns11"));
                            
                            
                                    if (localDFUDataNonKeyedColumns11==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns11 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns11);
                                } if (localDFUDataNonKeyedColumns12Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns12"));
                            
                            
                                    if (localDFUDataNonKeyedColumns12==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns12 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns12);
                                } if (localDFUDataNonKeyedColumns13Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns13"));
                            
                            
                                    if (localDFUDataNonKeyedColumns13==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns13 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns13);
                                } if (localDFUDataNonKeyedColumns14Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns14"));
                            
                            
                                    if (localDFUDataNonKeyedColumns14==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns14 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns14);
                                } if (localDFUDataNonKeyedColumns15Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns15"));
                            
                            
                                    if (localDFUDataNonKeyedColumns15==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns15 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns15);
                                } if (localDFUDataNonKeyedColumns16Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns16"));
                            
                            
                                    if (localDFUDataNonKeyedColumns16==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns16 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns16);
                                } if (localDFUDataNonKeyedColumns17Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns17"));
                            
                            
                                    if (localDFUDataNonKeyedColumns17==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns17 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns17);
                                } if (localDFUDataNonKeyedColumns18Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns18"));
                            
                            
                                    if (localDFUDataNonKeyedColumns18==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns18 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns18);
                                } if (localDFUDataNonKeyedColumns19Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns19"));
                            
                            
                                    if (localDFUDataNonKeyedColumns19==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns19 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns19);
                                } if (localDFUDataNonKeyedColumns20Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns20"));
                            
                            
                                    if (localDFUDataNonKeyedColumns20==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns20 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns20);
                                } if (localRowCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RowCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowCount));
                            } if (localShowColumnsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowColumns"));
                                 
                                        if (localShowColumns != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowColumns));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                        }
                                    } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localFilterByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterBy"));
                                 
                                        if (localFilterBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                        }
                                    } if (localFilterForGoBackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterForGoBack"));
                                 
                                        if (localFilterForGoBack != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterForGoBack));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterForGoBack cannot be null!!");
                                        }
                                    } if (localColumnsHiddenTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnsHidden"));
                            
                            
                                    if (localColumnsHidden==null){
                                         throw new org.apache.axis2.databinding.ADBException("ColumnsHidden cannot be null!!");
                                    }
                                    elementList.add(localColumnsHidden);
                                } if (localColumnCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnCount));
                            } if (localStartForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                            } if (localCountForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                            } if (localStartTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Start"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                            } if (localCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Count"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                            } if (localPageSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                            } if (localTotalTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Total"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotal));
                            } if (localResultTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Result"));
                                 
                                        if (localResult != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResult));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Result cannot be null!!");
                                        }
                                    } if (localMsgToDisplayTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MsgToDisplay"));
                                 
                                        if (localMsgToDisplay != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMsgToDisplay));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MsgToDisplay cannot be null!!");
                                        }
                                    } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    } if (localFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "File"));
                                 
                                        if (localFile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
                                        }
                                    } if (localKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Key"));
                                 
                                        if (localKey != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKey));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Key cannot be null!!");
                                        }
                                    } if (localSchemaOnlyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SchemaOnly"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                            } if (localRoxieSelectionsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RoxieSelections"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoxieSelections));
                            } if (localDisableUppercaseTranslationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DisableUppercaseTranslation"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                            } if (localAutoUppercaseTranslationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "AutoUppercaseTranslation"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAutoUppercaseTranslation));
                            } if (localSelectedKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SelectedKey"));
                                 
                                        if (localSelectedKey != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSelectedKey));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SelectedKey cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSearchDataResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSearchDataResponse object =
                new DFUSearchDataResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSearchDataResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSearchDataResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OpenLogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OpenLogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ParentName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ParentName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParentName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns1").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns1(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns2").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns2(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns3").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns3(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns4").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns4(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns5").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns5(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns6").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns6(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns7").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns7(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns8").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns8(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns9").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns9(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns10").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns10(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns11").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns11(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns12").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns12(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns13").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns13(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns14").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns14(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns15").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns15(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns16").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns16(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns17").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns17(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns18").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns18(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns19").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns19(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns20").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns20(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns1").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns1(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns2").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns2(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns3").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns3(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns4").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns4(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns5").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns5(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns6").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns6(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns7").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns7(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns8").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns8(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns9").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns9(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns10").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns10(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns11").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns11(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns12").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns12(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns13").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns13(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns14").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns14(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns15").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns15(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns16").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns16(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns17").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns17(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns18").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns18(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns19").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns19(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns20").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns20(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RowCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RowCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRowCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowColumns").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowColumns" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowColumns(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterForGoBack").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterForGoBack" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterForGoBack(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnsHidden").equals(reader.getName())){
                                
                                                object.setColumnsHidden(ColumnsHidden_type1.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Start").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Start" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStart(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Count").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Count" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Total").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Total" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTotal(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Result").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Result" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResult(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MsgToDisplay").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MsgToDisplay" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMsgToDisplay(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","File").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"File" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Key").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Key" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SchemaOnly").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SchemaOnly" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSchemaOnly(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RoxieSelections").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RoxieSelections" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRoxieSelections(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DisableUppercaseTranslation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"DisableUppercaseTranslation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisableUppercaseTranslation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","AutoUppercaseTranslation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"AutoUppercaseTranslation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAutoUppercaseTranslation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SelectedKey").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SelectedKey" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSelectedKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSpaceResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSpaceResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for CountBy
                        */

                        
                                    protected java.lang.String localCountBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountByTracker = false ;

                           public boolean isCountBySpecified(){
                               return localCountByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCountBy(){
                               return localCountBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountBy
                               */
                               public void setCountBy(java.lang.String param){
                            localCountByTracker = param != null;
                                   
                                            this.localCountBy=param;
                                    

                               }
                            

                        /**
                        * field for ScopeUnder
                        */

                        
                                    protected java.lang.String localScopeUnder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localScopeUnderTracker = false ;

                           public boolean isScopeUnderSpecified(){
                               return localScopeUnderTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getScopeUnder(){
                               return localScopeUnder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ScopeUnder
                               */
                               public void setScopeUnder(java.lang.String param){
                            localScopeUnderTracker = param != null;
                                   
                                            this.localScopeUnder=param;
                                    

                               }
                            

                        /**
                        * field for OwnerUnder
                        */

                        
                                    protected java.lang.String localOwnerUnder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerUnderTracker = false ;

                           public boolean isOwnerUnderSpecified(){
                               return localOwnerUnderTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwnerUnder(){
                               return localOwnerUnder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OwnerUnder
                               */
                               public void setOwnerUnder(java.lang.String param){
                            localOwnerUnderTracker = param != null;
                                   
                                            this.localOwnerUnder=param;
                                    

                               }
                            

                        /**
                        * field for Interval
                        */

                        
                                    protected java.lang.String localInterval ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervalTracker = false ;

                           public boolean isIntervalSpecified(){
                               return localIntervalTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getInterval(){
                               return localInterval;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Interval
                               */
                               public void setInterval(java.lang.String param){
                            localIntervalTracker = param != null;
                                   
                                            this.localInterval=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.lang.String localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;

                           public boolean isStartDateSpecified(){
                               return localStartDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.lang.String param){
                            localStartDateTracker = param != null;
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for EndDate
                        */

                        
                                    protected java.lang.String localEndDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndDateTracker = false ;

                           public boolean isEndDateSpecified(){
                               return localEndDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEndDate(){
                               return localEndDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndDate
                               */
                               public void setEndDate(java.lang.String param){
                            localEndDateTracker = param != null;
                                   
                                            this.localEndDate=param;
                                    

                               }
                            

                        /**
                        * field for DFUSpaceItems
                        */

                        
                                    protected ArrayOfDFUSpaceItem localDFUSpaceItems ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUSpaceItemsTracker = false ;

                           public boolean isDFUSpaceItemsSpecified(){
                               return localDFUSpaceItemsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUSpaceItem
                           */
                           public  ArrayOfDFUSpaceItem getDFUSpaceItems(){
                               return localDFUSpaceItems;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUSpaceItems
                               */
                               public void setDFUSpaceItems(ArrayOfDFUSpaceItem param){
                            localDFUSpaceItemsTracker = param != null;
                                   
                                            this.localDFUSpaceItems=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSpaceResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSpaceResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localCountByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountBy", xmlWriter);
                             

                                          if (localCountBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CountBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCountBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localScopeUnderTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ScopeUnder", xmlWriter);
                             

                                          if (localScopeUnder==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ScopeUnder cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localScopeUnder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerUnderTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OwnerUnder", xmlWriter);
                             

                                          if (localOwnerUnder==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("OwnerUnder cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwnerUnder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervalTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Interval", xmlWriter);
                             

                                          if (localInterval==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Interval cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localInterval);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartDate", xmlWriter);
                             

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndDate", xmlWriter);
                             

                                          if (localEndDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEndDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDFUSpaceItemsTracker){
                                            if (localDFUSpaceItems==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUSpaceItems cannot be null!!");
                                            }
                                           localDFUSpaceItems.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUSpaceItems"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localCountByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountBy"));
                                 
                                        if (localCountBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CountBy cannot be null!!");
                                        }
                                    } if (localScopeUnderTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ScopeUnder"));
                                 
                                        if (localScopeUnder != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localScopeUnder));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ScopeUnder cannot be null!!");
                                        }
                                    } if (localOwnerUnderTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OwnerUnder"));
                                 
                                        if (localOwnerUnder != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwnerUnder));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("OwnerUnder cannot be null!!");
                                        }
                                    } if (localIntervalTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Interval"));
                                 
                                        if (localInterval != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInterval));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Interval cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localEndDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndDate"));
                                 
                                        if (localEndDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                        }
                                    } if (localDFUSpaceItemsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUSpaceItems"));
                            
                            
                                    if (localDFUSpaceItems==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUSpaceItems cannot be null!!");
                                    }
                                    elementList.add(localDFUSpaceItems);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSpaceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSpaceResponse object =
                new DFUSpaceResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSpaceResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSpaceResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ScopeUnder").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ScopeUnder" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setScopeUnder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OwnerUnder").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OwnerUnder" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwnerUnder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Interval").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Interval" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setInterval(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUSpaceItems").equals(reader.getName())){
                                
                                                object.setDFUSpaceItems(ArrayOfDFUSpaceItem.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Exceptions
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "Exceptions",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            
                                            this.localExceptions=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localExceptions==null){
                                   throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!");
                                 }
                                 localExceptions.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localExceptions.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Exceptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Exceptions object =
                new Exceptions();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ArrayOfDFUDataColumn
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ArrayOfDFUDataColumn
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for DFUDataColumn
                        * This was an Array!
                        */

                        
                                    protected DFUDataColumn[] localDFUDataColumn ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataColumnTracker = false ;

                           public boolean isDFUDataColumnSpecified(){
                               return localDFUDataColumnTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUDataColumn[]
                           */
                           public  DFUDataColumn[] getDFUDataColumn(){
                               return localDFUDataColumn;
                           }

                           
                        


                               
                              /**
                               * validate the array for DFUDataColumn
                               */
                              protected void validateDFUDataColumn(DFUDataColumn[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DFUDataColumn
                              */
                              public void setDFUDataColumn(DFUDataColumn[] param){
                              
                                   validateDFUDataColumn(param);

                               localDFUDataColumnTracker = param != null;
                                      
                                      this.localDFUDataColumn=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFUDataColumn
                             */
                             public void addDFUDataColumn(DFUDataColumn param){
                                   if (localDFUDataColumn == null){
                                   localDFUDataColumn = new DFUDataColumn[]{};
                                   }

                            
                                 //update the setting tracker
                                localDFUDataColumnTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDFUDataColumn);
                               list.add(param);
                               this.localDFUDataColumn =
                             (DFUDataColumn[])list.toArray(
                            new DFUDataColumn[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ArrayOfDFUDataColumn",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ArrayOfDFUDataColumn",
                           xmlWriter);
                   }

               
                   }
                if (localDFUDataColumnTracker){
                                       if (localDFUDataColumn!=null){
                                            for (int i = 0;i < localDFUDataColumn.length;i++){
                                                if (localDFUDataColumn[i] != null){
                                                 localDFUDataColumn[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataColumn"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DFUDataColumn cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDFUDataColumnTracker){
                             if (localDFUDataColumn!=null) {
                                 for (int i = 0;i < localDFUDataColumn.length;i++){

                                    if (localDFUDataColumn[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "DFUDataColumn"));
                                         elementList.add(localDFUDataColumn[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DFUDataColumn cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ArrayOfDFUDataColumn parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ArrayOfDFUDataColumn object =
                new ArrayOfDFUDataColumn();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ArrayOfDFUDataColumn".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfDFUDataColumn)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataColumn").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataColumn").equals(reader.getName())){
                                                                    list1.add(DFUDataColumn.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDFUDataColumn((DFUDataColumn[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFUDataColumn.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUArrayActionResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUArrayActionResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for BackToPage
                        */

                        
                                    protected java.lang.String localBackToPage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBackToPageTracker = false ;

                           public boolean isBackToPageSpecified(){
                               return localBackToPageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBackToPage(){
                               return localBackToPage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BackToPage
                               */
                               public void setBackToPage(java.lang.String param){
                            localBackToPageTracker = param != null;
                                   
                                            this.localBackToPage=param;
                                    

                               }
                            

                        /**
                        * field for RedirectTo
                        */

                        
                                    protected java.lang.String localRedirectTo ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRedirectToTracker = false ;

                           public boolean isRedirectToSpecified(){
                               return localRedirectToTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRedirectTo(){
                               return localRedirectTo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RedirectTo
                               */
                               public void setRedirectTo(java.lang.String param){
                            localRedirectToTracker = param != null;
                                   
                                            this.localRedirectTo=param;
                                    

                               }
                            

                        /**
                        * field for DFUArrayActionResult
                        */

                        
                                    protected java.lang.String localDFUArrayActionResult ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUArrayActionResultTracker = false ;

                           public boolean isDFUArrayActionResultSpecified(){
                               return localDFUArrayActionResultTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDFUArrayActionResult(){
                               return localDFUArrayActionResult;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUArrayActionResult
                               */
                               public void setDFUArrayActionResult(java.lang.String param){
                            localDFUArrayActionResultTracker = param != null;
                                   
                                            this.localDFUArrayActionResult=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUArrayActionResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUArrayActionResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localBackToPageTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BackToPage", xmlWriter);
                             

                                          if (localBackToPage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBackToPage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRedirectToTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RedirectTo", xmlWriter);
                             

                                          if (localRedirectTo==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("RedirectTo cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRedirectTo);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDFUArrayActionResultTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "DFUArrayActionResult", xmlWriter);
                             

                                          if (localDFUArrayActionResult==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("DFUArrayActionResult cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDFUArrayActionResult);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localBackToPageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BackToPage"));
                                 
                                        if (localBackToPage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBackToPage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                        }
                                    } if (localRedirectToTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RedirectTo"));
                                 
                                        if (localRedirectTo != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRedirectTo));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("RedirectTo cannot be null!!");
                                        }
                                    } if (localDFUArrayActionResultTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUArrayActionResult"));
                                 
                                        if (localDFUArrayActionResult != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDFUArrayActionResult));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("DFUArrayActionResult cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUArrayActionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUArrayActionResponse object =
                new DFUArrayActionResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUArrayActionResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUArrayActionResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BackToPage").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BackToPage" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBackToPage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RedirectTo").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RedirectTo" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRedirectTo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUArrayActionResult").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"DFUArrayActionResult" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDFUArrayActionResult(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSpaceRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSpaceRequest",
                "ns1");

            

                        /**
                        * field for CountBy
                        */

                        
                                    protected java.lang.String localCountBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountByTracker = false ;

                           public boolean isCountBySpecified(){
                               return localCountByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCountBy(){
                               return localCountBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountBy
                               */
                               public void setCountBy(java.lang.String param){
                            localCountByTracker = param != null;
                                   
                                            this.localCountBy=param;
                                    

                               }
                            

                        /**
                        * field for ScopeUnder
                        */

                        
                                    protected java.lang.String localScopeUnder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localScopeUnderTracker = false ;

                           public boolean isScopeUnderSpecified(){
                               return localScopeUnderTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getScopeUnder(){
                               return localScopeUnder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ScopeUnder
                               */
                               public void setScopeUnder(java.lang.String param){
                            localScopeUnderTracker = param != null;
                                   
                                            this.localScopeUnder=param;
                                    

                               }
                            

                        /**
                        * field for OwnerUnder
                        */

                        
                                    protected java.lang.String localOwnerUnder ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerUnderTracker = false ;

                           public boolean isOwnerUnderSpecified(){
                               return localOwnerUnderTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwnerUnder(){
                               return localOwnerUnder;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OwnerUnder
                               */
                               public void setOwnerUnder(java.lang.String param){
                            localOwnerUnderTracker = param != null;
                                   
                                            this.localOwnerUnder=param;
                                    

                               }
                            

                        /**
                        * field for Interval
                        */

                        
                                    protected java.lang.String localInterval ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervalTracker = false ;

                           public boolean isIntervalSpecified(){
                               return localIntervalTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getInterval(){
                               return localInterval;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Interval
                               */
                               public void setInterval(java.lang.String param){
                            localIntervalTracker = param != null;
                                   
                                            this.localInterval=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.lang.String localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;

                           public boolean isStartDateSpecified(){
                               return localStartDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.lang.String param){
                            localStartDateTracker = param != null;
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for EndDate
                        */

                        
                                    protected java.lang.String localEndDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndDateTracker = false ;

                           public boolean isEndDateSpecified(){
                               return localEndDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEndDate(){
                               return localEndDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndDate
                               */
                               public void setEndDate(java.lang.String param){
                            localEndDateTracker = param != null;
                                   
                                            this.localEndDate=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSpaceRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSpaceRequest",
                           xmlWriter);
                   }

               
                   }
                if (localCountByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountBy", xmlWriter);
                             

                                          if (localCountBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("CountBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCountBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localScopeUnderTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ScopeUnder", xmlWriter);
                             

                                          if (localScopeUnder==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ScopeUnder cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localScopeUnder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerUnderTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OwnerUnder", xmlWriter);
                             

                                          if (localOwnerUnder==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("OwnerUnder cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwnerUnder);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervalTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Interval", xmlWriter);
                             

                                          if (localInterval==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Interval cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localInterval);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartDate", xmlWriter);
                             

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndDate", xmlWriter);
                             

                                          if (localEndDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEndDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCountByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountBy"));
                                 
                                        if (localCountBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("CountBy cannot be null!!");
                                        }
                                    } if (localScopeUnderTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ScopeUnder"));
                                 
                                        if (localScopeUnder != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localScopeUnder));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ScopeUnder cannot be null!!");
                                        }
                                    } if (localOwnerUnderTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OwnerUnder"));
                                 
                                        if (localOwnerUnder != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwnerUnder));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("OwnerUnder cannot be null!!");
                                        }
                                    } if (localIntervalTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Interval"));
                                 
                                        if (localInterval != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInterval));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Interval cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localEndDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndDate"));
                                 
                                        if (localEndDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSpaceRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSpaceRequest object =
                new DFUSpaceRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSpaceRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSpaceRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ScopeUnder").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ScopeUnder" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setScopeUnder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OwnerUnder").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OwnerUnder" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwnerUnder(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Interval").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Interval" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setInterval(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Graphs_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = Graphs_type0
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for ECLGraph
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localECLGraph ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localECLGraphTracker = false ;

                           public boolean isECLGraphSpecified(){
                               return localECLGraphTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getECLGraph(){
                               return localECLGraph;
                           }

                           
                        


                               
                              /**
                               * validate the array for ECLGraph
                               */
                              protected void validateECLGraph(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param ECLGraph
                              */
                              public void setECLGraph(java.lang.String[] param){
                              
                                   validateECLGraph(param);

                               localECLGraphTracker = param != null;
                                      
                                      this.localECLGraph=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addECLGraph(java.lang.String param){
                                   if (localECLGraph == null){
                                   localECLGraph = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localECLGraphTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localECLGraph);
                               list.add(param);
                               this.localECLGraph =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":Graphs_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "Graphs_type0",
                           xmlWriter);
                   }

               
                   }
                if (localECLGraphTracker){
                             if (localECLGraph!=null) {
                                   namespace = "urn:hpccsystems:ws:wsdfu";
                                   for (int i = 0;i < localECLGraph.length;i++){
                                        
                                            if (localECLGraph[i] != null){
                                        
                                                writeStartElement(null, namespace, "ECLGraph", xmlWriter);

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localECLGraph[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // we have to do nothing since minOccurs is zero
                                                       
                                                }

                                   }
                             } else {
                                 
                                         throw new org.apache.axis2.databinding.ADBException("ECLGraph cannot be null!!");
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localECLGraphTracker){
                            if (localECLGraph!=null){
                                  for (int i = 0;i < localECLGraph.length;i++){
                                      
                                         if (localECLGraph[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                              "ECLGraph"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localECLGraph[i]));
                                          } else {
                                             
                                                    // have to do nothing
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    throw new org.apache.axis2.databinding.ADBException("ECLGraph cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Graphs_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Graphs_type0 object =
                new Graphs_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"Graphs_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Graphs_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ECLGraph").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(reader.getElementText());
                                            
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone1 = false;
                                            while(!loopDone1){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone1 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ECLGraph").equals(reader.getName())){
                                                         list1.add(reader.getElementText());
                                                        
                                                    }else{
                                                        loopDone1 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setECLGraph((java.lang.String[])
                                                        list1.toArray(new java.lang.String[list1.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class EspException
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = EspException
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Code
                        */

                        
                                    protected java.lang.String localCode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCodeTracker = false ;

                           public boolean isCodeSpecified(){
                               return localCodeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCode(){
                               return localCode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Code
                               */
                               public void setCode(java.lang.String param){
                            localCodeTracker = param != null;
                                   
                                            this.localCode=param;
                                    

                               }
                            

                        /**
                        * field for Audience
                        */

                        
                                    protected java.lang.String localAudience ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAudienceTracker = false ;

                           public boolean isAudienceSpecified(){
                               return localAudienceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAudience(){
                               return localAudience;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Audience
                               */
                               public void setAudience(java.lang.String param){
                            localAudienceTracker = param != null;
                                   
                                            this.localAudience=param;
                                    

                               }
                            

                        /**
                        * field for Source
                        */

                        
                                    protected java.lang.String localSource ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSourceTracker = false ;

                           public boolean isSourceSpecified(){
                               return localSourceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource(){
                               return localSource;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source
                               */
                               public void setSource(java.lang.String param){
                            localSourceTracker = param != null;
                                   
                                            this.localSource=param;
                                    

                               }
                            

                        /**
                        * field for Message
                        */

                        
                                    protected java.lang.String localMessage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMessageTracker = false ;

                           public boolean isMessageSpecified(){
                               return localMessageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMessage(){
                               return localMessage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Message
                               */
                               public void setMessage(java.lang.String param){
                            localMessageTracker = param != null;
                                   
                                            this.localMessage=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":EspException",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "EspException",
                           xmlWriter);
                   }

               
                   }
                if (localCodeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Code", xmlWriter);
                             

                                          if (localCode==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Code cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCode);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAudienceTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Audience", xmlWriter);
                             

                                          if (localAudience==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Audience cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAudience);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSourceTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Source", xmlWriter);
                             

                                          if (localSource==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMessageTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Message", xmlWriter);
                             

                                          if (localMessage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Message cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMessage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localCodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Code"));
                                 
                                        if (localCode != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCode));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Code cannot be null!!");
                                        }
                                    } if (localAudienceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Audience"));
                                 
                                        if (localAudience != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAudience));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Audience cannot be null!!");
                                        }
                                    } if (localSourceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Source"));
                                 
                                        if (localSource != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source cannot be null!!");
                                        }
                                    } if (localMessageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Message"));
                                 
                                        if (localMessage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Message cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EspException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EspException object =
                new EspException();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"EspException".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (EspException)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Code").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Code" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Audience").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Audience" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAudience(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Source").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Message").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Message" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMessage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUBrowseDataResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUBrowseDataResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for FilterBy
                        */

                        
                                    protected java.lang.String localFilterBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterByTracker = false ;

                           public boolean isFilterBySpecified(){
                               return localFilterByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterBy(){
                               return localFilterBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterBy
                               */
                               public void setFilterBy(java.lang.String param){
                            localFilterByTracker = param != null;
                                   
                                            this.localFilterBy=param;
                                    

                               }
                            

                        /**
                        * field for FilterForGoBack
                        */

                        
                                    protected java.lang.String localFilterForGoBack ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterForGoBackTracker = false ;

                           public boolean isFilterForGoBackSpecified(){
                               return localFilterForGoBackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterForGoBack(){
                               return localFilterForGoBack;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterForGoBack
                               */
                               public void setFilterForGoBack(java.lang.String param){
                            localFilterForGoBackTracker = param != null;
                                   
                                            this.localFilterForGoBack=param;
                                    

                               }
                            

                        /**
                        * field for ColumnsHidden
                        */

                        
                                    protected ColumnsHidden_type0 localColumnsHidden ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnsHiddenTracker = false ;

                           public boolean isColumnsHiddenSpecified(){
                               return localColumnsHiddenTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ColumnsHidden_type0
                           */
                           public  ColumnsHidden_type0 getColumnsHidden(){
                               return localColumnsHidden;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnsHidden
                               */
                               public void setColumnsHidden(ColumnsHidden_type0 param){
                            localColumnsHiddenTracker = param != null;
                                   
                                            this.localColumnsHidden=param;
                                    

                               }
                            

                        /**
                        * field for ColumnCount
                        */

                        
                                    protected int localColumnCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnCountTracker = false ;

                           public boolean isColumnCountSpecified(){
                               return localColumnCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getColumnCount(){
                               return localColumnCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnCount
                               */
                               public void setColumnCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localColumnCountTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localColumnCount=param;
                                    

                               }
                            

                        /**
                        * field for StartForGoback
                        */

                        
                                    protected long localStartForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartForGobackTracker = false ;

                           public boolean isStartForGobackSpecified(){
                               return localStartForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartForGoback(){
                               return localStartForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartForGoback
                               */
                               public void setStartForGoback(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartForGobackTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartForGoback=param;
                                    

                               }
                            

                        /**
                        * field for CountForGoback
                        */

                        
                                    protected int localCountForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountForGobackTracker = false ;

                           public boolean isCountForGobackSpecified(){
                               return localCountForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCountForGoback(){
                               return localCountForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountForGoback
                               */
                               public void setCountForGoback(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountForGobackTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCountForGoback=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for SchemaOnly
                        */

                        
                                    protected boolean localSchemaOnly =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSchemaOnlyTracker = false ;

                           public boolean isSchemaOnlySpecified(){
                               return localSchemaOnlyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSchemaOnly(){
                               return localSchemaOnly;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SchemaOnly
                               */
                               public void setSchemaOnly(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localSchemaOnlyTracker =
                                       true;
                                   
                                            this.localSchemaOnly=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

                        /**
                        * field for ParentName
                        */

                        
                                    protected java.lang.String localParentName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localParentNameTracker = false ;

                           public boolean isParentNameSpecified(){
                               return localParentNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParentName(){
                               return localParentName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ParentName
                               */
                               public void setParentName(java.lang.String param){
                            localParentNameTracker = param != null;
                                   
                                            this.localParentName=param;
                                    

                               }
                            

                        /**
                        * field for Start
                        */

                        
                                    protected long localStart ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartTracker = false ;

                           public boolean isStartSpecified(){
                               return localStartTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStart(){
                               return localStart;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Start
                               */
                               public void setStart(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStart=param;
                                    

                               }
                            

                        /**
                        * field for Count
                        */

                        
                                    protected long localCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountTracker = false ;

                           public boolean isCountSpecified(){
                               return localCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getCount(){
                               return localCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Count
                               */
                               public void setCount(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localCount=param;
                                    

                               }
                            

                        /**
                        * field for PageSize
                        */

                        
                                    protected long localPageSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageSizeTracker = false ;

                           public boolean isPageSizeSpecified(){
                               return localPageSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getPageSize(){
                               return localPageSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageSize
                               */
                               public void setPageSize(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageSizeTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localPageSize=param;
                                    

                               }
                            

                        /**
                        * field for Total
                        */

                        
                                    protected long localTotal ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTotalTracker = false ;

                           public boolean isTotalSpecified(){
                               return localTotalTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getTotal(){
                               return localTotal;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Total
                               */
                               public void setTotal(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localTotalTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localTotal=param;
                                    

                               }
                            

                        /**
                        * field for Result
                        */

                        
                                    protected java.lang.String localResult ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResultTracker = false ;

                           public boolean isResultSpecified(){
                               return localResultTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResult(){
                               return localResult;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Result
                               */
                               public void setResult(java.lang.String param){
                            localResultTracker = param != null;
                                   
                                            this.localResult=param;
                                    

                               }
                            

                        /**
                        * field for MsgToDisplay
                        */

                        
                                    protected java.lang.String localMsgToDisplay ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMsgToDisplayTracker = false ;

                           public boolean isMsgToDisplaySpecified(){
                               return localMsgToDisplayTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMsgToDisplay(){
                               return localMsgToDisplay;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MsgToDisplay
                               */
                               public void setMsgToDisplay(java.lang.String param){
                            localMsgToDisplayTracker = param != null;
                                   
                                            this.localMsgToDisplay=param;
                                    

                               }
                            

                        /**
                        * field for DisableUppercaseTranslation
                        */

                        
                                    protected boolean localDisableUppercaseTranslation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisableUppercaseTranslationTracker = false ;

                           public boolean isDisableUppercaseTranslationSpecified(){
                               return localDisableUppercaseTranslationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDisableUppercaseTranslation(){
                               return localDisableUppercaseTranslation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisableUppercaseTranslation
                               */
                               public void setDisableUppercaseTranslation(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDisableUppercaseTranslationTracker =
                                       true;
                                   
                                            this.localDisableUppercaseTranslation=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUBrowseDataResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUBrowseDataResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterBy", xmlWriter);
                             

                                          if (localFilterBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterForGoBackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterForGoBack", xmlWriter);
                             

                                          if (localFilterForGoBack==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterForGoBack cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterForGoBack);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localColumnsHiddenTracker){
                                            if (localColumnsHidden==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ColumnsHidden cannot be null!!");
                                            }
                                           localColumnsHidden.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnsHidden"),
                                               xmlWriter);
                                        } if (localColumnCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnCount", xmlWriter);
                             
                                               if (localColumnCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ColumnCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartForGoback", xmlWriter);
                             
                                               if (localStartForGoback==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountForGoback", xmlWriter);
                             
                                               if (localCountForGoback==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("CountForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSchemaOnlyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SchemaOnly", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("SchemaOnly cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localParentNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ParentName", xmlWriter);
                             

                                          if (localParentName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParentName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Start", xmlWriter);
                             
                                               if (localStart==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Start cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Count", xmlWriter);
                             
                                               if (localCount==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Count cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageSize", xmlWriter);
                             
                                               if (localPageSize==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTotalTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Total", xmlWriter);
                             
                                               if (localTotal==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Total cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotal));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResultTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Result", xmlWriter);
                             

                                          if (localResult==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Result cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResult);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMsgToDisplayTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MsgToDisplay", xmlWriter);
                             

                                          if (localMsgToDisplay==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MsgToDisplay cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMsgToDisplay);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDisableUppercaseTranslationTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "DisableUppercaseTranslation", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("DisableUppercaseTranslation cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localFilterByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterBy"));
                                 
                                        if (localFilterBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                        }
                                    } if (localFilterForGoBackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterForGoBack"));
                                 
                                        if (localFilterForGoBack != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterForGoBack));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterForGoBack cannot be null!!");
                                        }
                                    } if (localColumnsHiddenTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnsHidden"));
                            
                            
                                    if (localColumnsHidden==null){
                                         throw new org.apache.axis2.databinding.ADBException("ColumnsHidden cannot be null!!");
                                    }
                                    elementList.add(localColumnsHidden);
                                } if (localColumnCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnCount));
                            } if (localStartForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                            } if (localCountForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                            } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localSchemaOnlyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SchemaOnly"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                            } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    } if (localParentNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ParentName"));
                                 
                                        if (localParentName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                        }
                                    } if (localStartTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Start"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                            } if (localCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Count"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                            } if (localPageSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                            } if (localTotalTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Total"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotal));
                            } if (localResultTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Result"));
                                 
                                        if (localResult != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResult));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Result cannot be null!!");
                                        }
                                    } if (localMsgToDisplayTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MsgToDisplay"));
                                 
                                        if (localMsgToDisplay != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMsgToDisplay));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MsgToDisplay cannot be null!!");
                                        }
                                    } if (localDisableUppercaseTranslationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DisableUppercaseTranslation"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUBrowseDataResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUBrowseDataResponse object =
                new DFUBrowseDataResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUBrowseDataResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUBrowseDataResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterForGoBack").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterForGoBack" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterForGoBack(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnsHidden").equals(reader.getName())){
                                
                                                object.setColumnsHidden(ColumnsHidden_type0.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SchemaOnly").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SchemaOnly" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSchemaOnly(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ParentName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ParentName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParentName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Start").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Start" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStart(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Count").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Count" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Total").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Total" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTotal(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Result").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Result" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResult(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MsgToDisplay").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MsgToDisplay" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMsgToDisplay(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DisableUppercaseTranslation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"DisableUppercaseTranslation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisableUppercaseTranslation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUDefFileRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUDefFileRequest",
                "ns1");

            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for Format
                        */

                        
                                    protected java.lang.String localFormat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFormatTracker = false ;

                           public boolean isFormatSpecified(){
                               return localFormatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFormat(){
                               return localFormat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Format
                               */
                               public void setFormat(java.lang.String param){
                            localFormatTracker = param != null;
                                   
                                            this.localFormat=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUDefFileRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUDefFileRequest",
                           xmlWriter);
                   }

               
                   }
                if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFormatTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Format", xmlWriter);
                             

                                          if (localFormat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Format cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFormat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localFormatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Format"));
                                 
                                        if (localFormat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Format cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUDefFileRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUDefFileRequest object =
                new DFUDefFileRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUDefFileRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUDefFileRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Format").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Format" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFormat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class FileTypes_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = FileTypes_type0
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for FileType
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localFileType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTypeTracker = false ;

                           public boolean isFileTypeSpecified(){
                               return localFileTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getFileType(){
                               return localFileType;
                           }

                           
                        


                               
                              /**
                               * validate the array for FileType
                               */
                              protected void validateFileType(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param FileType
                              */
                              public void setFileType(java.lang.String[] param){
                              
                                   validateFileType(param);

                               localFileTypeTracker = param != null;
                                      
                                      this.localFileType=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addFileType(java.lang.String param){
                                   if (localFileType == null){
                                   localFileType = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localFileTypeTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localFileType);
                               list.add(param);
                               this.localFileType =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":FileTypes_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "FileTypes_type0",
                           xmlWriter);
                   }

               
                   }
                if (localFileTypeTracker){
                             if (localFileType!=null) {
                                   namespace = "urn:hpccsystems:ws:wsdfu";
                                   for (int i = 0;i < localFileType.length;i++){
                                        
                                            if (localFileType[i] != null){
                                        
                                                writeStartElement(null, namespace, "FileType", xmlWriter);

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileType[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // we have to do nothing since minOccurs is zero
                                                       
                                                }

                                   }
                             } else {
                                 
                                         throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localFileTypeTracker){
                            if (localFileType!=null){
                                  for (int i = 0;i < localFileType.length;i++){
                                      
                                         if (localFileType[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                              "FileType"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileType[i]));
                                          } else {
                                             
                                                    // have to do nothing
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static FileTypes_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            FileTypes_type0 object =
                new FileTypes_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"FileTypes_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (FileTypes_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileType").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(reader.getElementText());
                                            
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone1 = false;
                                            while(!loopDone1){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone1 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileType").equals(reader.getName())){
                                                         list1.add(reader.getElementText());
                                                        
                                                    }else{
                                                        loopDone1 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setFileType((java.lang.String[])
                                                        list1.toArray(new java.lang.String[list1.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddtoSuperfileResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddtoSuperfileResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected java.lang.String localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(java.lang.String param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

                        /**
                        * field for BackToPage
                        */

                        
                                    protected java.lang.String localBackToPage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBackToPageTracker = false ;

                           public boolean isBackToPageSpecified(){
                               return localBackToPageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBackToPage(){
                               return localBackToPage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BackToPage
                               */
                               public void setBackToPage(java.lang.String param){
                            localBackToPageTracker = param != null;
                                   
                                            this.localBackToPage=param;
                                    

                               }
                            

                        /**
                        * field for SubfileNames
                        */

                        
                                    protected SubfileNames_type0 localSubfileNames ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfileNamesTracker = false ;

                           public boolean isSubfileNamesSpecified(){
                               return localSubfileNamesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return SubfileNames_type0
                           */
                           public  SubfileNames_type0 getSubfileNames(){
                               return localSubfileNames;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SubfileNames
                               */
                               public void setSubfileNames(SubfileNames_type0 param){
                            localSubfileNamesTracker = param != null;
                                   
                                            this.localSubfileNames=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddtoSuperfileResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddtoSuperfileResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localSubfilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Subfiles", xmlWriter);
                             

                                          if (localSubfiles==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Subfiles cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSubfiles);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBackToPageTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BackToPage", xmlWriter);
                             

                                          if (localBackToPage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBackToPage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfileNamesTracker){
                                            if (localSubfileNames==null){
                                                 throw new org.apache.axis2.databinding.ADBException("SubfileNames cannot be null!!");
                                            }
                                           localSubfileNames.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SubfileNames"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localSubfilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Subfiles"));
                                 
                                        if (localSubfiles != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubfiles));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Subfiles cannot be null!!");
                                        }
                                    } if (localBackToPageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BackToPage"));
                                 
                                        if (localBackToPage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBackToPage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                        }
                                    } if (localSubfileNamesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SubfileNames"));
                            
                            
                                    if (localSubfileNames==null){
                                         throw new org.apache.axis2.databinding.ADBException("SubfileNames cannot be null!!");
                                    }
                                    elementList.add(localSubfileNames);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddtoSuperfileResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddtoSuperfileResponse object =
                new AddtoSuperfileResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddtoSuperfileResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddtoSuperfileResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Subfiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Subfiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubfiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BackToPage").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BackToPage" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBackToPage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SubfileNames").equals(reader.getName())){
                                
                                                object.setSubfileNames(SubfileNames_type0.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUFileViewResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUFileViewResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Scope
                        */

                        
                                    protected java.lang.String localScope ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localScopeTracker = false ;

                           public boolean isScopeSpecified(){
                               return localScopeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getScope(){
                               return localScope;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Scope
                               */
                               public void setScope(java.lang.String param){
                            localScopeTracker = param != null;
                                   
                                            this.localScope=param;
                                    

                               }
                            

                        /**
                        * field for NumFiles
                        */

                        
                                    protected int localNumFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumFilesTracker = false ;

                           public boolean isNumFilesSpecified(){
                               return localNumFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNumFiles(){
                               return localNumFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumFiles
                               */
                               public void setNumFiles(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNumFilesTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNumFiles=param;
                                    

                               }
                            

                        /**
                        * field for DFULogicalFiles
                        */

                        
                                    protected ArrayOfDFULogicalFile localDFULogicalFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFULogicalFilesTracker = false ;

                           public boolean isDFULogicalFilesSpecified(){
                               return localDFULogicalFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFULogicalFile
                           */
                           public  ArrayOfDFULogicalFile getDFULogicalFiles(){
                               return localDFULogicalFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFULogicalFiles
                               */
                               public void setDFULogicalFiles(ArrayOfDFULogicalFile param){
                            localDFULogicalFilesTracker = param != null;
                                   
                                            this.localDFULogicalFiles=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUFileViewResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUFileViewResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localScopeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Scope", xmlWriter);
                             

                                          if (localScope==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Scope cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localScope);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumFilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NumFiles", xmlWriter);
                             
                                               if (localNumFiles==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NumFiles cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumFiles));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDFULogicalFilesTracker){
                                            if (localDFULogicalFiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFULogicalFiles cannot be null!!");
                                            }
                                           localDFULogicalFiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFiles"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localScopeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Scope"));
                                 
                                        if (localScope != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localScope));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Scope cannot be null!!");
                                        }
                                    } if (localNumFilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NumFiles"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumFiles));
                            } if (localDFULogicalFilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFULogicalFiles"));
                            
                            
                                    if (localDFULogicalFiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFULogicalFiles cannot be null!!");
                                    }
                                    elementList.add(localDFULogicalFiles);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUFileViewResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUFileViewResponse object =
                new DFUFileViewResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUFileViewResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUFileViewResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Scope").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Scope" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setScope(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NumFiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NumFiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumFiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFiles").equals(reader.getName())){
                                
                                                object.setDFULogicalFiles(ArrayOfDFULogicalFile.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SubfileNames_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = SubfileNames_type0
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for SubfileName
                        * This was an Array!
                        */

                        
                                    protected java.lang.String[] localSubfileName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfileNameTracker = false ;

                           public boolean isSubfileNameSpecified(){
                               return localSubfileNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String[]
                           */
                           public  java.lang.String[] getSubfileName(){
                               return localSubfileName;
                           }

                           
                        


                               
                              /**
                               * validate the array for SubfileName
                               */
                              protected void validateSubfileName(java.lang.String[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param SubfileName
                              */
                              public void setSubfileName(java.lang.String[] param){
                              
                                   validateSubfileName(param);

                               localSubfileNameTracker = param != null;
                                      
                                      this.localSubfileName=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param java.lang.String
                             */
                             public void addSubfileName(java.lang.String param){
                                   if (localSubfileName == null){
                                   localSubfileName = new java.lang.String[]{};
                                   }

                            
                                 //update the setting tracker
                                localSubfileNameTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localSubfileName);
                               list.add(param);
                               this.localSubfileName =
                             (java.lang.String[])list.toArray(
                            new java.lang.String[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SubfileNames_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SubfileNames_type0",
                           xmlWriter);
                   }

               
                   }
                if (localSubfileNameTracker){
                             if (localSubfileName!=null) {
                                   namespace = "urn:hpccsystems:ws:wsdfu";
                                   for (int i = 0;i < localSubfileName.length;i++){
                                        
                                            if (localSubfileName[i] != null){
                                        
                                                writeStartElement(null, namespace, "SubfileName", xmlWriter);

                                            
                                                        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubfileName[i]));
                                                    
                                                xmlWriter.writeEndElement();
                                              
                                                } else {
                                                   
                                                           // we have to do nothing since minOccurs is zero
                                                       
                                                }

                                   }
                             } else {
                                 
                                         throw new org.apache.axis2.databinding.ADBException("SubfileName cannot be null!!");
                                    
                             }

                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localSubfileNameTracker){
                            if (localSubfileName!=null){
                                  for (int i = 0;i < localSubfileName.length;i++){
                                      
                                         if (localSubfileName[i] != null){
                                          elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                              "SubfileName"));
                                          elementList.add(
                                          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubfileName[i]));
                                          } else {
                                             
                                                    // have to do nothing
                                                
                                          }
                                      

                                  }
                            } else {
                              
                                    throw new org.apache.axis2.databinding.ADBException("SubfileName cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SubfileNames_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SubfileNames_type0 object =
                new SubfileNames_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SubfileNames_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SubfileNames_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SubfileName").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(reader.getElementText());
                                            
                                            //loop until we find a start element that is not part of this array
                                            boolean loopDone1 = false;
                                            while(!loopDone1){
                                                // Ensure we are at the EndElement
                                                while (!reader.isEndElement()){
                                                    reader.next();
                                                }
                                                // Step out of this element
                                                reader.next();
                                                // Step to next element event.
                                                while (!reader.isStartElement() && !reader.isEndElement())
                                                    reader.next();
                                                if (reader.isEndElement()){
                                                    //two continuous end elements means we are exiting the xml structure
                                                    loopDone1 = true;
                                                } else {
                                                    if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SubfileName").equals(reader.getName())){
                                                         list1.add(reader.getElementText());
                                                        
                                                    }else{
                                                        loopDone1 = true;
                                                    }
                                                }
                                            }
                                            // call the converter utility  to convert and set the array
                                            
                                                    object.setSubfileName((java.lang.String[])
                                                        list1.toArray(new java.lang.String[list1.size()]));
                                                
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ArrayOfDFUSpaceItem
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = ArrayOfDFUSpaceItem
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for DFUSpaceItem
                        * This was an Array!
                        */

                        
                                    protected DFUSpaceItem[] localDFUSpaceItem ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUSpaceItemTracker = false ;

                           public boolean isDFUSpaceItemSpecified(){
                               return localDFUSpaceItemTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUSpaceItem[]
                           */
                           public  DFUSpaceItem[] getDFUSpaceItem(){
                               return localDFUSpaceItem;
                           }

                           
                        


                               
                              /**
                               * validate the array for DFUSpaceItem
                               */
                              protected void validateDFUSpaceItem(DFUSpaceItem[] param){
                             
                              }


                             /**
                              * Auto generated setter method
                              * @param param DFUSpaceItem
                              */
                              public void setDFUSpaceItem(DFUSpaceItem[] param){
                              
                                   validateDFUSpaceItem(param);

                               localDFUSpaceItemTracker = param != null;
                                      
                                      this.localDFUSpaceItem=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param DFUSpaceItem
                             */
                             public void addDFUSpaceItem(DFUSpaceItem param){
                                   if (localDFUSpaceItem == null){
                                   localDFUSpaceItem = new DFUSpaceItem[]{};
                                   }

                            
                                 //update the setting tracker
                                localDFUSpaceItemTracker = true;
                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localDFUSpaceItem);
                               list.add(param);
                               this.localDFUSpaceItem =
                             (DFUSpaceItem[])list.toArray(
                            new DFUSpaceItem[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":ArrayOfDFUSpaceItem",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "ArrayOfDFUSpaceItem",
                           xmlWriter);
                   }

               
                   }
                if (localDFUSpaceItemTracker){
                                       if (localDFUSpaceItem!=null){
                                            for (int i = 0;i < localDFUSpaceItem.length;i++){
                                                if (localDFUSpaceItem[i] != null){
                                                 localDFUSpaceItem[i].serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUSpaceItem"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                        // we don't have to do any thing since minOccures is zero
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("DFUSpaceItem cannot be null!!");
                                        
                                    }
                                 }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localDFUSpaceItemTracker){
                             if (localDFUSpaceItem!=null) {
                                 for (int i = 0;i < localDFUSpaceItem.length;i++){

                                    if (localDFUSpaceItem[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                          "DFUSpaceItem"));
                                         elementList.add(localDFUSpaceItem[i]);
                                    } else {
                                        
                                                // nothing to do
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("DFUSpaceItem cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static ArrayOfDFUSpaceItem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            ArrayOfDFUSpaceItem object =
                new ArrayOfDFUSpaceItem();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"ArrayOfDFUSpaceItem".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfDFUSpaceItem)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUSpaceItem").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(DFUSpaceItem.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUSpaceItem").equals(reader.getName())){
                                                                    list1.add(DFUSpaceItem.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setDFUSpaceItem((DFUSpaceItem[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                DFUSpaceItem.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUDataColumn
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFUDataColumn
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for ColumnLabel
                        */

                        
                                    protected java.lang.String localColumnLabel ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnLabelTracker = false ;

                           public boolean isColumnLabelSpecified(){
                               return localColumnLabelTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getColumnLabel(){
                               return localColumnLabel;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnLabel
                               */
                               public void setColumnLabel(java.lang.String param){
                            localColumnLabelTracker = param != null;
                                   
                                            this.localColumnLabel=param;
                                    

                               }
                            

                        /**
                        * field for ColumnType
                        */

                        
                                    protected java.lang.String localColumnType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnTypeTracker = false ;

                           public boolean isColumnTypeSpecified(){
                               return localColumnTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getColumnType(){
                               return localColumnType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnType
                               */
                               public void setColumnType(java.lang.String param){
                            localColumnTypeTracker = param != null;
                                   
                                            this.localColumnType=param;
                                    

                               }
                            

                        /**
                        * field for ColumnValue
                        */

                        
                                    protected java.lang.String localColumnValue ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnValueTracker = false ;

                           public boolean isColumnValueSpecified(){
                               return localColumnValueTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getColumnValue(){
                               return localColumnValue;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnValue
                               */
                               public void setColumnValue(java.lang.String param){
                            localColumnValueTracker = param != null;
                                   
                                            this.localColumnValue=param;
                                    

                               }
                            

                        /**
                        * field for ColumnSize
                        */

                        
                                    protected int localColumnSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localColumnSizeTracker = false ;

                           public boolean isColumnSizeSpecified(){
                               return localColumnSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getColumnSize(){
                               return localColumnSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ColumnSize
                               */
                               public void setColumnSize(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localColumnSizeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localColumnSize=param;
                                    

                               }
                            

                        /**
                        * field for MaxSize
                        */

                        
                                    protected int localMaxSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxSizeTracker = false ;

                           public boolean isMaxSizeSpecified(){
                               return localMaxSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getMaxSize(){
                               return localMaxSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxSize
                               */
                               public void setMaxSize(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localMaxSizeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localMaxSize=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUDataColumn",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUDataColumn",
                           xmlWriter);
                   }

               
                   }
                if (localColumnLabelTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnLabel", xmlWriter);
                             

                                          if (localColumnLabel==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ColumnLabel cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localColumnLabel);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localColumnTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnType", xmlWriter);
                             

                                          if (localColumnType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ColumnType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localColumnType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localColumnValueTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnValue", xmlWriter);
                             

                                          if (localColumnValue==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ColumnValue cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localColumnValue);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localColumnSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ColumnSize", xmlWriter);
                             
                                               if (localColumnSize==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ColumnSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMaxSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MaxSize", xmlWriter);
                             
                                               if (localMaxSize==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("MaxSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localColumnLabelTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnLabel"));
                                 
                                        if (localColumnLabel != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnLabel));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ColumnLabel cannot be null!!");
                                        }
                                    } if (localColumnTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnType"));
                                 
                                        if (localColumnType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ColumnType cannot be null!!");
                                        }
                                    } if (localColumnValueTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnValue"));
                                 
                                        if (localColumnValue != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnValue));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ColumnValue cannot be null!!");
                                        }
                                    } if (localColumnSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ColumnSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localColumnSize));
                            } if (localMaxSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MaxSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSize));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUDataColumn parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUDataColumn object =
                new DFUDataColumn();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUDataColumn".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUDataColumn)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnLabel").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnLabel" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnLabel(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnValue").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnValue" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnValue(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ColumnSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ColumnSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setColumnSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MaxSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MaxSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSearchDataRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSearchDataRequest",
                "ns1");

            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

                        /**
                        * field for OpenLogicalName
                        */

                        
                                    protected java.lang.String localOpenLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOpenLogicalNameTracker = false ;

                           public boolean isOpenLogicalNameSpecified(){
                               return localOpenLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOpenLogicalName(){
                               return localOpenLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param OpenLogicalName
                               */
                               public void setOpenLogicalName(java.lang.String param){
                            localOpenLogicalNameTracker = param != null;
                                   
                                            this.localOpenLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for FilterBy
                        */

                        
                                    protected java.lang.String localFilterBy ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFilterByTracker = false ;

                           public boolean isFilterBySpecified(){
                               return localFilterByTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilterBy(){
                               return localFilterBy;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FilterBy
                               */
                               public void setFilterBy(java.lang.String param){
                            localFilterByTracker = param != null;
                                   
                                            this.localFilterBy=param;
                                    

                               }
                            

                        /**
                        * field for ShowColumns
                        */

                        
                                    protected java.lang.String localShowColumns ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowColumnsTracker = false ;

                           public boolean isShowColumnsSpecified(){
                               return localShowColumnsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowColumns(){
                               return localShowColumns;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowColumns
                               */
                               public void setShowColumns(java.lang.String param){
                            localShowColumnsTracker = param != null;
                                   
                                            this.localShowColumns=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for StartIndex
                        */

                        
                                    protected long localStartIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartIndexTracker = false ;

                           public boolean isStartIndexSpecified(){
                               return localStartIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartIndex(){
                               return localStartIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartIndex
                               */
                               public void setStartIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartIndex=param;
                                    

                               }
                            

                        /**
                        * field for EndIndex
                        */

                        
                                    protected long localEndIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndIndexTracker = false ;

                           public boolean isEndIndexSpecified(){
                               return localEndIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getEndIndex(){
                               return localEndIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndIndex
                               */
                               public void setEndIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localEndIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localEndIndex=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for ParentName
                        */

                        
                                    protected java.lang.String localParentName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localParentNameTracker = false ;

                           public boolean isParentNameSpecified(){
                               return localParentNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParentName(){
                               return localParentName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ParentName
                               */
                               public void setParentName(java.lang.String param){
                            localParentNameTracker = param != null;
                                   
                                            this.localParentName=param;
                                    

                               }
                            

                        /**
                        * field for StartForGoback
                        */

                        
                                    protected long localStartForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartForGobackTracker = false ;

                           public boolean isStartForGobackSpecified(){
                               return localStartForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartForGoback(){
                               return localStartForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartForGoback
                               */
                               public void setStartForGoback(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartForGobackTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartForGoback=param;
                                    

                               }
                            

                        /**
                        * field for CountForGoback
                        */

                        
                                    protected int localCountForGoback ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountForGobackTracker = false ;

                           public boolean isCountForGobackSpecified(){
                               return localCountForGobackTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCountForGoback(){
                               return localCountForGoback;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param CountForGoback
                               */
                               public void setCountForGoback(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountForGobackTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCountForGoback=param;
                                    

                               }
                            

                        /**
                        * field for Start
                        */

                        
                                    protected long localStart ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartTracker = false ;

                           public boolean isStartSpecified(){
                               return localStartTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStart(){
                               return localStart;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Start
                               */
                               public void setStart(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStart=param;
                                    

                               }
                            

                        /**
                        * field for Count
                        */

                        
                                    protected int localCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCountTracker = false ;

                           public boolean isCountSpecified(){
                               return localCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getCount(){
                               return localCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Count
                               */
                               public void setCount(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localCountTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localCount=param;
                                    

                               }
                            

                        /**
                        * field for File
                        */

                        
                                    protected java.lang.String localFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTracker = false ;

                           public boolean isFileSpecified(){
                               return localFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFile(){
                               return localFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param File
                               */
                               public void setFile(java.lang.String param){
                            localFileTracker = param != null;
                                   
                                            this.localFile=param;
                                    

                               }
                            

                        /**
                        * field for Key
                        */

                        
                                    protected java.lang.String localKey ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localKeyTracker = false ;

                           public boolean isKeySpecified(){
                               return localKeyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getKey(){
                               return localKey;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Key
                               */
                               public void setKey(java.lang.String param){
                            localKeyTracker = param != null;
                                   
                                            this.localKey=param;
                                    

                               }
                            

                        /**
                        * field for SchemaOnly
                        */

                        
                                    protected boolean localSchemaOnly =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("true");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSchemaOnlyTracker = false ;

                           public boolean isSchemaOnlySpecified(){
                               return localSchemaOnlyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getSchemaOnly(){
                               return localSchemaOnly;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SchemaOnly
                               */
                               public void setSchemaOnly(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localSchemaOnlyTracker =
                                       true;
                                   
                                            this.localSchemaOnly=param;
                                    

                               }
                            

                        /**
                        * field for RoxieSelections
                        */

                        
                                    protected boolean localRoxieSelections =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("true");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRoxieSelectionsTracker = false ;

                           public boolean isRoxieSelectionsSpecified(){
                               return localRoxieSelectionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getRoxieSelections(){
                               return localRoxieSelections;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RoxieSelections
                               */
                               public void setRoxieSelections(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localRoxieSelectionsTracker =
                                       true;
                                   
                                            this.localRoxieSelections=param;
                                    

                               }
                            

                        /**
                        * field for DisableUppercaseTranslation
                        */

                        
                                    protected boolean localDisableUppercaseTranslation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDisableUppercaseTranslationTracker = false ;

                           public boolean isDisableUppercaseTranslationSpecified(){
                               return localDisableUppercaseTranslationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDisableUppercaseTranslation(){
                               return localDisableUppercaseTranslation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DisableUppercaseTranslation
                               */
                               public void setDisableUppercaseTranslation(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDisableUppercaseTranslationTracker =
                                       true;
                                   
                                            this.localDisableUppercaseTranslation=param;
                                    

                               }
                            

                        /**
                        * field for SelectedKey
                        */

                        
                                    protected java.lang.String localSelectedKey ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSelectedKeyTracker = false ;

                           public boolean isSelectedKeySpecified(){
                               return localSelectedKeyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSelectedKey(){
                               return localSelectedKey;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SelectedKey
                               */
                               public void setSelectedKey(java.lang.String param){
                            localSelectedKeyTracker = param != null;
                                   
                                            this.localSelectedKey=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSearchDataRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSearchDataRequest",
                           xmlWriter);
                   }

               
                   }
                if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOpenLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "OpenLogicalName", xmlWriter);
                             

                                          if (localOpenLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOpenLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFilterByTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FilterBy", xmlWriter);
                             

                                          if (localFilterBy==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilterBy);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowColumnsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowColumns", xmlWriter);
                             

                                          if (localShowColumns==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowColumns);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartIndex", xmlWriter);
                             
                                               if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndIndex", xmlWriter);
                             
                                               if (localEndIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EndIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localParentNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ParentName", xmlWriter);
                             

                                          if (localParentName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParentName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartForGoback", xmlWriter);
                             
                                               if (localStartForGoback==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountForGobackTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "CountForGoback", xmlWriter);
                             
                                               if (localCountForGoback==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("CountForGoback cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Start", xmlWriter);
                             
                                               if (localStart==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Start cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Count", xmlWriter);
                             
                                               if (localCount==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Count cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "File", xmlWriter);
                             

                                          if (localFile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localKeyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Key", xmlWriter);
                             

                                          if (localKey==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Key cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localKey);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSchemaOnlyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SchemaOnly", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("SchemaOnly cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRoxieSelectionsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RoxieSelections", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("RoxieSelections cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoxieSelections));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDisableUppercaseTranslationTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "DisableUppercaseTranslation", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("DisableUppercaseTranslation cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSelectedKeyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SelectedKey", xmlWriter);
                             

                                          if (localSelectedKey==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SelectedKey cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSelectedKey);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    } if (localOpenLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "OpenLogicalName"));
                                 
                                        if (localOpenLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOpenLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("OpenLogicalName cannot be null!!");
                                        }
                                    } if (localFilterByTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FilterBy"));
                                 
                                        if (localFilterBy != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterBy));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FilterBy cannot be null!!");
                                        }
                                    } if (localShowColumnsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowColumns"));
                                 
                                        if (localShowColumns != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowColumns));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                        }
                                    } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localStartIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                            } if (localEndIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                            } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localParentNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ParentName"));
                                 
                                        if (localParentName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParentName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ParentName cannot be null!!");
                                        }
                                    } if (localStartForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartForGoback));
                            } if (localCountForGobackTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "CountForGoback"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountForGoback));
                            } if (localStartTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Start"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStart));
                            } if (localCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Count"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
                            } if (localFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "File"));
                                 
                                        if (localFile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
                                        }
                                    } if (localKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Key"));
                                 
                                        if (localKey != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localKey));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Key cannot be null!!");
                                        }
                                    } if (localSchemaOnlyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SchemaOnly"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSchemaOnly));
                            } if (localRoxieSelectionsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RoxieSelections"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRoxieSelections));
                            } if (localDisableUppercaseTranslationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DisableUppercaseTranslation"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDisableUppercaseTranslation));
                            } if (localSelectedKeyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SelectedKey"));
                                 
                                        if (localSelectedKey != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSelectedKey));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SelectedKey cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSearchDataRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSearchDataRequest object =
                new DFUSearchDataRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSearchDataRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSearchDataRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","OpenLogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"OpenLogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOpenLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FilterBy").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FilterBy" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilterBy(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowColumns").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowColumns" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowColumns(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ParentName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ParentName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParentName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","CountForGoback").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"CountForGoback" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCountForGoback(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Start").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Start" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStart(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Count").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Count" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","File").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"File" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Key").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Key" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SchemaOnly").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SchemaOnly" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSchemaOnly(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RoxieSelections").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RoxieSelections" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRoxieSelections(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DisableUppercaseTranslation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"DisableUppercaseTranslation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDisableUppercaseTranslation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SelectedKey").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SelectedKey" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSelectedKey(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileListRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileListRequest",
                "ns1");

            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileListRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileListRequest",
                           xmlWriter);
                   }

               
                   }
                if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileListRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileListRequest object =
                new SuperfileListRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileListRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileListRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileAddRawResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileAddRawResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Retcode
                        */

                        
                                    protected int localRetcode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRetcodeTracker = false ;

                           public boolean isRetcodeSpecified(){
                               return localRetcodeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getRetcode(){
                               return localRetcode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Retcode
                               */
                               public void setRetcode(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localRetcodeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localRetcode=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileAddRawResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileAddRawResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRetcodeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "retcode", xmlWriter);
                             
                                               if (localRetcode==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("retcode cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetcode));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    } if (localRetcodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "retcode"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetcode));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileAddRawResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileAddRawResponse object =
                new SuperfileAddRawResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileAddRawResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileAddRawResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","retcode").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"retcode" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRetcode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSpaceItem
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFUSpaceItem
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

                        /**
                        * field for NumOfFiles
                        */

                        
                                    protected java.lang.String localNumOfFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumOfFilesTracker = false ;

                           public boolean isNumOfFilesSpecified(){
                               return localNumOfFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumOfFiles(){
                               return localNumOfFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumOfFiles
                               */
                               public void setNumOfFiles(java.lang.String param){
                            localNumOfFilesTracker = param != null;
                                   
                                            this.localNumOfFiles=param;
                                    

                               }
                            

                        /**
                        * field for NumOfFilesUnknown
                        */

                        
                                    protected java.lang.String localNumOfFilesUnknown ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumOfFilesUnknownTracker = false ;

                           public boolean isNumOfFilesUnknownSpecified(){
                               return localNumOfFilesUnknownTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumOfFilesUnknown(){
                               return localNumOfFilesUnknown;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumOfFilesUnknown
                               */
                               public void setNumOfFilesUnknown(java.lang.String param){
                            localNumOfFilesUnknownTracker = param != null;
                                   
                                            this.localNumOfFilesUnknown=param;
                                    

                               }
                            

                        /**
                        * field for TotalSize
                        */

                        
                                    protected java.lang.String localTotalSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTotalSizeTracker = false ;

                           public boolean isTotalSizeSpecified(){
                               return localTotalSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTotalSize(){
                               return localTotalSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TotalSize
                               */
                               public void setTotalSize(java.lang.String param){
                            localTotalSizeTracker = param != null;
                                   
                                            this.localTotalSize=param;
                                    

                               }
                            

                        /**
                        * field for LargestFile
                        */

                        
                                    protected java.lang.String localLargestFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLargestFileTracker = false ;

                           public boolean isLargestFileSpecified(){
                               return localLargestFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLargestFile(){
                               return localLargestFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LargestFile
                               */
                               public void setLargestFile(java.lang.String param){
                            localLargestFileTracker = param != null;
                                   
                                            this.localLargestFile=param;
                                    

                               }
                            

                        /**
                        * field for LargestSize
                        */

                        
                                    protected java.lang.String localLargestSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLargestSizeTracker = false ;

                           public boolean isLargestSizeSpecified(){
                               return localLargestSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLargestSize(){
                               return localLargestSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LargestSize
                               */
                               public void setLargestSize(java.lang.String param){
                            localLargestSizeTracker = param != null;
                                   
                                            this.localLargestSize=param;
                                    

                               }
                            

                        /**
                        * field for SmallestFile
                        */

                        
                                    protected java.lang.String localSmallestFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSmallestFileTracker = false ;

                           public boolean isSmallestFileSpecified(){
                               return localSmallestFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSmallestFile(){
                               return localSmallestFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SmallestFile
                               */
                               public void setSmallestFile(java.lang.String param){
                            localSmallestFileTracker = param != null;
                                   
                                            this.localSmallestFile=param;
                                    

                               }
                            

                        /**
                        * field for SmallestSize
                        */

                        
                                    protected java.lang.String localSmallestSize ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSmallestSizeTracker = false ;

                           public boolean isSmallestSizeSpecified(){
                               return localSmallestSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSmallestSize(){
                               return localSmallestSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param SmallestSize
                               */
                               public void setSmallestSize(java.lang.String param){
                            localSmallestSizeTracker = param != null;
                                   
                                            this.localSmallestSize=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSpaceItem",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSpaceItem",
                           xmlWriter);
                   }

               
                   }
                if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumOfFilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NumOfFiles", xmlWriter);
                             

                                          if (localNumOfFiles==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("NumOfFiles cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumOfFiles);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumOfFilesUnknownTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NumOfFilesUnknown", xmlWriter);
                             

                                          if (localNumOfFilesUnknown==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("NumOfFilesUnknown cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumOfFilesUnknown);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTotalSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "TotalSize", xmlWriter);
                             

                                          if (localTotalSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TotalSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTotalSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLargestFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LargestFile", xmlWriter);
                             

                                          if (localLargestFile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LargestFile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLargestFile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLargestSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LargestSize", xmlWriter);
                             

                                          if (localLargestSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LargestSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLargestSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSmallestFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SmallestFile", xmlWriter);
                             

                                          if (localSmallestFile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SmallestFile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSmallestFile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSmallestSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "SmallestSize", xmlWriter);
                             

                                          if (localSmallestSize==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("SmallestSize cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSmallestSize);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Name cannot be null!!");
                                        }
                                    } if (localNumOfFilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NumOfFiles"));
                                 
                                        if (localNumOfFiles != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumOfFiles));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("NumOfFiles cannot be null!!");
                                        }
                                    } if (localNumOfFilesUnknownTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NumOfFilesUnknown"));
                                 
                                        if (localNumOfFilesUnknown != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumOfFilesUnknown));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("NumOfFilesUnknown cannot be null!!");
                                        }
                                    } if (localTotalSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "TotalSize"));
                                 
                                        if (localTotalSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTotalSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TotalSize cannot be null!!");
                                        }
                                    } if (localLargestFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LargestFile"));
                                 
                                        if (localLargestFile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLargestFile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LargestFile cannot be null!!");
                                        }
                                    } if (localLargestSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LargestSize"));
                                 
                                        if (localLargestSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLargestSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LargestSize cannot be null!!");
                                        }
                                    } if (localSmallestFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SmallestFile"));
                                 
                                        if (localSmallestFile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSmallestFile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SmallestFile cannot be null!!");
                                        }
                                    } if (localSmallestSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "SmallestSize"));
                                 
                                        if (localSmallestSize != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSmallestSize));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("SmallestSize cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSpaceItem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSpaceItem object =
                new DFUSpaceItem();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSpaceItem".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSpaceItem)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NumOfFiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NumOfFiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumOfFiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NumOfFilesUnknown").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NumOfFilesUnknown" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumOfFilesUnknown(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","TotalSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"TotalSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTotalSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LargestFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LargestFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLargestFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LargestSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LargestSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLargestSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SmallestFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SmallestFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSmallestFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","SmallestSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"SmallestSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSmallestSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddRemoteResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddRemoteResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddRemoteResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddRemoteResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddRemoteResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddRemoteResponse object =
                new AddRemoteResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddRemoteResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddRemoteResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SuperfileActionResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SuperfileActionResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Retcode
                        */

                        
                                    protected int localRetcode ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRetcodeTracker = false ;

                           public boolean isRetcodeSpecified(){
                               return localRetcodeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getRetcode(){
                               return localRetcode;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Retcode
                               */
                               public void setRetcode(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localRetcodeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localRetcode=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SuperfileActionResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SuperfileActionResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localRetcodeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "retcode", xmlWriter);
                             
                                               if (localRetcode==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("retcode cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetcode));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("superfile cannot be null!!");
                                        }
                                    } if (localRetcodeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "retcode"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetcode));
                            }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SuperfileActionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SuperfileActionResponse object =
                new SuperfileActionResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SuperfileActionResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SuperfileActionResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","retcode").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"retcode" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRetcode(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUQueryResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUQueryResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for DFULogicalFiles
                        */

                        
                                    protected ArrayOfDFULogicalFile localDFULogicalFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFULogicalFilesTracker = false ;

                           public boolean isDFULogicalFilesSpecified(){
                               return localDFULogicalFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFULogicalFile
                           */
                           public  ArrayOfDFULogicalFile getDFULogicalFiles(){
                               return localDFULogicalFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFULogicalFiles
                               */
                               public void setDFULogicalFiles(ArrayOfDFULogicalFile param){
                            localDFULogicalFilesTracker = param != null;
                                   
                                            this.localDFULogicalFiles=param;
                                    

                               }
                            

                        /**
                        * field for Prefix
                        */

                        
                                    protected java.lang.String localPrefix ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrefixTracker = false ;

                           public boolean isPrefixSpecified(){
                               return localPrefixTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrefix(){
                               return localPrefix;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prefix
                               */
                               public void setPrefix(java.lang.String param){
                            localPrefixTracker = param != null;
                                   
                                            this.localPrefix=param;
                                    

                               }
                            

                        /**
                        * field for ClusterName
                        */

                        
                                    protected java.lang.String localClusterName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterNameTracker = false ;

                           public boolean isClusterNameSpecified(){
                               return localClusterNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterName(){
                               return localClusterName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterName
                               */
                               public void setClusterName(java.lang.String param){
                            localClusterNameTracker = param != null;
                                   
                                            this.localClusterName=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for Description
                        */

                        
                                    protected java.lang.String localDescription ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescriptionTracker = false ;

                           public boolean isDescriptionSpecified(){
                               return localDescriptionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDescription(){
                               return localDescription;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Description
                               */
                               public void setDescription(java.lang.String param){
                            localDescriptionTracker = param != null;
                                   
                                            this.localDescription=param;
                                    

                               }
                            

                        /**
                        * field for Owner
                        */

                        
                                    protected java.lang.String localOwner ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localOwnerTracker = false ;

                           public boolean isOwnerSpecified(){
                               return localOwnerTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getOwner(){
                               return localOwner;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Owner
                               */
                               public void setOwner(java.lang.String param){
                            localOwnerTracker = param != null;
                                   
                                            this.localOwner=param;
                                    

                               }
                            

                        /**
                        * field for StartDate
                        */

                        
                                    protected java.lang.String localStartDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartDateTracker = false ;

                           public boolean isStartDateSpecified(){
                               return localStartDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartDate(){
                               return localStartDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartDate
                               */
                               public void setStartDate(java.lang.String param){
                            localStartDateTracker = param != null;
                                   
                                            this.localStartDate=param;
                                    

                               }
                            

                        /**
                        * field for EndDate
                        */

                        
                                    protected java.lang.String localEndDate ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndDateTracker = false ;

                           public boolean isEndDateSpecified(){
                               return localEndDateTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEndDate(){
                               return localEndDate;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndDate
                               */
                               public void setEndDate(java.lang.String param){
                            localEndDateTracker = param != null;
                                   
                                            this.localEndDate=param;
                                    

                               }
                            

                        /**
                        * field for FileType
                        */

                        
                                    protected java.lang.String localFileType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTypeTracker = false ;

                           public boolean isFileTypeSpecified(){
                               return localFileTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFileType(){
                               return localFileType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileType
                               */
                               public void setFileType(java.lang.String param){
                            localFileTypeTracker = param != null;
                                   
                                            this.localFileType=param;
                                    

                               }
                            

                        /**
                        * field for FileSizeFrom
                        */

                        
                                    protected long localFileSizeFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileSizeFromTracker = false ;

                           public boolean isFileSizeFromSpecified(){
                               return localFileSizeFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getFileSizeFrom(){
                               return localFileSizeFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileSizeFrom
                               */
                               public void setFileSizeFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localFileSizeFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localFileSizeFrom=param;
                                    

                               }
                            

                        /**
                        * field for FileSizeTo
                        */

                        
                                    protected long localFileSizeTo =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileSizeToTracker = false ;

                           public boolean isFileSizeToSpecified(){
                               return localFileSizeToTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getFileSizeTo(){
                               return localFileSizeTo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileSizeTo
                               */
                               public void setFileSizeTo(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localFileSizeToTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localFileSizeTo=param;
                                    

                               }
                            

                        /**
                        * field for FirstN
                        */

                        
                                    protected int localFirstN =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNTracker = false ;

                           public boolean isFirstNSpecified(){
                               return localFirstNTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getFirstN(){
                               return localFirstN;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstN
                               */
                               public void setFirstN(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localFirstNTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localFirstN=param;
                                    

                               }
                            

                        /**
                        * field for FirstNType
                        */

                        
                                    protected java.lang.String localFirstNType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFirstNTypeTracker = false ;

                           public boolean isFirstNTypeSpecified(){
                               return localFirstNTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFirstNType(){
                               return localFirstNType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FirstNType
                               */
                               public void setFirstNType(java.lang.String param){
                            localFirstNTypeTracker = param != null;
                                   
                                            this.localFirstNType=param;
                                    

                               }
                            

                        /**
                        * field for PageSize
                        */

                        
                                    protected int localPageSize =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("20");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageSizeTracker = false ;

                           public boolean isPageSizeSpecified(){
                               return localPageSizeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getPageSize(){
                               return localPageSize;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageSize
                               */
                               public void setPageSize(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageSizeTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localPageSize=param;
                                    

                               }
                            

                        /**
                        * field for PageStartFrom
                        */

                        
                                    protected long localPageStartFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageStartFromTracker = false ;

                           public boolean isPageStartFromSpecified(){
                               return localPageStartFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getPageStartFrom(){
                               return localPageStartFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageStartFrom
                               */
                               public void setPageStartFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageStartFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localPageStartFrom=param;
                                    

                               }
                            

                        /**
                        * field for LastPageFrom
                        */

                        
                                    protected long localLastPageFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLastPageFromTracker = false ;

                           public boolean isLastPageFromSpecified(){
                               return localLastPageFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getLastPageFrom(){
                               return localLastPageFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LastPageFrom
                               */
                               public void setLastPageFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localLastPageFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localLastPageFrom=param;
                                    

                               }
                            

                        /**
                        * field for PageEndAt
                        */

                        
                                    protected long localPageEndAt ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPageEndAtTracker = false ;

                           public boolean isPageEndAtSpecified(){
                               return localPageEndAtTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getPageEndAt(){
                               return localPageEndAt;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PageEndAt
                               */
                               public void setPageEndAt(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localPageEndAtTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localPageEndAt=param;
                                    

                               }
                            

                        /**
                        * field for PrevPageFrom
                        */

                        
                                    protected long localPrevPageFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrevPageFromTracker = false ;

                           public boolean isPrevPageFromSpecified(){
                               return localPrevPageFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getPrevPageFrom(){
                               return localPrevPageFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param PrevPageFrom
                               */
                               public void setPrevPageFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localPrevPageFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localPrevPageFrom=param;
                                    

                               }
                            

                        /**
                        * field for NextPageFrom
                        */

                        
                                    protected long localNextPageFrom =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong("-1");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNextPageFromTracker = false ;

                           public boolean isNextPageFromSpecified(){
                               return localNextPageFromTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getNextPageFrom(){
                               return localNextPageFrom;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NextPageFrom
                               */
                               public void setNextPageFrom(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localNextPageFromTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localNextPageFrom=param;
                                    

                               }
                            

                        /**
                        * field for NumFiles
                        */

                        
                                    protected long localNumFiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumFilesTracker = false ;

                           public boolean isNumFilesSpecified(){
                               return localNumFilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getNumFiles(){
                               return localNumFiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param NumFiles
                               */
                               public void setNumFiles(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localNumFilesTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localNumFiles=param;
                                    

                               }
                            

                        /**
                        * field for Sortby
                        */

                        
                                    protected java.lang.String localSortby ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSortbyTracker = false ;

                           public boolean isSortbySpecified(){
                               return localSortbyTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSortby(){
                               return localSortby;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Sortby
                               */
                               public void setSortby(java.lang.String param){
                            localSortbyTracker = param != null;
                                   
                                            this.localSortby=param;
                                    

                               }
                            

                        /**
                        * field for Descending
                        */

                        
                                    protected boolean localDescending =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDescendingTracker = false ;

                           public boolean isDescendingSpecified(){
                               return localDescendingTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getDescending(){
                               return localDescending;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Descending
                               */
                               public void setDescending(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localDescendingTracker =
                                       true;
                                   
                                            this.localDescending=param;
                                    

                               }
                            

                        /**
                        * field for BasicQuery
                        */

                        
                                    protected java.lang.String localBasicQuery ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBasicQueryTracker = false ;

                           public boolean isBasicQuerySpecified(){
                               return localBasicQueryTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBasicQuery(){
                               return localBasicQuery;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BasicQuery
                               */
                               public void setBasicQuery(java.lang.String param){
                            localBasicQueryTracker = param != null;
                                   
                                            this.localBasicQuery=param;
                                    

                               }
                            

                        /**
                        * field for ParametersForPaging
                        */

                        
                                    protected java.lang.String localParametersForPaging ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localParametersForPagingTracker = false ;

                           public boolean isParametersForPagingSpecified(){
                               return localParametersForPagingTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getParametersForPaging(){
                               return localParametersForPaging;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ParametersForPaging
                               */
                               public void setParametersForPaging(java.lang.String param){
                            localParametersForPagingTracker = param != null;
                                   
                                            this.localParametersForPaging=param;
                                    

                               }
                            

                        /**
                        * field for Filters
                        */

                        
                                    protected java.lang.String localFilters ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFiltersTracker = false ;

                           public boolean isFiltersSpecified(){
                               return localFiltersTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getFilters(){
                               return localFilters;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Filters
                               */
                               public void setFilters(java.lang.String param){
                            localFiltersTracker = param != null;
                                   
                                            this.localFilters=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUQueryResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUQueryResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localDFULogicalFilesTracker){
                                            if (localDFULogicalFiles==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFULogicalFiles cannot be null!!");
                                            }
                                           localDFULogicalFiles.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFiles"),
                                               xmlWriter);
                                        } if (localPrefixTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Prefix", xmlWriter);
                             

                                          if (localPrefix==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrefix);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterName", xmlWriter);
                             

                                          if (localClusterName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescriptionTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Description", xmlWriter);
                             

                                          if (localDescription==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDescription);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localOwnerTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Owner", xmlWriter);
                             

                                          if (localOwner==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localOwner);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartDate", xmlWriter);
                             

                                          if (localStartDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndDateTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndDate", xmlWriter);
                             

                                          if (localEndDate==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEndDate);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileType", xmlWriter);
                             

                                          if (localFileType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFileType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileSizeFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileSizeFrom", xmlWriter);
                             
                                               if (localFileSizeFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FileSizeFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFileSizeToTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FileSizeTo", xmlWriter);
                             
                                               if (localFileSizeTo==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FileSizeTo cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeTo));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FirstN", xmlWriter);
                             
                                               if (localFirstN==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("FirstN cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstN));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFirstNTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "FirstNType", xmlWriter);
                             

                                          if (localFirstNType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("FirstNType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFirstNType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageSizeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageSize", xmlWriter);
                             
                                               if (localPageSize==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageSize cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageStartFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageStartFrom", xmlWriter);
                             
                                               if (localPageStartFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageStartFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageStartFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLastPageFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LastPageFrom", xmlWriter);
                             
                                               if (localLastPageFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("LastPageFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastPageFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPageEndAtTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PageEndAt", xmlWriter);
                             
                                               if (localPageEndAt==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PageEndAt cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageEndAt));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrevPageFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "PrevPageFrom", xmlWriter);
                             
                                               if (localPrevPageFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("PrevPageFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrevPageFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNextPageFromTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NextPageFrom", xmlWriter);
                             
                                               if (localNextPageFrom==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NextPageFrom cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextPageFrom));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumFilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "NumFiles", xmlWriter);
                             
                                               if (localNumFiles==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("NumFiles cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumFiles));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSortbyTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Sortby", xmlWriter);
                             

                                          if (localSortby==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Sortby cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSortby);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDescendingTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Descending", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Descending cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescending));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBasicQueryTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BasicQuery", xmlWriter);
                             

                                          if (localBasicQuery==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BasicQuery cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBasicQuery);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localParametersForPagingTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ParametersForPaging", xmlWriter);
                             

                                          if (localParametersForPaging==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ParametersForPaging cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localParametersForPaging);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localFiltersTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Filters", xmlWriter);
                             

                                          if (localFilters==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Filters cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localFilters);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localDFULogicalFilesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFULogicalFiles"));
                            
                            
                                    if (localDFULogicalFiles==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFULogicalFiles cannot be null!!");
                                    }
                                    elementList.add(localDFULogicalFiles);
                                } if (localPrefixTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Prefix"));
                                 
                                        if (localPrefix != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrefix));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prefix cannot be null!!");
                                        }
                                    } if (localClusterNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterName"));
                                 
                                        if (localClusterName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterName cannot be null!!");
                                        }
                                    } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localDescriptionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Description"));
                                 
                                        if (localDescription != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescription));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Description cannot be null!!");
                                        }
                                    } if (localOwnerTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Owner"));
                                 
                                        if (localOwner != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOwner));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Owner cannot be null!!");
                                        }
                                    } if (localStartDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartDate"));
                                 
                                        if (localStartDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("StartDate cannot be null!!");
                                        }
                                    } if (localEndDateTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndDate"));
                                 
                                        if (localEndDate != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("EndDate cannot be null!!");
                                        }
                                    } if (localFileTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileType"));
                                 
                                        if (localFileType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FileType cannot be null!!");
                                        }
                                    } if (localFileSizeFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileSizeFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeFrom));
                            } if (localFileSizeToTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileSizeTo"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFileSizeTo));
                            } if (localFirstNTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FirstN"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstN));
                            } if (localFirstNTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FirstNType"));
                                 
                                        if (localFirstNType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFirstNType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("FirstNType cannot be null!!");
                                        }
                                    } if (localPageSizeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageSize"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageSize));
                            } if (localPageStartFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageStartFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageStartFrom));
                            } if (localLastPageFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LastPageFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLastPageFrom));
                            } if (localPageEndAtTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PageEndAt"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPageEndAt));
                            } if (localPrevPageFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "PrevPageFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrevPageFrom));
                            } if (localNextPageFromTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NextPageFrom"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextPageFrom));
                            } if (localNumFilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "NumFiles"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumFiles));
                            } if (localSortbyTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Sortby"));
                                 
                                        if (localSortby != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSortby));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Sortby cannot be null!!");
                                        }
                                    } if (localDescendingTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Descending"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDescending));
                            } if (localBasicQueryTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BasicQuery"));
                                 
                                        if (localBasicQuery != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBasicQuery));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BasicQuery cannot be null!!");
                                        }
                                    } if (localParametersForPagingTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ParametersForPaging"));
                                 
                                        if (localParametersForPaging != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParametersForPaging));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ParametersForPaging cannot be null!!");
                                        }
                                    } if (localFiltersTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Filters"));
                                 
                                        if (localFilters != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilters));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Filters cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUQueryResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUQueryResponse object =
                new DFUQueryResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUQueryResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUQueryResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFULogicalFiles").equals(reader.getName())){
                                
                                                object.setDFULogicalFiles(ArrayOfDFULogicalFile.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Prefix").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prefix" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrefix(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Description").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Description" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescription(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Owner").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Owner" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setOwner(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndDate").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndDate" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndDate(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileSizeFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileSizeFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileSizeFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileSizeTo").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FileSizeTo" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFileSizeTo(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FirstN").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FirstN" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstN(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FirstNType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"FirstNType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFirstNType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageSize").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageSize" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageSize(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageStartFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageStartFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageStartFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LastPageFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LastPageFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLastPageFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PageEndAt").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PageEndAt" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPageEndAt(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","PrevPageFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"PrevPageFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrevPageFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NextPageFrom").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NextPageFrom" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNextPageFrom(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","NumFiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"NumFiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumFiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Sortby").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Sortby" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSortby(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Descending").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Descending" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDescending(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BasicQuery").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BasicQuery" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBasicQuery(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ParametersForPaging").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ParametersForPaging" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setParametersForPaging(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Filters").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Filters" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setFilters(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUFileStat
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = DFUFileStat
                Namespace URI = urn:hpccsystems:ws:wsdfu
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for MinSkew
                        */

                        
                                    protected java.lang.String localMinSkew ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMinSkewTracker = false ;

                           public boolean isMinSkewSpecified(){
                               return localMinSkewTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMinSkew(){
                               return localMinSkew;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MinSkew
                               */
                               public void setMinSkew(java.lang.String param){
                            localMinSkewTracker = param != null;
                                   
                                            this.localMinSkew=param;
                                    

                               }
                            

                        /**
                        * field for MaxSkew
                        */

                        
                                    protected java.lang.String localMaxSkew ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMaxSkewTracker = false ;

                           public boolean isMaxSkewSpecified(){
                               return localMaxSkewTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMaxSkew(){
                               return localMaxSkew;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxSkew
                               */
                               public void setMaxSkew(java.lang.String param){
                            localMaxSkewTracker = param != null;
                                   
                                            this.localMaxSkew=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUFileStat",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUFileStat",
                           xmlWriter);
                   }

               
                   }
                if (localMinSkewTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MinSkew", xmlWriter);
                             

                                          if (localMinSkew==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MinSkew cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMinSkew);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMaxSkewTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "MaxSkew", xmlWriter);
                             

                                          if (localMaxSkew==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("MaxSkew cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMaxSkew);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localMinSkewTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MinSkew"));
                                 
                                        if (localMinSkew != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMinSkew));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MinSkew cannot be null!!");
                                        }
                                    } if (localMaxSkewTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "MaxSkew"));
                                 
                                        if (localMaxSkew != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxSkew));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("MaxSkew cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUFileStat parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUFileStat object =
                new DFUFileStat();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUFileStat".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUFileStat)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MinSkew").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MinSkew" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMinSkew(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","MaxSkew").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"MaxSkew" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxSkew(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSearchRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSearchRequest",
                "ns1");

            

                        /**
                        * field for ShowExample
                        */

                        
                                    protected java.lang.String localShowExample ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowExampleTracker = false ;

                           public boolean isShowExampleSpecified(){
                               return localShowExampleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowExample(){
                               return localShowExample;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowExample
                               */
                               public void setShowExample(java.lang.String param){
                            localShowExampleTracker = param != null;
                                   
                                            this.localShowExample=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSearchRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSearchRequest",
                           xmlWriter);
                   }

               
                   }
                if (localShowExampleTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowExample", xmlWriter);
                             

                                          if (localShowExample==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowExample cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowExample);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localShowExampleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowExample"));
                                 
                                        if (localShowExample != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowExample));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowExample cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSearchRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSearchRequest object =
                new DFUSearchRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSearchRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSearchRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowExample").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowExample" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowExample(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUSearchResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUSearchResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for ShowExample
                        */

                        
                                    protected java.lang.String localShowExample ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowExampleTracker = false ;

                           public boolean isShowExampleSpecified(){
                               return localShowExampleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowExample(){
                               return localShowExample;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowExample
                               */
                               public void setShowExample(java.lang.String param){
                            localShowExampleTracker = param != null;
                                   
                                            this.localShowExample=param;
                                    

                               }
                            

                        /**
                        * field for ClusterNames
                        */

                        
                                    protected ClusterNames_type0 localClusterNames ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterNamesTracker = false ;

                           public boolean isClusterNamesSpecified(){
                               return localClusterNamesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ClusterNames_type0
                           */
                           public  ClusterNames_type0 getClusterNames(){
                               return localClusterNames;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterNames
                               */
                               public void setClusterNames(ClusterNames_type0 param){
                            localClusterNamesTracker = param != null;
                                   
                                            this.localClusterNames=param;
                                    

                               }
                            

                        /**
                        * field for FileTypes
                        */

                        
                                    protected FileTypes_type0 localFileTypes ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileTypesTracker = false ;

                           public boolean isFileTypesSpecified(){
                               return localFileTypesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return FileTypes_type0
                           */
                           public  FileTypes_type0 getFileTypes(){
                               return localFileTypes;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileTypes
                               */
                               public void setFileTypes(FileTypes_type0 param){
                            localFileTypesTracker = param != null;
                                   
                                            this.localFileTypes=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUSearchResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUSearchResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localShowExampleTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowExample", xmlWriter);
                             

                                          if (localShowExample==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowExample cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowExample);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterNamesTracker){
                                            if (localClusterNames==null){
                                                 throw new org.apache.axis2.databinding.ADBException("ClusterNames cannot be null!!");
                                            }
                                           localClusterNames.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterNames"),
                                               xmlWriter);
                                        } if (localFileTypesTracker){
                                            if (localFileTypes==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FileTypes cannot be null!!");
                                            }
                                           localFileTypes.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileTypes"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localShowExampleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowExample"));
                                 
                                        if (localShowExample != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowExample));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowExample cannot be null!!");
                                        }
                                    } if (localClusterNamesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterNames"));
                            
                            
                                    if (localClusterNames==null){
                                         throw new org.apache.axis2.databinding.ADBException("ClusterNames cannot be null!!");
                                    }
                                    elementList.add(localClusterNames);
                                } if (localFileTypesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileTypes"));
                            
                            
                                    if (localFileTypes==null){
                                         throw new org.apache.axis2.databinding.ADBException("FileTypes cannot be null!!");
                                    }
                                    elementList.add(localFileTypes);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUSearchResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUSearchResponse object =
                new DFUSearchResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUSearchResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUSearchResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowExample").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowExample" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowExample(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterNames").equals(reader.getName())){
                                
                                                object.setClusterNames(ClusterNames_type0.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileTypes").equals(reader.getName())){
                                
                                                object.setFileTypes(FileTypes_type0.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUFileViewRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUFileViewRequest",
                "ns1");

            

                        /**
                        * field for Scope
                        */

                        
                                    protected java.lang.String localScope ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localScopeTracker = false ;

                           public boolean isScopeSpecified(){
                               return localScopeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getScope(){
                               return localScope;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Scope
                               */
                               public void setScope(java.lang.String param){
                            localScopeTracker = param != null;
                                   
                                            this.localScope=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUFileViewRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUFileViewRequest",
                           xmlWriter);
                   }

               
                   }
                if (localScopeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Scope", xmlWriter);
                             

                                          if (localScope==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Scope cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localScope);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localScopeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Scope"));
                                 
                                        if (localScope != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localScope));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Scope cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUFileViewRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUFileViewRequest object =
                new DFUFileViewRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUFileViewRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUFileViewRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Scope").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Scope" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setScope(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AddtoSuperfileRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "AddtoSuperfileRequest",
                "ns1");

            

                        /**
                        * field for Superfile
                        */

                        
                                    protected java.lang.String localSuperfile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSuperfileTracker = false ;

                           public boolean isSuperfileSpecified(){
                               return localSuperfileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSuperfile(){
                               return localSuperfile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Superfile
                               */
                               public void setSuperfile(java.lang.String param){
                            localSuperfileTracker = param != null;
                                   
                                            this.localSuperfile=param;
                                    

                               }
                            

                        /**
                        * field for Subfiles
                        */

                        
                                    protected java.lang.String localSubfiles ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSubfilesTracker = false ;

                           public boolean isSubfilesSpecified(){
                               return localSubfilesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSubfiles(){
                               return localSubfiles;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Subfiles
                               */
                               public void setSubfiles(java.lang.String param){
                            localSubfilesTracker = param != null;
                                   
                                            this.localSubfiles=param;
                                    

                               }
                            

                        /**
                        * field for Names
                        */

                        
                                    protected EspStringArray localNames ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNamesTracker = false ;

                           public boolean isNamesSpecified(){
                               return localNamesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EspStringArray
                           */
                           public  EspStringArray getNames(){
                               return localNames;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Names
                               */
                               public void setNames(EspStringArray param){
                            localNamesTracker = param != null;
                                   
                                            this.localNames=param;
                                    

                               }
                            

                        /**
                        * field for ExistingFile
                        */

                        
                                    protected boolean localExistingFile =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean("false");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExistingFileTracker = false ;

                           public boolean isExistingFileSpecified(){
                               return localExistingFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return boolean
                           */
                           public  boolean getExistingFile(){
                               return localExistingFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ExistingFile
                               */
                               public void setExistingFile(boolean param){
                            
                                       // setting primitive attribute tracker to true
                                       localExistingFileTracker =
                                       true;
                                   
                                            this.localExistingFile=param;
                                    

                               }
                            

                        /**
                        * field for BackToPage
                        */

                        
                                    protected java.lang.String localBackToPage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localBackToPageTracker = false ;

                           public boolean isBackToPageSpecified(){
                               return localBackToPageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getBackToPage(){
                               return localBackToPage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param BackToPage
                               */
                               public void setBackToPage(java.lang.String param){
                            localBackToPageTracker = param != null;
                                   
                                            this.localBackToPage=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AddtoSuperfileRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AddtoSuperfileRequest",
                           xmlWriter);
                   }

               
                   }
                if (localSuperfileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Superfile", xmlWriter);
                             

                                          if (localSuperfile==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Superfile cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSuperfile);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSubfilesTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Subfiles", xmlWriter);
                             

                                          if (localSubfiles==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Subfiles cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSubfiles);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNamesTracker){
                                            if (localNames==null){
                                                 throw new org.apache.axis2.databinding.ADBException("names cannot be null!!");
                                            }
                                           localNames.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","names"),
                                               xmlWriter);
                                        } if (localExistingFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ExistingFile", xmlWriter);
                             
                                               if (false) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ExistingFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExistingFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localBackToPageTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "BackToPage", xmlWriter);
                             

                                          if (localBackToPage==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localBackToPage);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localSuperfileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Superfile"));
                                 
                                        if (localSuperfile != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSuperfile));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Superfile cannot be null!!");
                                        }
                                    } if (localSubfilesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Subfiles"));
                                 
                                        if (localSubfiles != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubfiles));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Subfiles cannot be null!!");
                                        }
                                    } if (localNamesTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "names"));
                            
                            
                                    if (localNames==null){
                                         throw new org.apache.axis2.databinding.ADBException("names cannot be null!!");
                                    }
                                    elementList.add(localNames);
                                } if (localExistingFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ExistingFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExistingFile));
                            } if (localBackToPageTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "BackToPage"));
                                 
                                        if (localBackToPage != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBackToPage));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("BackToPage cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AddtoSuperfileRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AddtoSuperfileRequest object =
                new AddtoSuperfileRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AddtoSuperfileRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddtoSuperfileRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Superfile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Superfile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSuperfile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Subfiles").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Subfiles" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSubfiles(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","names").equals(reader.getName())){
                                
                                                object.setNames(EspStringArray.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ExistingFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ExistingFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setExistingFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","BackToPage").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"BackToPage" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setBackToPage(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUGetDataColumnsResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUGetDataColumnsResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for LogicalName
                        */

                        
                                    protected java.lang.String localLogicalName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogicalNameTracker = false ;

                           public boolean isLogicalNameSpecified(){
                               return localLogicalNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogicalName(){
                               return localLogicalName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param LogicalName
                               */
                               public void setLogicalName(java.lang.String param){
                            localLogicalNameTracker = param != null;
                                   
                                            this.localLogicalName=param;
                                    

                               }
                            

                        /**
                        * field for StartIndex
                        */

                        
                                    protected long localStartIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localStartIndexTracker = false ;

                           public boolean isStartIndexSpecified(){
                               return localStartIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getStartIndex(){
                               return localStartIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartIndex
                               */
                               public void setStartIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localStartIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localStartIndex=param;
                                    

                               }
                            

                        /**
                        * field for EndIndex
                        */

                        
                                    protected long localEndIndex ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEndIndexTracker = false ;

                           public boolean isEndIndexSpecified(){
                               return localEndIndexTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getEndIndex(){
                               return localEndIndex;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param EndIndex
                               */
                               public void setEndIndex(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localEndIndexTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localEndIndex=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns1
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns1Tracker = false ;

                           public boolean isDFUDataKeyedColumns1Specified(){
                               return localDFUDataKeyedColumns1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns1(){
                               return localDFUDataKeyedColumns1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns1
                               */
                               public void setDFUDataKeyedColumns1(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns1Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns1=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns2
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns2Tracker = false ;

                           public boolean isDFUDataKeyedColumns2Specified(){
                               return localDFUDataKeyedColumns2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns2(){
                               return localDFUDataKeyedColumns2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns2
                               */
                               public void setDFUDataKeyedColumns2(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns2Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns2=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns3
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns3Tracker = false ;

                           public boolean isDFUDataKeyedColumns3Specified(){
                               return localDFUDataKeyedColumns3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns3(){
                               return localDFUDataKeyedColumns3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns3
                               */
                               public void setDFUDataKeyedColumns3(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns3Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns3=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns4
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns4Tracker = false ;

                           public boolean isDFUDataKeyedColumns4Specified(){
                               return localDFUDataKeyedColumns4Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns4(){
                               return localDFUDataKeyedColumns4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns4
                               */
                               public void setDFUDataKeyedColumns4(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns4Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns4=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns5
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns5 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns5Tracker = false ;

                           public boolean isDFUDataKeyedColumns5Specified(){
                               return localDFUDataKeyedColumns5Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns5(){
                               return localDFUDataKeyedColumns5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns5
                               */
                               public void setDFUDataKeyedColumns5(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns5Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns5=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns6
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns6 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns6Tracker = false ;

                           public boolean isDFUDataKeyedColumns6Specified(){
                               return localDFUDataKeyedColumns6Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns6(){
                               return localDFUDataKeyedColumns6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns6
                               */
                               public void setDFUDataKeyedColumns6(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns6Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns6=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns7
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns7 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns7Tracker = false ;

                           public boolean isDFUDataKeyedColumns7Specified(){
                               return localDFUDataKeyedColumns7Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns7(){
                               return localDFUDataKeyedColumns7;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns7
                               */
                               public void setDFUDataKeyedColumns7(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns7Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns7=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns8
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns8 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns8Tracker = false ;

                           public boolean isDFUDataKeyedColumns8Specified(){
                               return localDFUDataKeyedColumns8Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns8(){
                               return localDFUDataKeyedColumns8;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns8
                               */
                               public void setDFUDataKeyedColumns8(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns8Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns8=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns9
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns9 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns9Tracker = false ;

                           public boolean isDFUDataKeyedColumns9Specified(){
                               return localDFUDataKeyedColumns9Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns9(){
                               return localDFUDataKeyedColumns9;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns9
                               */
                               public void setDFUDataKeyedColumns9(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns9Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns9=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns10
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns10 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns10Tracker = false ;

                           public boolean isDFUDataKeyedColumns10Specified(){
                               return localDFUDataKeyedColumns10Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns10(){
                               return localDFUDataKeyedColumns10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns10
                               */
                               public void setDFUDataKeyedColumns10(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns10Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns10=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns11
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns11 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns11Tracker = false ;

                           public boolean isDFUDataKeyedColumns11Specified(){
                               return localDFUDataKeyedColumns11Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns11(){
                               return localDFUDataKeyedColumns11;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns11
                               */
                               public void setDFUDataKeyedColumns11(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns11Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns11=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns12
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns12 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns12Tracker = false ;

                           public boolean isDFUDataKeyedColumns12Specified(){
                               return localDFUDataKeyedColumns12Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns12(){
                               return localDFUDataKeyedColumns12;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns12
                               */
                               public void setDFUDataKeyedColumns12(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns12Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns12=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns13
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns13 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns13Tracker = false ;

                           public boolean isDFUDataKeyedColumns13Specified(){
                               return localDFUDataKeyedColumns13Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns13(){
                               return localDFUDataKeyedColumns13;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns13
                               */
                               public void setDFUDataKeyedColumns13(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns13Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns13=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns14
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns14 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns14Tracker = false ;

                           public boolean isDFUDataKeyedColumns14Specified(){
                               return localDFUDataKeyedColumns14Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns14(){
                               return localDFUDataKeyedColumns14;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns14
                               */
                               public void setDFUDataKeyedColumns14(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns14Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns14=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns15
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns15 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns15Tracker = false ;

                           public boolean isDFUDataKeyedColumns15Specified(){
                               return localDFUDataKeyedColumns15Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns15(){
                               return localDFUDataKeyedColumns15;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns15
                               */
                               public void setDFUDataKeyedColumns15(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns15Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns15=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns16
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns16 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns16Tracker = false ;

                           public boolean isDFUDataKeyedColumns16Specified(){
                               return localDFUDataKeyedColumns16Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns16(){
                               return localDFUDataKeyedColumns16;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns16
                               */
                               public void setDFUDataKeyedColumns16(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns16Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns16=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns17
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns17 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns17Tracker = false ;

                           public boolean isDFUDataKeyedColumns17Specified(){
                               return localDFUDataKeyedColumns17Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns17(){
                               return localDFUDataKeyedColumns17;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns17
                               */
                               public void setDFUDataKeyedColumns17(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns17Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns17=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns18
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns18 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns18Tracker = false ;

                           public boolean isDFUDataKeyedColumns18Specified(){
                               return localDFUDataKeyedColumns18Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns18(){
                               return localDFUDataKeyedColumns18;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns18
                               */
                               public void setDFUDataKeyedColumns18(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns18Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns18=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns19
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns19 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns19Tracker = false ;

                           public boolean isDFUDataKeyedColumns19Specified(){
                               return localDFUDataKeyedColumns19Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns19(){
                               return localDFUDataKeyedColumns19;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns19
                               */
                               public void setDFUDataKeyedColumns19(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns19Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns19=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataKeyedColumns20
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataKeyedColumns20 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataKeyedColumns20Tracker = false ;

                           public boolean isDFUDataKeyedColumns20Specified(){
                               return localDFUDataKeyedColumns20Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataKeyedColumns20(){
                               return localDFUDataKeyedColumns20;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataKeyedColumns20
                               */
                               public void setDFUDataKeyedColumns20(ArrayOfDFUDataColumn param){
                            localDFUDataKeyedColumns20Tracker = param != null;
                                   
                                            this.localDFUDataKeyedColumns20=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns1
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns1Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns1Specified(){
                               return localDFUDataNonKeyedColumns1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns1(){
                               return localDFUDataNonKeyedColumns1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns1
                               */
                               public void setDFUDataNonKeyedColumns1(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns1Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns1=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns2
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns2Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns2Specified(){
                               return localDFUDataNonKeyedColumns2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns2(){
                               return localDFUDataNonKeyedColumns2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns2
                               */
                               public void setDFUDataNonKeyedColumns2(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns2Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns2=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns3
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns3Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns3Specified(){
                               return localDFUDataNonKeyedColumns3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns3(){
                               return localDFUDataNonKeyedColumns3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns3
                               */
                               public void setDFUDataNonKeyedColumns3(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns3Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns3=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns4
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns4 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns4Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns4Specified(){
                               return localDFUDataNonKeyedColumns4Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns4(){
                               return localDFUDataNonKeyedColumns4;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns4
                               */
                               public void setDFUDataNonKeyedColumns4(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns4Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns4=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns5
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns5 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns5Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns5Specified(){
                               return localDFUDataNonKeyedColumns5Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns5(){
                               return localDFUDataNonKeyedColumns5;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns5
                               */
                               public void setDFUDataNonKeyedColumns5(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns5Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns5=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns6
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns6 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns6Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns6Specified(){
                               return localDFUDataNonKeyedColumns6Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns6(){
                               return localDFUDataNonKeyedColumns6;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns6
                               */
                               public void setDFUDataNonKeyedColumns6(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns6Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns6=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns7
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns7 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns7Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns7Specified(){
                               return localDFUDataNonKeyedColumns7Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns7(){
                               return localDFUDataNonKeyedColumns7;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns7
                               */
                               public void setDFUDataNonKeyedColumns7(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns7Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns7=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns8
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns8 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns8Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns8Specified(){
                               return localDFUDataNonKeyedColumns8Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns8(){
                               return localDFUDataNonKeyedColumns8;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns8
                               */
                               public void setDFUDataNonKeyedColumns8(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns8Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns8=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns9
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns9 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns9Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns9Specified(){
                               return localDFUDataNonKeyedColumns9Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns9(){
                               return localDFUDataNonKeyedColumns9;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns9
                               */
                               public void setDFUDataNonKeyedColumns9(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns9Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns9=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns10
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns10 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns10Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns10Specified(){
                               return localDFUDataNonKeyedColumns10Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns10(){
                               return localDFUDataNonKeyedColumns10;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns10
                               */
                               public void setDFUDataNonKeyedColumns10(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns10Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns10=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns11
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns11 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns11Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns11Specified(){
                               return localDFUDataNonKeyedColumns11Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns11(){
                               return localDFUDataNonKeyedColumns11;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns11
                               */
                               public void setDFUDataNonKeyedColumns11(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns11Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns11=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns12
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns12 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns12Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns12Specified(){
                               return localDFUDataNonKeyedColumns12Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns12(){
                               return localDFUDataNonKeyedColumns12;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns12
                               */
                               public void setDFUDataNonKeyedColumns12(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns12Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns12=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns13
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns13 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns13Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns13Specified(){
                               return localDFUDataNonKeyedColumns13Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns13(){
                               return localDFUDataNonKeyedColumns13;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns13
                               */
                               public void setDFUDataNonKeyedColumns13(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns13Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns13=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns14
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns14 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns14Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns14Specified(){
                               return localDFUDataNonKeyedColumns14Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns14(){
                               return localDFUDataNonKeyedColumns14;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns14
                               */
                               public void setDFUDataNonKeyedColumns14(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns14Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns14=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns15
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns15 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns15Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns15Specified(){
                               return localDFUDataNonKeyedColumns15Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns15(){
                               return localDFUDataNonKeyedColumns15;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns15
                               */
                               public void setDFUDataNonKeyedColumns15(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns15Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns15=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns16
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns16 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns16Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns16Specified(){
                               return localDFUDataNonKeyedColumns16Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns16(){
                               return localDFUDataNonKeyedColumns16;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns16
                               */
                               public void setDFUDataNonKeyedColumns16(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns16Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns16=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns17
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns17 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns17Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns17Specified(){
                               return localDFUDataNonKeyedColumns17Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns17(){
                               return localDFUDataNonKeyedColumns17;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns17
                               */
                               public void setDFUDataNonKeyedColumns17(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns17Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns17=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns18
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns18 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns18Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns18Specified(){
                               return localDFUDataNonKeyedColumns18Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns18(){
                               return localDFUDataNonKeyedColumns18;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns18
                               */
                               public void setDFUDataNonKeyedColumns18(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns18Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns18=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns19
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns19 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns19Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns19Specified(){
                               return localDFUDataNonKeyedColumns19Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns19(){
                               return localDFUDataNonKeyedColumns19;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns19
                               */
                               public void setDFUDataNonKeyedColumns19(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns19Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns19=param;
                                    

                               }
                            

                        /**
                        * field for DFUDataNonKeyedColumns20
                        */

                        
                                    protected ArrayOfDFUDataColumn localDFUDataNonKeyedColumns20 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDFUDataNonKeyedColumns20Tracker = false ;

                           public boolean isDFUDataNonKeyedColumns20Specified(){
                               return localDFUDataNonKeyedColumns20Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfDFUDataColumn
                           */
                           public  ArrayOfDFUDataColumn getDFUDataNonKeyedColumns20(){
                               return localDFUDataNonKeyedColumns20;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param DFUDataNonKeyedColumns20
                               */
                               public void setDFUDataNonKeyedColumns20(ArrayOfDFUDataColumn param){
                            localDFUDataNonKeyedColumns20Tracker = param != null;
                                   
                                            this.localDFUDataNonKeyedColumns20=param;
                                    

                               }
                            

                        /**
                        * field for RowCount
                        */

                        
                                    protected long localRowCount ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRowCountTracker = false ;

                           public boolean isRowCountSpecified(){
                               return localRowCountTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return long
                           */
                           public  long getRowCount(){
                               return localRowCount;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param RowCount
                               */
                               public void setRowCount(long param){
                            
                                       // setting primitive attribute tracker to true
                                       localRowCountTracker =
                                       param != java.lang.Long.MIN_VALUE;
                                   
                                            this.localRowCount=param;
                                    

                               }
                            

                        /**
                        * field for ShowColumns
                        */

                        
                                    protected java.lang.String localShowColumns ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localShowColumnsTracker = false ;

                           public boolean isShowColumnsSpecified(){
                               return localShowColumnsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getShowColumns(){
                               return localShowColumns;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ShowColumns
                               */
                               public void setShowColumns(java.lang.String param){
                            localShowColumnsTracker = param != null;
                                   
                                            this.localShowColumns=param;
                                    

                               }
                            

                        /**
                        * field for ChooseFile
                        */

                        
                                    protected int localChooseFile ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localChooseFileTracker = false ;

                           public boolean isChooseFileSpecified(){
                               return localChooseFileTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getChooseFile(){
                               return localChooseFile;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ChooseFile
                               */
                               public void setChooseFile(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localChooseFileTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localChooseFile=param;
                                    

                               }
                            

                        /**
                        * field for Cluster
                        */

                        
                                    protected java.lang.String localCluster ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTracker = false ;

                           public boolean isClusterSpecified(){
                               return localClusterTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCluster(){
                               return localCluster;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Cluster
                               */
                               public void setCluster(java.lang.String param){
                            localClusterTracker = param != null;
                                   
                                            this.localCluster=param;
                                    

                               }
                            

                        /**
                        * field for ClusterType
                        */

                        
                                    protected java.lang.String localClusterType ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localClusterTypeTracker = false ;

                           public boolean isClusterTypeSpecified(){
                               return localClusterTypeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getClusterType(){
                               return localClusterType;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ClusterType
                               */
                               public void setClusterType(java.lang.String param){
                            localClusterTypeTracker = param != null;
                                   
                                            this.localClusterType=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUGetDataColumnsResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUGetDataColumnsResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localLogicalNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "LogicalName", xmlWriter);
                             

                                          if (localLogicalName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogicalName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localStartIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "StartIndex", xmlWriter);
                             
                                               if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("StartIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEndIndexTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "EndIndex", xmlWriter);
                             
                                               if (localEndIndex==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("EndIndex cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDFUDataKeyedColumns1Tracker){
                                            if (localDFUDataKeyedColumns1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns1 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns1.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns1"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns2Tracker){
                                            if (localDFUDataKeyedColumns2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns2 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns2.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns2"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns3Tracker){
                                            if (localDFUDataKeyedColumns3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns3 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns3.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns3"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns4Tracker){
                                            if (localDFUDataKeyedColumns4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns4 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns4.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns4"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns5Tracker){
                                            if (localDFUDataKeyedColumns5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns5 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns5.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns5"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns6Tracker){
                                            if (localDFUDataKeyedColumns6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns6 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns6.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns6"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns7Tracker){
                                            if (localDFUDataKeyedColumns7==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns7 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns7.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns7"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns8Tracker){
                                            if (localDFUDataKeyedColumns8==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns8 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns8.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns8"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns9Tracker){
                                            if (localDFUDataKeyedColumns9==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns9 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns9.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns9"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns10Tracker){
                                            if (localDFUDataKeyedColumns10==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns10 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns10.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns10"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns11Tracker){
                                            if (localDFUDataKeyedColumns11==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns11 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns11.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns11"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns12Tracker){
                                            if (localDFUDataKeyedColumns12==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns12 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns12.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns12"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns13Tracker){
                                            if (localDFUDataKeyedColumns13==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns13 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns13.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns13"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns14Tracker){
                                            if (localDFUDataKeyedColumns14==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns14 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns14.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns14"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns15Tracker){
                                            if (localDFUDataKeyedColumns15==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns15 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns15.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns15"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns16Tracker){
                                            if (localDFUDataKeyedColumns16==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns16 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns16.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns16"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns17Tracker){
                                            if (localDFUDataKeyedColumns17==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns17 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns17.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns17"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns18Tracker){
                                            if (localDFUDataKeyedColumns18==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns18 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns18.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns18"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns19Tracker){
                                            if (localDFUDataKeyedColumns19==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns19 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns19.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns19"),
                                               xmlWriter);
                                        } if (localDFUDataKeyedColumns20Tracker){
                                            if (localDFUDataKeyedColumns20==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns20 cannot be null!!");
                                            }
                                           localDFUDataKeyedColumns20.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns20"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns1Tracker){
                                            if (localDFUDataNonKeyedColumns1==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns1 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns1.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns1"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns2Tracker){
                                            if (localDFUDataNonKeyedColumns2==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns2 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns2.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns2"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns3Tracker){
                                            if (localDFUDataNonKeyedColumns3==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns3 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns3.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns3"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns4Tracker){
                                            if (localDFUDataNonKeyedColumns4==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns4 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns4.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns4"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns5Tracker){
                                            if (localDFUDataNonKeyedColumns5==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns5 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns5.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns5"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns6Tracker){
                                            if (localDFUDataNonKeyedColumns6==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns6 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns6.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns6"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns7Tracker){
                                            if (localDFUDataNonKeyedColumns7==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns7 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns7.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns7"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns8Tracker){
                                            if (localDFUDataNonKeyedColumns8==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns8 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns8.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns8"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns9Tracker){
                                            if (localDFUDataNonKeyedColumns9==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns9 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns9.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns9"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns10Tracker){
                                            if (localDFUDataNonKeyedColumns10==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns10 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns10.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns10"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns11Tracker){
                                            if (localDFUDataNonKeyedColumns11==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns11 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns11.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns11"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns12Tracker){
                                            if (localDFUDataNonKeyedColumns12==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns12 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns12.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns12"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns13Tracker){
                                            if (localDFUDataNonKeyedColumns13==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns13 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns13.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns13"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns14Tracker){
                                            if (localDFUDataNonKeyedColumns14==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns14 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns14.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns14"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns15Tracker){
                                            if (localDFUDataNonKeyedColumns15==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns15 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns15.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns15"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns16Tracker){
                                            if (localDFUDataNonKeyedColumns16==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns16 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns16.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns16"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns17Tracker){
                                            if (localDFUDataNonKeyedColumns17==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns17 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns17.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns17"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns18Tracker){
                                            if (localDFUDataNonKeyedColumns18==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns18 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns18.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns18"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns19Tracker){
                                            if (localDFUDataNonKeyedColumns19==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns19 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns19.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns19"),
                                               xmlWriter);
                                        } if (localDFUDataNonKeyedColumns20Tracker){
                                            if (localDFUDataNonKeyedColumns20==null){
                                                 throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns20 cannot be null!!");
                                            }
                                           localDFUDataNonKeyedColumns20.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns20"),
                                               xmlWriter);
                                        } if (localRowCountTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "RowCount", xmlWriter);
                             
                                               if (localRowCount==java.lang.Long.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("RowCount cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowCount));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localShowColumnsTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ShowColumns", xmlWriter);
                             

                                          if (localShowColumns==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localShowColumns);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localChooseFileTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ChooseFile", xmlWriter);
                             
                                               if (localChooseFile==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("ChooseFile cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "Cluster", xmlWriter);
                             

                                          if (localCluster==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCluster);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localClusterTypeTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "ClusterType", xmlWriter);
                             

                                          if (localClusterType==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localClusterType);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localLogicalNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "LogicalName"));
                                 
                                        if (localLogicalName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogicalName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("LogicalName cannot be null!!");
                                        }
                                    } if (localStartIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "StartIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                            } if (localEndIndexTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "EndIndex"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndIndex));
                            } if (localDFUDataKeyedColumns1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns1"));
                            
                            
                                    if (localDFUDataKeyedColumns1==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns1 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns1);
                                } if (localDFUDataKeyedColumns2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns2"));
                            
                            
                                    if (localDFUDataKeyedColumns2==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns2 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns2);
                                } if (localDFUDataKeyedColumns3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns3"));
                            
                            
                                    if (localDFUDataKeyedColumns3==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns3 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns3);
                                } if (localDFUDataKeyedColumns4Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns4"));
                            
                            
                                    if (localDFUDataKeyedColumns4==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns4 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns4);
                                } if (localDFUDataKeyedColumns5Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns5"));
                            
                            
                                    if (localDFUDataKeyedColumns5==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns5 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns5);
                                } if (localDFUDataKeyedColumns6Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns6"));
                            
                            
                                    if (localDFUDataKeyedColumns6==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns6 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns6);
                                } if (localDFUDataKeyedColumns7Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns7"));
                            
                            
                                    if (localDFUDataKeyedColumns7==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns7 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns7);
                                } if (localDFUDataKeyedColumns8Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns8"));
                            
                            
                                    if (localDFUDataKeyedColumns8==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns8 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns8);
                                } if (localDFUDataKeyedColumns9Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns9"));
                            
                            
                                    if (localDFUDataKeyedColumns9==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns9 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns9);
                                } if (localDFUDataKeyedColumns10Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns10"));
                            
                            
                                    if (localDFUDataKeyedColumns10==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns10 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns10);
                                } if (localDFUDataKeyedColumns11Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns11"));
                            
                            
                                    if (localDFUDataKeyedColumns11==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns11 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns11);
                                } if (localDFUDataKeyedColumns12Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns12"));
                            
                            
                                    if (localDFUDataKeyedColumns12==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns12 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns12);
                                } if (localDFUDataKeyedColumns13Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns13"));
                            
                            
                                    if (localDFUDataKeyedColumns13==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns13 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns13);
                                } if (localDFUDataKeyedColumns14Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns14"));
                            
                            
                                    if (localDFUDataKeyedColumns14==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns14 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns14);
                                } if (localDFUDataKeyedColumns15Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns15"));
                            
                            
                                    if (localDFUDataKeyedColumns15==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns15 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns15);
                                } if (localDFUDataKeyedColumns16Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns16"));
                            
                            
                                    if (localDFUDataKeyedColumns16==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns16 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns16);
                                } if (localDFUDataKeyedColumns17Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns17"));
                            
                            
                                    if (localDFUDataKeyedColumns17==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns17 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns17);
                                } if (localDFUDataKeyedColumns18Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns18"));
                            
                            
                                    if (localDFUDataKeyedColumns18==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns18 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns18);
                                } if (localDFUDataKeyedColumns19Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns19"));
                            
                            
                                    if (localDFUDataKeyedColumns19==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns19 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns19);
                                } if (localDFUDataKeyedColumns20Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataKeyedColumns20"));
                            
                            
                                    if (localDFUDataKeyedColumns20==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataKeyedColumns20 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataKeyedColumns20);
                                } if (localDFUDataNonKeyedColumns1Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns1"));
                            
                            
                                    if (localDFUDataNonKeyedColumns1==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns1 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns1);
                                } if (localDFUDataNonKeyedColumns2Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns2"));
                            
                            
                                    if (localDFUDataNonKeyedColumns2==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns2 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns2);
                                } if (localDFUDataNonKeyedColumns3Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns3"));
                            
                            
                                    if (localDFUDataNonKeyedColumns3==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns3 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns3);
                                } if (localDFUDataNonKeyedColumns4Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns4"));
                            
                            
                                    if (localDFUDataNonKeyedColumns4==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns4 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns4);
                                } if (localDFUDataNonKeyedColumns5Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns5"));
                            
                            
                                    if (localDFUDataNonKeyedColumns5==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns5 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns5);
                                } if (localDFUDataNonKeyedColumns6Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns6"));
                            
                            
                                    if (localDFUDataNonKeyedColumns6==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns6 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns6);
                                } if (localDFUDataNonKeyedColumns7Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns7"));
                            
                            
                                    if (localDFUDataNonKeyedColumns7==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns7 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns7);
                                } if (localDFUDataNonKeyedColumns8Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns8"));
                            
                            
                                    if (localDFUDataNonKeyedColumns8==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns8 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns8);
                                } if (localDFUDataNonKeyedColumns9Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns9"));
                            
                            
                                    if (localDFUDataNonKeyedColumns9==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns9 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns9);
                                } if (localDFUDataNonKeyedColumns10Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns10"));
                            
                            
                                    if (localDFUDataNonKeyedColumns10==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns10 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns10);
                                } if (localDFUDataNonKeyedColumns11Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns11"));
                            
                            
                                    if (localDFUDataNonKeyedColumns11==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns11 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns11);
                                } if (localDFUDataNonKeyedColumns12Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns12"));
                            
                            
                                    if (localDFUDataNonKeyedColumns12==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns12 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns12);
                                } if (localDFUDataNonKeyedColumns13Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns13"));
                            
                            
                                    if (localDFUDataNonKeyedColumns13==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns13 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns13);
                                } if (localDFUDataNonKeyedColumns14Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns14"));
                            
                            
                                    if (localDFUDataNonKeyedColumns14==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns14 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns14);
                                } if (localDFUDataNonKeyedColumns15Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns15"));
                            
                            
                                    if (localDFUDataNonKeyedColumns15==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns15 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns15);
                                } if (localDFUDataNonKeyedColumns16Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns16"));
                            
                            
                                    if (localDFUDataNonKeyedColumns16==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns16 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns16);
                                } if (localDFUDataNonKeyedColumns17Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns17"));
                            
                            
                                    if (localDFUDataNonKeyedColumns17==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns17 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns17);
                                } if (localDFUDataNonKeyedColumns18Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns18"));
                            
                            
                                    if (localDFUDataNonKeyedColumns18==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns18 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns18);
                                } if (localDFUDataNonKeyedColumns19Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns19"));
                            
                            
                                    if (localDFUDataNonKeyedColumns19==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns19 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns19);
                                } if (localDFUDataNonKeyedColumns20Tracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "DFUDataNonKeyedColumns20"));
                            
                            
                                    if (localDFUDataNonKeyedColumns20==null){
                                         throw new org.apache.axis2.databinding.ADBException("DFUDataNonKeyedColumns20 cannot be null!!");
                                    }
                                    elementList.add(localDFUDataNonKeyedColumns20);
                                } if (localRowCountTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "RowCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRowCount));
                            } if (localShowColumnsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ShowColumns"));
                                 
                                        if (localShowColumns != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShowColumns));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ShowColumns cannot be null!!");
                                        }
                                    } if (localChooseFileTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ChooseFile"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localChooseFile));
                            } if (localClusterTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Cluster"));
                                 
                                        if (localCluster != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCluster));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Cluster cannot be null!!");
                                        }
                                    } if (localClusterTypeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "ClusterType"));
                                 
                                        if (localClusterType != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClusterType));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ClusterType cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUGetDataColumnsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUGetDataColumnsResponse object =
                new DFUGetDataColumnsResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUGetDataColumnsResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUGetDataColumnsResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","LogicalName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"LogicalName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogicalName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","StartIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"StartIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","EndIndex").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EndIndex" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEndIndex(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns1").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns1(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns2").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns2(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns3").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns3(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns4").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns4(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns5").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns5(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns6").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns6(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns7").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns7(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns8").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns8(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns9").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns9(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns10").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns10(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns11").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns11(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns12").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns12(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns13").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns13(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns14").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns14(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns15").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns15(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns16").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns16(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns17").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns17(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns18").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns18(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns19").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns19(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataKeyedColumns20").equals(reader.getName())){
                                
                                                object.setDFUDataKeyedColumns20(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns1").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns1(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns2").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns2(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns3").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns3(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns4").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns4(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns5").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns5(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns6").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns6(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns7").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns7(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns8").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns8(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns9").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns9(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns10").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns10(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns11").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns11(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns12").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns12(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns13").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns13(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns14").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns14(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns15").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns15(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns16").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns16(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns17").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns17(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns18").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns18(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns19").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns19(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","DFUDataNonKeyedColumns20").equals(reader.getName())){
                                
                                                object.setDFUDataNonKeyedColumns20(ArrayOfDFUDataColumn.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","RowCount").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"RowCount" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRowCount(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ShowColumns").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ShowColumns" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setShowColumns(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ChooseFile").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ChooseFile" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setChooseFile(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Cluster").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Cluster" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCluster(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","ClusterType").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ClusterType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setClusterType(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class SavexmlRequest
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "SavexmlRequest",
                "ns1");

            

                        /**
                        * field for Name
                        */

                        
                                    protected java.lang.String localName ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNameTracker = false ;

                           public boolean isNameSpecified(){
                               return localNameTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getName(){
                               return localName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Name
                               */
                               public void setName(java.lang.String param){
                            localNameTracker = param != null;
                                   
                                            this.localName=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":SavexmlRequest",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "SavexmlRequest",
                           xmlWriter);
                   }

               
                   }
                if (localNameTracker){
                                    namespace = "urn:hpccsystems:ws:wsdfu";
                                    writeStartElement(null, namespace, "name", xmlWriter);
                             

                                          if (localName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localNameTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "name"));
                                 
                                        if (localName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static SavexmlRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            SavexmlRequest object =
                new SavexmlRequest();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"SavexmlRequest".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SavexmlRequest)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","name").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"name" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class String
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "string",
                "ns1");

            

                        /**
                        * field for String
                        */

                        
                                    protected java.lang.String localString ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getString(){
                               return localString;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param String
                               */
                               public void setString(java.lang.String param){
                            
                                            this.localString=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = "urn:hpccsystems:ws:wsdfu";
                            java.lang.String _localName = "string";
                        
                            writeStartElement(null, namespace, _localName, xmlWriter);

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":string",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "string",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localString==null){
                                            
                                                     // write the nil attribute
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localString);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();
                    

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                
                                if (localString==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString)
                                       },
                                       null);
                                }
                            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static String parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            String object =
                new String();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                   if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                         // Skip the element and report the null value.  It cannot have subelements.
                         while (!reader.isEndElement())
                             reader.next();
                         
                                 return object;
                             

                   }
                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","string").equals(reader.getName())){
                                
                                       nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                       if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setString(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                            
                                       } else {
                                           
                                           
                                           reader.getElementText(); // throw away text nodes if any.
                                       }
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class DFUInfoResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:hpccsystems:ws:wsdfu",
                "DFUInfoResponse",
                "ns1");

            

                        /**
                        * field for Exceptions
                        */

                        
                                    protected ArrayOfEspException localExceptions ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localExceptionsTracker = false ;

                           public boolean isExceptionsSpecified(){
                               return localExceptionsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return ArrayOfEspException
                           */
                           public  ArrayOfEspException getExceptions(){
                               return localExceptions;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Exceptions
                               */
                               public void setExceptions(ArrayOfEspException param){
                            localExceptionsTracker = param != null;
                                   
                                            this.localExceptions=param;
                                    

                               }
                            

                        /**
                        * field for FileDetail
                        */

                        
                                    protected DFUFileDetail localFileDetail ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localFileDetailTracker = false ;

                           public boolean isFileDetailSpecified(){
                               return localFileDetailTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return DFUFileDetail
                           */
                           public  DFUFileDetail getFileDetail(){
                               return localFileDetail;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param FileDetail
                               */
                               public void setFileDetail(DFUFileDetail param){
                            localFileDetailTracker = param != null;
                                   
                                            this.localFileDetail=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:hpccsystems:ws:wsdfu");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":DFUInfoResponse",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "DFUInfoResponse",
                           xmlWriter);
                   }

               
                   }
                if (localExceptionsTracker){
                                            if (localExceptions==null){
                                                 throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                            }
                                           localExceptions.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions"),
                                               xmlWriter);
                                        } if (localFileDetailTracker){
                                            if (localFileDetail==null){
                                                 throw new org.apache.axis2.databinding.ADBException("FileDetail cannot be null!!");
                                            }
                                           localFileDetail.serialize(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileDetail"),
                                               xmlWriter);
                                        }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:hpccsystems:ws:wsdfu")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localExceptionsTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "Exceptions"));
                            
                            
                                    if (localExceptions==null){
                                         throw new org.apache.axis2.databinding.ADBException("Exceptions cannot be null!!");
                                    }
                                    elementList.add(localExceptions);
                                } if (localFileDetailTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu",
                                                                      "FileDetail"));
                            
                            
                                    if (localFileDetail==null){
                                         throw new org.apache.axis2.databinding.ADBException("FileDetail cannot be null!!");
                                    }
                                    elementList.add(localFileDetail);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static DFUInfoResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            DFUInfoResponse object =
                new DFUInfoResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"DFUInfoResponse".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DFUInfoResponse)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","Exceptions").equals(reader.getName())){
                                
                                                object.setExceptions(ArrayOfEspException.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                        else
                                    
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:hpccsystems:ws:wsdfu","FileDetail").equals(reader.getName())){
                                
                                                object.setFileDetail(DFUFileDetail.Factory.parse(reader));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUGetDataColumnsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUArrayActionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUQueryResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchDataResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddRemoteResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SavexmlResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileActionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileAddRawResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.AddtoSuperfileResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSearchResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUFileViewResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUSpaceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.SuperfileListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUInfoResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUDefFileResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.DFUBrowseDataResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.class.equals(type)){
                
                           return org.hpccsystems.ws.wsdfu.WsDfuStub.Exceptions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   