/* The following code was generated by JFlex 1.4.1 on 20/09/10 15:25 */

/*******************************************************************************
 * Copyright (c) 2007 Ryan Rusaw
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Ryan Rusaw
 *******************************************************************************/
package org.seisint.eclide.internal.parser;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import org.seisint.eclide.core.OctclipsePlugin;
import org.seisint.eclide.internal.parser.OctaveParser;
import org.seisint.eclide.internal.parser.OctaveToken;
import org.seisint.eclide.runtime.symbols.Symbol;
import org.seisint.eclide.internal.parser.OctaveLexerException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 20/09/10 15:25 from the specification file
 * <tt>octave.flex</tt>
 */
public class OctaveLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SQSTRING = 4;
  public static final int BLOCK_COMMENT = 5;
  public static final int COMMAND = 3;
  public static final int YYINITIAL = 0;
  public static final int DQSTRING = 2;
  public static final int TRANSPOSABLE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\21\2\20\1\15\22\0\1\2\1\62\1\25\1\22"+
    "\1\0\1\33\1\72\1\10\1\66\1\67\1\17\1\55\1\64\1\5"+
    "\1\11\1\16\1\12\11\1\1\65\1\63\1\57\1\60\1\61\1\0"+
    "\1\74\3\14\2\4\1\14\2\3\2\6\15\3\1\13\2\3\1\70"+
    "\1\7\1\71\1\56\1\47\1\0\1\35\1\26\1\46\1\41\1\34"+
    "\1\31\1\53\1\45\1\42\1\6\1\36\1\37\1\3\1\30\1\43"+
    "\1\52\1\3\1\32\1\40\1\27\1\51\1\54\1\44\1\13\1\50"+
    "\1\3\1\23\1\73\1\24\1\62\6\0\1\20\u1fa2\0\2\20\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\1\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\17\4\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\10\1\40\1\1\1\41"+
    "\1\42\1\43\1\44\1\1\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\4\1\1\0\1\1\1\0\2\2\1\53"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\1\0\1\11"+
    "\1\61\1\62\1\20\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\11\4\1\66\1\67\7\4\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\0\1\106\1\107\1\0\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\0"+
    "\3\120\2\0\1\120\6\0\1\2\1\0\1\121\1\0"+
    "\1\122\1\123\1\2\2\124\2\125\1\65\1\4\1\126"+
    "\1\127\2\4\1\130\14\4\1\131\1\132\3\133\3\134"+
    "\3\135\3\136\1\0\1\137\10\4\1\140\5\4\1\141"+
    "\5\4\1\142\5\4\1\143\7\4\1\144\1\145\1\146"+
    "\5\4\1\147\1\150\5\4\1\151\1\152\1\153\3\4"+
    "\1\154\14\4\1\155\2\4\1\156\5\4\1\157\2\4"+
    "\1\160\2\4\1\161\2\4\1\162\4\4\1\163\6\4"+
    "\1\164\3\4\1\165\6\4\1\166\4\4\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u016e\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u016e\0\u016e\0\u016e\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u016e\0\u0988\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u09c5\0\u0a02\0\u016e\0\u016e\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u016e\0\u0af6\0\u0b33\0\u016e\0\u0b70\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u016e\0\u0dd2\0\u016e\0\u016e"+
    "\0\u0e0f\0\u016e\0\u016e\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u0ff7\0\u040d\0\u1034\0\u1071\0\u044a\0\u10ae"+
    "\0\u016e\0\u10eb\0\u016e\0\u1128\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u0225\0\u0225"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u016e"+
    "\0\u016e\0\u016e\0\u1535\0\u016e\0\u016e\0\u016e\0\u016e\0\u1572"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u15af\0\u016e\0\u016e"+
    "\0\u15ec\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e"+
    "\0\u016e\0\u0c27\0\u0c27\0\u016e\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u1629\0\u1666\0\u0c64\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u016e\0\u1797\0\u016e\0\u016e\0\u17d4\0\u1811\0\u016e\0\u184e"+
    "\0\u016e\0\u016e\0\u188b\0\u0225\0\u0225\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u016e\0\u016e\0\u1c5b\0\u0c27"+
    "\0\u016e\0\u1c98\0\u0c27\0\u016e\0\u1cd5\0\u0c27\0\u016e\0\u1d12"+
    "\0\u0c27\0\u016e\0\u1d4f\0\u016e\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u0225\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u0225\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u0225\0\u2344"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u0225\0\u0225"+
    "\0\u0225\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u0225\0\u0225"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u0225\0\u0225\0\u0225"+
    "\0\u2751\0\u278e\0\u27cb\0\u0225\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7"+
    "\0\u0225\0\u2ae4\0\u2b21\0\u0225\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u0225\0\u2c8f\0\u2ccc\0\u0225\0\u2d09\0\u2d46\0\u0225"+
    "\0\u2d83\0\u2dc0\0\u0225\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u0225"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u0225\0\u305f"+
    "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u0225\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u0225";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\2\12\1\13\1\12\1\14\1\15"+
    "\1\16\1\17\2\12\1\20\1\21\1\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\12\1\32"+
    "\1\33\1\24\1\34\3\12\1\35\1\36\1\37\1\40"+
    "\1\41\1\12\1\42\2\12\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\7\1\10\1\11\2\12\1\13\1\12\1\14\1\67"+
    "\1\70\1\17\2\12\1\20\1\21\1\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\7\1\30\1\31\1\12\1\32"+
    "\1\33\1\24\1\34\3\12\1\35\1\36\1\37\1\40"+
    "\1\41\1\12\1\42\2\12\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\7\71\1\72\5\71\1\7\3\71\1\0\3\71\1\73"+
    "\47\71\2\7\1\74\2\75\1\7\1\75\1\7\1\76"+
    "\2\7\2\75\1\77\3\7\1\100\3\7\1\101\5\75"+
    "\1\7\21\75\6\7\1\102\1\103\10\7\10\104\1\105"+
    "\64\104\15\106\1\107\1\110\1\111\1\106\1\112\1\113"+
    "\52\106\76\0\1\10\2\0\1\114\1\0\1\115\2\0"+
    "\1\116\1\10\21\0\1\114\4\0\1\114\1\115\34\0"+
    "\1\11\61\0\1\56\11\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\21\12\25\0"+
    "\1\117\52\0\1\120\16\0\1\121\16\0\1\122\36\0"+
    "\1\123\15\0\1\116\3\0\1\124\1\0\1\125\1\0"+
    "\1\126\1\116\3\0\1\127\1\130\35\0\1\131\1\132"+
    "\17\0\1\10\2\0\1\114\1\0\1\115\2\0\1\116"+
    "\1\10\1\133\20\0\1\114\4\0\1\114\1\115\47\0"+
    "\1\134\1\135\1\136\1\0\1\23\1\137\10\0\1\137"+
    "\60\0\1\140\40\0\1\141\32\0\1\142\1\50\40\0"+
    "\1\143\31\0\1\134\1\135\1\136\1\0\1\134\1\137"+
    "\10\0\1\137\41\0\15\144\1\145\2\144\2\145\53\144"+
    "\1\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\4\12\1\146\1\0\21\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\4\12\1\147"+
    "\1\0\21\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\7\12\1\150\5\12"+
    "\1\151\3\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\1\152\20\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\2\12\1\153\2\12\1\0\3\12\1\154\15\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\1\12\1\155\3\12\1\0\10\12\1\156\10\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\7\12\1\157\11\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\3\12\1\160"+
    "\1\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\1\12\1\161\3\12\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\11\12\1\162\7\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\1\12\1\163\17\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\2\12\1\164"+
    "\2\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\1\165\20\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\3\12\1\166\15\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\1\12\1\167\17\12\75\0\1\170\2\0\1\171"+
    "\74\0\1\172\73\0\1\173\1\174\1\175\73\0\1\176"+
    "\74\0\1\177\1\200\73\0\1\175\16\0\1\56\152\0"+
    "\1\201\11\0\1\202\62\0\1\203\12\0\1\204\2\0"+
    "\1\116\3\0\1\124\1\0\1\125\1\205\1\126\1\116"+
    "\3\0\1\127\1\130\35\0\1\131\1\132\16\0\7\71"+
    "\1\0\5\71\1\0\3\71\1\0\3\71\1\0\47\71"+
    "\2\0\1\206\4\0\1\207\1\210\4\0\1\211\3\0"+
    "\1\212\3\0\1\213\1\214\1\215\1\216\1\217\1\220"+
    "\44\0\1\74\73\0\1\75\1\0\2\75\1\0\1\75"+
    "\3\0\3\75\11\0\5\75\1\0\21\75\41\0\1\100"+
    "\53\0\10\104\1\0\64\104\10\0\1\221\64\0\15\222"+
    "\1\223\2\222\1\223\1\224\70\222\1\225\1\226\1\227"+
    "\1\223\1\230\1\231\67\222\1\223\1\222\1\232\1\223"+
    "\1\224\70\222\1\223\1\233\1\222\1\223\1\224\70\222"+
    "\1\234\1\226\1\227\1\222\1\112\1\231\67\222\1\223"+
    "\2\222\1\223\1\224\1\222\1\235\1\236\50\222\1\0"+
    "\1\237\3\0\1\240\4\0\1\237\42\0\1\240\20\0"+
    "\1\116\2\0\1\114\1\0\1\115\3\0\1\116\21\0"+
    "\1\114\4\0\1\114\1\115\34\0\1\121\16\0\1\122"+
    "\133\0\1\241\74\0\1\123\25\0\1\242\143\0\1\141"+
    "\33\0\1\132\40\0\1\143\74\0\1\243\74\0\1\244"+
    "\15\0\1\245\2\0\1\245\5\0\1\245\1\0\1\245"+
    "\11\0\1\245\2\0\1\245\2\0\2\245\3\0\1\245"+
    "\4\0\1\245\45\0\1\140\73\0\1\142\60\0\1\140"+
    "\12\0\1\246\2\0\2\247\55\0\1\142\12\0\1\250"+
    "\2\0\2\251\53\0\15\144\1\145\2\144\1\145\1\252"+
    "\53\144\1\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\1\253\20\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\14\12\1\254\4\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\4\12\1\255\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\2\12\1\256\2\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\1\12\1\257\3\12\1\0\21\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\5\12\1\260\13\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\4\12\1\261"+
    "\14\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\1\12\1\262\17\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\6\12\1\263\12\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\11\12\1\264\7\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\6\12\1\265"+
    "\12\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\1\12\1\266\3\12\1\0\4\12\1\267"+
    "\14\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\1\12\1\270\3\12\1\0\10\12\1\271"+
    "\10\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\4\12\1\272\1\0\21\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\7\12\1\273\11\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\4\12\1\274\1\0"+
    "\21\12\100\0\1\275\74\0\1\276\16\0\1\206\12\0"+
    "\1\211\3\0\1\212\74\0\1\212\53\0\2\222\1\232"+
    "\12\222\1\277\2\222\1\300\1\301\55\222\1\233\12\222"+
    "\1\302\2\222\1\303\1\304\55\222\1\235\12\222\1\305"+
    "\2\222\1\306\1\307\55\222\1\236\12\222\1\310\2\222"+
    "\1\311\1\312\53\222\1\0\1\237\4\0\1\115\3\0"+
    "\1\237\27\0\1\115\33\0\1\237\10\0\1\237\64\0"+
    "\1\242\12\0\1\313\3\0\1\314\54\0\1\245\2\0"+
    "\1\245\1\0\1\115\3\0\1\245\1\0\1\245\11\0"+
    "\1\245\2\0\1\245\2\0\2\245\3\0\1\245\1\115"+
    "\3\0\1\245\47\0\1\247\74\0\1\251\54\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\1\12\1\315\17\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\12\12"+
    "\1\316\6\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\15\12\1\317\3\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\3\12\1\320\1\12\1\0\4\12\1\321\1\12"+
    "\1\322\1\12\1\323\2\12\1\324\5\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\1\325\20\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\1\12\1\326\3\12\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\1\12\1\327\3\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\1\330\20\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\3\12"+
    "\1\331\15\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\12\12\1\332\6\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\1\333\20\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\6\12\1\334\12\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\6\12\1\335"+
    "\12\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\4\12\1\336\14\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\1\337\4\12\1\0\21\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\1\12"+
    "\1\340\17\12\20\0\15\222\1\223\2\222\1\223\1\301"+
    "\70\222\1\223\2\222\1\223\1\304\70\222\1\223\2\222"+
    "\1\223\1\307\70\222\1\223\2\222\1\223\1\312\53\222"+
    "\21\0\1\314\54\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\2\12\1\341\16\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\1\12\1\342\3\12\1\0\21\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\4\12"+
    "\1\343\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\7\12\1\344"+
    "\5\12\1\345\3\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\10\12\1\346"+
    "\10\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\3\12\1\347\1\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\11\12\1\350\7\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\1\12\1\351"+
    "\3\12\1\0\15\12\1\352\3\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\6\12\1\353\12\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\6\12\1\354"+
    "\12\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\12\12\1\355\6\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\4\12\1\356\1\0\21\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\1\357"+
    "\20\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\11\12\1\360\7\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\3\12\1\361\15\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\2\12\1\362"+
    "\2\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\6\12\1\363"+
    "\12\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\1\12\1\364\17\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\4\12\1\365\1\0\21\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\6\12"+
    "\1\366\12\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\2\12\1\367\2\12\1\0\21\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\4\12\1\370\1\0\21\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\2\12\1\371"+
    "\2\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\6\12\1\372"+
    "\12\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\6\12\1\373\12\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\4\12\1\374\1\0\21\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\2\12\1\375\2\12"+
    "\1\0\21\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\3\12\1\376\1\12\1\0\21\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\12\12\1\377\6\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\11\12\1\u0100\7\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\10\12"+
    "\1\u0101\10\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\5\12\1\u0102\13\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\4\12\1\u0103\14\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\3\12\1\u0104\15\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\17\12"+
    "\1\u0105\1\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\7\12\1\u0106\11\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\12\12\1\u0107\6\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\1\12"+
    "\1\u0108\3\12\1\0\21\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\3\12"+
    "\1\u0109\15\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\14\12\1\u010a\4\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\10\12\1\u010b\10\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\6\12\1\u010c\12\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\13\12"+
    "\1\u010d\5\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\1\12\1\u010e\3\12\1\0\21\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\6\12\1\u010f\1\u0110\11\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\2\12\1\u0111\2\12\1\0\21\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\1\12\1\u0112"+
    "\3\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\12\12\1\u0113"+
    "\6\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\1\u0114\20\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\13\12\1\u0115\5\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\6\12"+
    "\1\u0116\12\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\4\12\1\u0117\14\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\16\12\1\u0118\2\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\1\u0119\20\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\2\12\1\u011a\2\12\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\15\12\1\u011b\3\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\6\12\1\u011c\12\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\11\12\1\u011d\7\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\12\12\1\u011e"+
    "\6\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\2\12\1\u011f\2\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\1\u0120\20\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\4\12\1\u0121\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\2\12\1\u0122\2\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\1\12\1\u0123\3\12\1\0\21\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\7\12\1\u0124\11\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\1\12\1\u0125"+
    "\17\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\5\12\1\u0126\13\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\7\12\1\u0127\11\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\1\12\1\377"+
    "\3\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\2\12\1\u0128\2\12\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\1\12\1\u0129\3\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\13\12\1\u012a\5\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\1\12\1\u012b"+
    "\3\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\12\12\1\u012c"+
    "\6\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\16\12\1\u012d\2\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\1\u012e\20\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\5\12\1\0\11\12"+
    "\1\u012f\7\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\4\12\1\u0130\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\12\12\1\u0131\6\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\7\12\1\u0132\11\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\1\12\1\u0133\3\12\1\0"+
    "\21\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\1\12\1\u0134\3\12\1\0\21\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\13\12\1\u0135\5\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\5\12\1\0"+
    "\1\u0136\20\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\12\12\1\u0137\6\12"+
    "\21\0\1\12\1\0\2\12\1\0\1\12\3\0\3\12"+
    "\11\0\5\12\1\0\12\12\1\u0138\6\12\21\0\1\12"+
    "\1\0\2\12\1\0\1\12\3\0\3\12\11\0\5\12"+
    "\1\0\3\12\1\u0139\15\12\21\0\1\12\1\0\2\12"+
    "\1\0\1\12\3\0\3\12\11\0\1\12\1\u013a\3\12"+
    "\1\0\21\12\21\0\1\12\1\0\2\12\1\0\1\12"+
    "\3\0\3\12\11\0\5\12\1\0\1\u013b\20\12\21\0"+
    "\1\12\1\0\2\12\1\0\1\12\3\0\3\12\11\0"+
    "\5\12\1\0\1\12\1\u013c\17\12\21\0\1\12\1\0"+
    "\2\12\1\0\1\12\3\0\3\12\11\0\2\12\1\u013d"+
    "\2\12\1\0\21\12\21\0\1\12\1\0\2\12\1\0"+
    "\1\12\3\0\3\12\11\0\5\12\1\0\15\12\1\u013e"+
    "\3\12\21\0\1\12\1\0\2\12\1\0\1\12\3\0"+
    "\3\12\11\0\5\12\1\0\16\12\1\u013f\2\12\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13237];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\6\1\1\3\3\11\25\1"+
    "\1\11\1\1\5\11\2\1\2\11\3\1\1\11\2\1"+
    "\1\11\1\1\4\11\2\1\4\3\1\0\1\3\1\0"+
    "\1\11\1\1\2\11\1\0\2\11\2\1\1\0\4\1"+
    "\4\0\2\2\1\11\1\2\1\11\1\2\1\7\22\1"+
    "\3\11\1\1\4\11\1\1\5\11\1\0\2\11\1\0"+
    "\10\11\1\2\1\7\1\15\1\7\2\2\1\5\6\2"+
    "\1\1\1\0\1\11\1\0\2\11\1\1\1\5\1\15"+
    "\1\5\2\15\22\1\2\11\2\7\1\15\2\7\1\15"+
    "\2\7\1\15\2\7\1\15\1\0\1\11\163\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private OctaveParser yyparser;
	private int functionDepth;
	private boolean varargoutIsToken;
	private boolean vararginIsToken;
	private int matrixIgnoreNL;
	private boolean peekFlag;
	private int returnState;
	StringBuffer string;
	int b_comm_h_lvl;
	int b_comm_p_lvl;
	int myline;
  	int mycolumn;
  	int mychar;
	public OctaveLexer(java.io.Reader r, OctaveParser yyparser) {
		this(r);
		this.yyparser = yyparser;
		functionDepth = 0;
		varargoutIsToken = false;
		vararginIsToken = false;
		matrixIgnoreNL = 0;
		peekFlag = false;
		string = new StringBuffer();
		b_comm_p_lvl = 0;
		b_comm_h_lvl = 0;
	}
	
	public void increaseFunctionDepth() {
		functionDepth++;
	}

	public void decreaseFunctionDepth() {
		functionDepth--;
	}

	public void enableMatrixIgnoreNewLine() {
		matrixIgnoreNL++;
	}
	
	public void disableMatrixIgnoreNewLine() {
		matrixIgnoreNL--;
	}

	public void enableVarArgOut() {
		varargoutIsToken = true;
	}
	
	public void disableVarArgOut() {
		varargoutIsToken = false;
	}
	
	public void enableVarArgIn() {
		vararginIsToken = true;
	}
	
	public void disableVarArgIn() {
		vararginIsToken = false;
	}
	
	public boolean peekIs(List types) throws IOException, OctaveLexerException {
		boolean retval = false;
		peekFlag = true;
		yylex();
		peekFlag = false;
		OctaveToken token = (OctaveToken)yyparser.yylval;
		for (Iterator it = types.iterator(); it.hasNext(); )
		{
			Object o = it.next();
			if (o instanceof Integer)
			{
				Integer ic = (Integer)o;
				if (token.getType() == ic.intValue()) {
					retval = true;
					break;
				}
			}
		}
		yypushback(yylength());
		return retval;
	}
	
	public boolean peekIs(int type) throws IOException, OctaveLexerException {
		boolean retval;
		peekFlag = true;
		yylex();
		peekFlag = false;
		OctaveToken token = (OctaveToken)yyparser.yylval;
		if (token == null) {
			return false;
		} else if (token.getType() == type) {
			retval = true;
		} else { 
			retval = false;
		}
		yypushback(yylength());
		return retval;
	}

	public boolean isCommand(String name) {
		Vector list = OctclipsePlugin.getSymbolList().getSymbols(Symbol.COMMAND);
		Iterator i = list.iterator();
		while(i.hasNext()) {
			Object o = i.next();
			if (o instanceof Symbol) {
				Symbol s = (Symbol)o;
				if (name.equals(s.getName())) {
					return true;
				}
			}
		}
		return false;
	}
	
	public int Yyline() {
		return yyline;
	}
	
	public int Yychar() {
		return yychar;
	}
	
	public int Yycolumn() {
		return yycolumn;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OctaveLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OctaveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws OctaveLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new OctaveLexerException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws OctaveLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException, OctaveLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDFUNCTION, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDFUNCTION);
          }
        case 120: break;
        case 104: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDFOR, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDFOR);
          }
        case 121: break;
        case 105: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ELSEIF, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ELSEIF);
          }
        case 122: break;
        case 33: 
          { yybegin(returnState); 
				 	      yyparser.yylval = new OctaveToken(OctaveParser.STRING_LITERAL, string.toString(), myline, mycolumn, mychar);
					      return(OctaveParser.STRING_LITERAL);
          }
        case 123: break;
        case 107: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.SWITCH, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.SWITCH);
          }
        case 124: break;
        case 95: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.CONTINUATION, yytext(), yyline, yycolumn, yychar);
          }
        case 125: break;
        case 39: 
          { yybegin(YYINITIAL); 
                          yyparser.yylval = new OctaveToken(OctaveParser.SEMICOLON, yytext(), yyline, yycolumn, yychar);
                          return(OctaveParser.SEMICOLON);
          }
        case 126: break;
        case 96: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ELSE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ELSE);
          }
        case 127: break;
        case 80: 
          { yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 128: break;
        case 75: 
          { yybegin(DQSTRING);
  						  string.append( '\t' );
          }
        case 129: break;
        case 91: 
          { b_comm_p_lvl++; 
					yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 130: break;
        case 119: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.CLEANUP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.CLEANUP);
          }
        case 131: break;
        case 117: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.UNWIND, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.UNWIND);
          }
        case 132: break;
        case 35: 
          { yybegin(COMMAND);
                          yyparser.yylval = new OctaveToken(OctaveParser.COMMAND_STRING, yytext(), yyline, yycolumn, yychar);
                          return(OctaveParser.COMMAND_STRING);
          }
        case 133: break;
        case 110: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDWHILE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDWHILE);
          }
        case 134: break;
        case 52: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.MULT_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MULT_EQ);
          }
        case 135: break;
        case 18: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ASSIGN, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ASSIGN);
          }
        case 136: break;
        case 106: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.PERSISTENT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PERSISTENT);
          }
        case 137: break;
        case 32: 
          { yybegin(DQSTRING);
  						  string.append( yytext() );
          }
        case 138: break;
        case 6: 
          { yybegin(YYINITIAL); 
						  if (!peekFlag && !peekIs(OctaveParser.CR)) {
						  	yyparser.yylval = new OctaveToken(OctaveParser.LDIV, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.LDIV); 
						  }
          }
        case 139: break;
        case 64: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.RSHIFT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RSHIFT);
          }
        case 140: break;
        case 31: 
          { yybegin(TRANSPOSABLE);
						  yyparser.yylval = new OctaveToken(OctaveParser.TRANSPOSE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.TRANSPOSE);
          }
        case 141: break;
        case 50: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.PLUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PLUS);
          }
        case 142: break;
        case 43: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.MINUS_MINUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MINUS_MINUS);
          }
        case 143: break;
        case 76: 
          { yybegin(DQSTRING);
  						  string.append( '\n' );
          }
        case 144: break;
        case 67: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.OR_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.OR_EQ);
          }
        case 145: break;
        case 100: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.WHILE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.WHILE);
          }
        case 146: break;
        case 10: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.MULT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MULT);
          }
        case 147: break;
        case 59: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LSHIFT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LSHIFT);
          }
        case 148: break;
        case 48: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LDIV, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LDIV);
          }
        case 149: break;
        case 63: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.GE_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.GE_OP);
          }
        case 150: break;
        case 55: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.IF, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.IF);
          }
        case 151: break;
        case 41: 
          { yybegin(SQSTRING);
                          string.append( yytext() );
          }
        case 152: break;
        case 11: 
          { yybegin(YYINITIAL); 
						  if (peekFlag || matrixIgnoreNL<=0)
						  {
						  	yyparser.yylval = new OctaveToken(OctaveParser.CR, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.CR);
						  }
          }
        case 153: break;
        case 61: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.NE_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.NE_OP);
          }
        case 154: break;
        case 66: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.AND_AND, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.AND_AND);
          }
        case 155: break;
        case 46: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LDIV_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LDIV_EQ);
          }
        case 156: break;
        case 118: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDUNWINDPROTECT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDUNWINDPROTECT);
          }
        case 157: break;
        case 111: 
          { yybegin(YYINITIAL);
						  if (vararginIsToken)
						  {
						  	yyparser.yylval = new OctaveToken(OctaveParser.VARARGIN, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.VARARGIN);
						  } else {
						  	yyparser.yylval = new OctaveToken(OctaveParser.IDENTIFIER, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.IDENTIFIER);
						  }
          }
        case 158: break;
        case 97: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.CASE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.CASE);
          }
        case 159: break;
        case 22: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.COMMA, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.COMMA);
          }
        case 160: break;
        case 60: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LE_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LE_OP);
          }
        case 161: break;
        case 69: 
          { yybegin(TRANSPOSABLE); 
						  yyparser.yylval = new OctaveToken(OctaveParser.TRANSPOSE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.TRANSPOSE);
          }
        case 162: break;
        case 84: 
          { yybegin(BLOCK_COMMENT); 
						  returnState = YYINITIAL;
						  b_comm_h_lvl = 0;
						  b_comm_p_lvl = 1; 
						  yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 163: break;
        case 78: 
          { yybegin(DQSTRING);
  						  string.append( '\r' );
          }
        case 164: break;
        case 40: 
          { yybegin(YYINITIAL); 
                          yyparser.yylval = new OctaveToken(OctaveParser.COMMA, yytext(), yyline, yycolumn, yychar);
                          return(OctaveParser.COMMA);
          }
        case 165: break;
        case 12: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LBRACE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LBRACE);
          }
        case 166: break;
        case 74: 
          { yybegin(DQSTRING);
  						  string.append( '\b' );
          }
        case 167: break;
        case 20: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.NOT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.NOT);
          }
        case 168: break;
        case 93: 
          { b_comm_h_lvl++; 
					yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 169: break;
        case 38: 
          { returnState = COMMAND;
                          yybegin(DQSTRING); 
                          string.setLength(0);
                          myline = yyline;
                          mycolumn = yycolumn;
                          mychar = yychar;
          }
        case 170: break;
        case 23: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.COLON, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.COLON);
          }
        case 171: break;
        case 92: 
          { b_comm_p_lvl--;
					if (b_comm_p_lvl == 0 && b_comm_h_lvl == 0) {
						yybegin(returnState); 
					} 
					yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 172: break;
        case 4: 
          { String text = yytext();
						  myline = yyline;
  						  mycolumn = yycolumn;
  						  mychar = yychar;
  						  if (isCommand(text) && !peekIs(OctaveParser.LPAREN))
						  {
						    yybegin(COMMAND);
						  	yyparser.yylval = new OctaveToken(OctaveParser.COMMAND_IDENTIFIER, text, myline, mycolumn, mychar);
						  	return(OctaveParser.COMMAND_IDENTIFIER);
						  } 
						  else 
						  {
						    yybegin(TRANSPOSABLE);
						    yyparser.yylval = new OctaveToken(OctaveParser.IDENTIFIER, text, myline, mycolumn, mychar);
						  	return(OctaveParser.IDENTIFIER);
						  }
          }
        case 173: break;
        case 73: 
          { yybegin(DQSTRING);
  						  string.append( '\"' );
          }
        case 174: break;
        case 68: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.OR_OR, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.OR_OR);
          }
        case 175: break;
        case 112: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDSWITCH, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDSWITCH);
          }
        case 176: break;
        case 113: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.OTHERWISE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.OTHERWISE);
          }
        case 177: break;
        case 53: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 178: break;
        case 27: 
          { yybegin(TRANSPOSABLE);
						  yyparser.yylval = new OctaveToken(OctaveParser.RBRACKET, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RBRACKET);
          }
        case 179: break;
        case 102: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.UNTIL, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.UNTIL);
          }
        case 180: break;
        case 24: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LPAREN, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LPAREN);
          }
        case 181: break;
        case 15: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.PLUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PLUS);
          }
        case 182: break;
        case 71: 
          { yybegin(DQSTRING);
  						  string.append( '\'' );
          }
        case 183: break;
        case 70: 
          { yybegin(DQSTRING);
  						  string.append( '\\' );
          }
        case 184: break;
        case 36: 
          { returnState = COMMAND;
                          yybegin(SQSTRING); 
                          string.setLength(0);
                          myline = yyline;
                          mycolumn = yycolumn;
                          mychar = yychar;
          }
        case 185: break;
        case 19: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.GT_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.GT_OP);
          }
        case 186: break;
        case 9: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.DIV, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.DIV);
          }
        case 187: break;
        case 2: 
          { yybegin(TRANSPOSABLE); 
						  yyparser.yylval = new OctaveToken(OctaveParser.CONSTANT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.CONSTANT);
          }
        case 188: break;
        case 21: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.SEMICOLON, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.SEMICOLON);
          }
        case 189: break;
        case 30: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.AT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.AT);
          }
        case 190: break;
        case 5: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.MINUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MINUS);
          }
        case 191: break;
        case 94: 
          { b_comm_p_lvl--;
					if (b_comm_p_lvl == 0 && b_comm_h_lvl == 0) {
						yybegin(returnState);
					}
					yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 192: break;
        case 29: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.OR, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.OR);
          }
        case 193: break;
        case 72: 
          { yybegin(DQSTRING);
          }
        case 194: break;
        case 26: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.LBRACKET, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LBRACKET);
          }
        case 195: break;
        case 8: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.DOT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.DOT);
          }
        case 196: break;
        case 34: 
          { yybegin(COMMAND);
          }
        case 197: break;
        case 65: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.AND_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.AND_EQ);
          }
        case 198: break;
        case 3: 
          { yybegin(YYINITIAL);
          }
        case 199: break;
        case 103: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.RETURN, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RETURN);
          }
        case 200: break;
        case 83: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.POW, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.POW_EQ);
          }
        case 201: break;
        case 42: 
          { yybegin(returnState); 
                          yyparser.yylval = new OctaveToken(OctaveParser.STRING_LITERAL, string.toString(), myline, mycolumn, mychar);
                          return(OctaveParser.STRING_LITERAL);
          }
        case 202: break;
        case 1: 
          { return(OctaveParser.LEX_ERROR);
          }
        case 203: break;
        case 77: 
          { yybegin(DQSTRING);
  						  string.append( '\f' );
          }
        case 204: break;
        case 17: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LT_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LT_OP);
          }
        case 205: break;
        case 85: 
          { yybegin(BLOCK_COMMENT);
						  returnState = YYINITIAL;
						  b_comm_h_lvl = 1;
						  b_comm_p_lvl = 0; 
						  yyparser.yylval = new OctaveToken(OctaveParser.COMMENT, yytext(), yyline, yycolumn, yychar);
          }
        case 206: break;
        case 108: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.GLOBAL, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.GLOBAL);
          }
        case 207: break;
        case 99: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDIF, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDIF);
          }
        case 208: break;
        case 45: 
          { yybegin(YYINITIAL);
                          yyparser.yylval = new OctaveToken(OctaveParser.CONTINUATION, yytext(), yyline, yycolumn, yychar);
          }
        case 209: break;
        case 16: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.POW, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.POW);
          }
        case 210: break;
        case 98: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.BREAK, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.BREAK);
          }
        case 211: break;
        case 28: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.AND, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.AND);
          }
        case 212: break;
        case 114: 
          { yybegin(YYINITIAL);
						  if (varargoutIsToken)
						  {
						  	yyparser.yylval = new OctaveToken(OctaveParser.VARARGOUT, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.VARARGOUT);
						  } else {
						  	yyparser.yylval = new OctaveToken(OctaveParser.IDENTIFIER, yytext(), yyline, yycolumn, yychar);
						  	return(OctaveParser.IDENTIFIER);
						  }
          }
        case 213: break;
        case 54: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.DO, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.DO);
          }
        case 214: break;
        case 109: 
          { yybegin(YYINITIAL); 
						  if (functionDepth > 0)
						  {
							  yyparser.yylval = new OctaveToken(OctaveParser.ENDFUNCTION, "", yyline, yycolumn, yychar - 1);
							  /* pushback token so we can start a new function correctly */
							  yypushback(yylength());
							  return(OctaveParser.ENDFUNCTION); 
						  }
						  else
						  {
							  yyparser.yylval = new OctaveToken(OctaveParser.FUNCTION, yytext(), yyline, yycolumn, yychar);
							  return(OctaveParser.FUNCTION); 
						  }
          }
        case 215: break;
        case 37: 
          { yybegin(YYINITIAL); 
                          yyparser.yylval = new OctaveToken(OctaveParser.CR, yytext(), yyline, yycolumn, yychar);
                          return(OctaveParser.CR);
          }
        case 216: break;
        case 90: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.RSHIFT_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RSHIFT_EQ);
          }
        case 217: break;
        case 62: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.EQ_OP, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.EQ_OP);
          }
        case 218: break;
        case 13: 
          { yybegin(TRANSPOSABLE); 
						  yyparser.yylval = new OctaveToken(OctaveParser.RBRACE, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RBRACE);
          }
        case 219: break;
        case 86: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.TRY, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.TRY);
          }
        case 220: break;
        case 47: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.MINUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MINUS);
          }
        case 221: break;
        case 56: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.PLUS_PLUS, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PLUS_PLUS);
          }
        case 222: break;
        case 49: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.MULT, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MULT);
          }
        case 223: break;
        case 116: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.ENDTRYCATCH, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.ENDTRYCATCH);
          }
        case 224: break;
        case 87: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.FOR, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.FOR);
          }
        case 225: break;
        case 82: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.PLUS_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PLUS_EQ);
          }
        case 226: break;
        case 51: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.DIV_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.DIV_EQ);
          }
        case 227: break;
        case 101: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.CATCH, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.CATCH);
          }
        case 228: break;
        case 14: 
          { returnState = YYINITIAL;
                          yybegin(DQSTRING); 
                          string.setLength(0);
                          myline = yyline;
                          mycolumn = yycolumn;
                          mychar = yychar;
          }
        case 229: break;
        case 57: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.PLUS_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.PLUS_EQ);
          }
        case 230: break;
        case 44: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.MINUS_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MINUS_EQ);
          }
        case 231: break;
        case 79: 
          { yybegin(SQSTRING);
                          string.append( '\'' );
          }
        case 232: break;
        case 25: 
          { yybegin(TRANSPOSABLE); 
						  yyparser.yylval = new OctaveToken(OctaveParser.RPAREN, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.RPAREN);
          }
        case 233: break;
        case 58: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.POW_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.POW_EQ);
          }
        case 234: break;
        case 88: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.END, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.END);
          }
        case 235: break;
        case 7: 
          { returnState = YYINITIAL;
                          yybegin(SQSTRING); 
                          string.setLength(0);
                          myline = yyline;
                          mycolumn = yycolumn;
                          mychar = yychar;
          }
        case 236: break;
        case 81: 
          { yybegin(YYINITIAL);
						  yyparser.yylval = new OctaveToken(OctaveParser.MINUS_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.MINUS_EQ);
          }
        case 237: break;
        case 89: 
          { yybegin(YYINITIAL); 
						  yyparser.yylval = new OctaveToken(OctaveParser.LSHIFT_EQ, yytext(), yyline, yycolumn, yychar);
						  return(OctaveParser.LSHIFT_EQ);
          }
        case 238: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (functionDepth >= 1)
						  { 
							  yybegin(YYINITIAL);
							  yyparser.yylval = new OctaveToken(OctaveParser.EOF, yytext(), yyline, yycolumn, yychar);
							  return(OctaveParser.EOF);
						  } else {
						  	  return(0);
						  }
            }
            case 320: break;
            case TRANSPOSABLE: {
              if (functionDepth >= 1)
						  { 
							  yybegin(YYINITIAL);
							  yyparser.yylval = new OctaveToken(OctaveParser.EOF, yytext(), yyline, yycolumn, yychar);
							  return(OctaveParser.EOF);
						  } else {
						  	  return(0);
						  }
            }
            case 321: break;
            default:
              { return 0; }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
